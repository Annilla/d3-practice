!function(t){function e(n){if(r[n])return r[n].exports;var i=r[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,e),i.l=!0,i.exports}var r={};e.m=t,e.c=r,e.i=function(t){return t},e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=3)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){};e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(4),i=void 0;i={"/":r(0).default,"/index.html":r(0).default},e.default=new n.Router(i)},function(t,e){},function(t,e,r){"use strict";var n=r(1),i=function(t){return t&&t.__esModule?t:{default:t}}(n);r(2);var o={html5history:!0};i.default.configure(o).init()},function(t,e,r){!function(t){function e(){return""===c.hash||"#"===c.hash}function r(t,e){for(var r=0;r<t.length;r+=1)if(!1===e(t[r],r,t))return}function n(t){for(var e=[],r=0,n=t.length;r<n;r++)e=e.concat(t[r]);return e}function i(t,e,r){if(!t.length)return r();var n=0;!function i(){e(t[n],function(e){e||!1===e?(r(e),r=function(){}):(n+=1,n===t.length?r():i())})}()}function o(t,e,r){r=t;for(var n in e)if(e.hasOwnProperty(n)&&(r=e[n](t))!==t)break;return r===t?"([._a-zA-Z0-9-%()]+)":r}function h(t,e){for(var r,n=0,i="";r=t.substr(n).match(/[^\w\d\- %@&]*\*[^\w\d\- %@&]*/);)n=r.index+r[0].length,r[0]=r[0].replace(/^\*/,"([_.()!\\ %@&a-zA-Z0-9-]+)"),i+=t.substr(0,r.index)+r[0];t=i+=t.substr(n);var s,h,a=t.match(/:([^\/]+)/gi);if(a){h=a.length;for(var c=0;c<h;c++)s=a[c],t="::"===s.slice(0,2)?s.slice(1):t.replace(s,o(s,e))}return t}function a(t,e,r,n){var i,o=0,s=0,h=0,r=(r||"(").toString(),n=(n||")").toString();for(i=0;i<t.length;i++){var a=t[i];if(a.indexOf(r,o)>a.indexOf(n,o)||~a.indexOf(r,o)&&!~a.indexOf(n,o)||!~a.indexOf(r,o)&&~a.indexOf(n,o)){if(s=a.indexOf(r,o),h=a.indexOf(n,o),~s&&!~h||!~s&&~h){t=[t.slice(0,(i||1)+1).join(e)].concat(t.slice((i||1)+1))}o=(h>s?h:s)+1,i=0}else o=0}return t}var c=document.location,u={mode:"modern",hash:c.hash,history:!1,check:function(){var t=c.hash;t!=this.hash&&(this.hash=t,this.onHashChanged())},fire:function(){"modern"===this.mode?!0===this.history?window.onpopstate():window.onhashchange():this.onHashChanged()},init:function(t,e){function r(t){for(var e=0,r=f.listeners.length;e<r;e++)f.listeners[e](t)}var n=this;if(this.history=e,f.listeners||(f.listeners=[]),"onhashchange"in window&&(void 0===document.documentMode||document.documentMode>7))!0===this.history?setTimeout(function(){window.onpopstate=r},500):window.onhashchange=r,this.mode="modern";else{var i=document.createElement("iframe");i.id="state-frame",i.style.display="none",document.body.appendChild(i),this.writeFrame(""),"onpropertychange"in document&&"attachEvent"in document&&document.attachEvent("onpropertychange",function(){"location"===event.propertyName&&n.check()}),window.setInterval(function(){n.check()},50),this.onHashChanged=r,this.mode="legacy"}return f.listeners.push(t),this.mode},destroy:function(t){if(f&&f.listeners)for(var e=f.listeners,r=e.length-1;r>=0;r--)e[r]===t&&e.splice(r,1)},setHash:function(t){return"legacy"===this.mode&&this.writeFrame(t),!0===this.history?(window.history.pushState({},document.title,t),this.fire()):c.hash="/"===t[0]?t:"/"+t,this},writeFrame:function(t){var e=document.getElementById("state-frame"),r=e.contentDocument||e.contentWindow.document;r.open(),r.write("<script>_hash = '"+t+"'; onload = parent.listener.syncHash;<script>"),r.close()},syncHash:function(){var t=this._hash;return t!=c.hash&&(c.hash=t),this},onHashChanged:function(){}},f=t.Router=function(t){if(!(this instanceof f))return new f(t);this.params={},this.routes={},this.methods=["on","once","after","before"],this.scope=[],this._methods={},this._insert=this.insert,this.insert=this.insertEx,this.historySupport=null!=(null!=window.history?window.history.pushState:null),this.configure(),this.mount(t||{})};f.prototype.init=function(t){var r,n=this;return this.handler=function(t){var e=t&&t.newURL||window.location.hash,r=!0===n.history?n.getPath():e.replace(/.*#/,"");n.dispatch("on","/"===r.charAt(0)?r:"/"+r)},u.init(this.handler,this.history),!1===this.history?e()&&t?c.hash=t:e()||n.dispatch("on","/"+c.hash.replace(/^(#\/|#|\/)/,"")):(this.convert_hash_in_init?(r=e()&&t?t:e()?null:c.hash.replace(/^#/,""))&&window.history.replaceState({},document.title,r):r=this.getPath(),(r||!0===this.run_in_init)&&this.handler()),this},f.prototype.explode=function(){var t=!0===this.history?this.getPath():c.hash;return"/"===t.charAt(1)&&(t=t.slice(1)),t.slice(1,t.length).split("/")},f.prototype.setRoute=function(t,e,r){var n=this.explode();return"number"==typeof t&&"string"==typeof e?n[t]=e:"string"==typeof r?n.splice(t,e,s):n=[t],u.setHash(n.join("/")),n},f.prototype.insertEx=function(t,e,r,n){return"once"===t&&(t="on",r=function(t){var e=!1;return function(){if(!e)return e=!0,t.apply(this,arguments)}}(r)),this._insert(t,e,r,n)},f.prototype.getRoute=function(t){var e=t;if("number"==typeof t)e=this.explode()[t];else if("string"==typeof t){var r=this.explode();e=r.indexOf(t)}else e=this.explode();return e},f.prototype.destroy=function(){return u.destroy(this.handler),this},f.prototype.getPath=function(){var t=window.location.pathname;return"/"!==t.substr(0,1)&&(t="/"+t),t};var l=/\?.*/;f.prototype.configure=function(t){t=t||{};for(var e=0;e<this.methods.length;e++)this._methods[this.methods[e]]=!0;return this.recurse=t.recurse||this.recurse||!1,this.async=t.async||!1,this.delimiter=t.delimiter||"/",this.strict=void 0===t.strict||t.strict,this.notfound=t.notfound,this.resource=t.resource,this.history=t.html5history&&this.historySupport||!1,this.run_in_init=!0===this.history&&!1!==t.run_handler_in_init,this.convert_hash_in_init=!0===this.history&&!1!==t.convert_hash_in_init,this.every={after:t.after||null,before:t.before||null,on:t.on||null},this},f.prototype.param=function(t,e){":"!==t[0]&&(t=":"+t);var r=new RegExp(t,"g");return this.params[t]=function(t){return t.replace(r,e.source||e)},this},f.prototype.on=f.prototype.route=function(t,e,r){var n=this;return r||"function"!=typeof e||(r=e,e=t,t="on"),Array.isArray(e)?e.forEach(function(e){n.on(t,e,r)}):(e.source&&(e=e.source.replace(/\\\//gi,"/")),Array.isArray(t)?t.forEach(function(t){n.on(t.toLowerCase(),e,r)}):(e=e.split(new RegExp(this.delimiter)),e=a(e,this.delimiter),void this.insert(t,this.scope.concat(e),r)))},f.prototype.path=function(t,e){var r=this.scope.length;t.source&&(t=t.source.replace(/\\\//gi,"/")),t=t.split(new RegExp(this.delimiter)),t=a(t,this.delimiter),this.scope=this.scope.concat(t),e.call(this,this),this.scope.splice(r,t.length)},f.prototype.dispatch=function(t,e,r){function n(){o.last=s.after,o.invoke(o.runlist(s),o,r)}var i,o=this,s=this.traverse(t,e.replace(l,""),this.routes,""),h=this._invoked;return this._invoked=!0,s&&0!==s.length?("forward"===this.recurse&&(s=s.reverse()),(i=this.every&&this.every.after?[this.every.after].concat(this.last):[this.last])&&i.length>0&&h?(this.async?this.invoke(i,this,n):(this.invoke(i,this),n()),!0):(n(),!0)):(this.last=[],"function"==typeof this.notfound&&this.invoke([this.notfound],{method:t,path:e},r),!1)},f.prototype.invoke=function(t,e,n){var o,s=this;this.async?(o=function(r,n){if(Array.isArray(r))return i(r,o,n);"function"==typeof r&&r.apply(e,(t.captures||[]).concat(n))},i(t,o,function(){n&&n.apply(e,arguments)})):(o=function(n){return Array.isArray(n)?r(n,o):"function"==typeof n?n.apply(e,t.captures||[]):void("string"==typeof n&&s.resource&&s.resource[n].apply(e,t.captures||[]))},r(t,o))},f.prototype.traverse=function(t,e,r,n,i){function o(t){function e(t){for(var r=[],n=0;n<t.length;n++)r[n]=Array.isArray(t[n])?e(t[n]):t[n];return r}function r(t){for(var e=t.length-1;e>=0;e--)Array.isArray(t[e])?(r(t[e]),0===t[e].length&&t.splice(e,1)):i(t[e])||t.splice(e,1)}if(!i)return t;var n=e(t);return n.matched=t.matched,n.captures=t.captures,n.after=t.after.filter(i),r(n),n}var s,h,a,c,u=[];if(e===this.delimiter&&r[t])return c=[[r.before,r[t]].filter(Boolean)],c.after=[r.after].filter(Boolean),c.matched=!0,c.captures=[],o(c);for(var f in r)if(r.hasOwnProperty(f)&&(!this._methods[f]||this._methods[f]&&"object"==typeof r[f]&&!Array.isArray(r[f]))){if(s=h=n+this.delimiter+f,this.strict||(h+="["+this.delimiter+"]?"),!(a=e.match(new RegExp("^"+h))))continue;if(a[0]&&a[0]==e&&r[f][t])return c=[[r[f].before,r[f][t]].filter(Boolean)],c.after=[r[f].after].filter(Boolean),c.matched=!0,c.captures=a.slice(1),this.recurse&&r===this.routes&&(c.push([r.before,r.on].filter(Boolean)),c.after=c.after.concat([r.after].filter(Boolean))),o(c);if(c=this.traverse(t,e,r[f],s),c.matched)return c.length>0&&(u=u.concat(c)),this.recurse&&(u.push([r[f].before,r[f].on].filter(Boolean)),c.after=c.after.concat([r[f].after].filter(Boolean)),r===this.routes&&(u.push([r.before,r.on].filter(Boolean)),c.after=c.after.concat([r.after].filter(Boolean)))),u.matched=!0,u.captures=c.captures,u.after=c.after,o(u)}return!1},f.prototype.insert=function(t,e,r,n){var i,o,s,a;if(e=e.filter(function(t){return t&&t.length>0}),n=n||this.routes,a=e.shift(),/\:|\*/.test(a)&&!/\\d|\\w/.test(a)&&(a=h(a,this.params)),e.length>0)return n[a]=n[a]||{},this.insert(t,e,r,n[a]);if(a||e.length||n!==this.routes){if(i=typeof n[a],o=Array.isArray(n[a]),n[a]&&!o&&"object"==i)switch(typeof n[a][t]){case"function":return void(n[a][t]=[n[a][t],r]);case"object":return void n[a][t].push(r);case"undefined":return void(n[a][t]=r)}else if("undefined"==i)return s={},s[t]=r,void(n[a]=s);throw new Error("Invalid route context: "+i)}switch(typeof n[t]){case"function":return void(n[t]=[n[t],r]);case"object":return void n[t].push(r);case"undefined":return void(n[t]=r)}},f.prototype.extend=function(t){var e,r=this,n=t.length;for(e=0;e<n;e++)!function(t){r._methods[t]=!0,r[t]=function(){var e=1===arguments.length?[t,""]:[t];r.on.apply(r,e.concat(Array.prototype.slice.call(arguments)))}}(t[e])},f.prototype.runlist=function(t){var e=this.every&&this.every.before?[this.every.before].concat(n(t)):n(t);return this.every&&this.every.on&&e.push(this.every.on),e.captures=t.captures,e.source=t.source,e},f.prototype.mount=function(t,e){if(t&&"object"==typeof t&&!Array.isArray(t)){var r=this;e=e||[],Array.isArray(e)||(e=e.split(r.delimiter));for(var n in t)t.hasOwnProperty(n)&&function(e,n){var i=e,o=e.split(r.delimiter),s=typeof t[e],h=""===o[0]||!r._methods[o[0]],c=h?"on":i;if(h&&(i=i.slice((i.match(new RegExp("^"+r.delimiter))||[""])[0].length),o.shift()),h&&"object"===s&&!Array.isArray(t[e]))return n=n.concat(o),void r.mount(t[e],n);h&&(n=n.concat(i.split(r.delimiter)),n=a(n,r.delimiter)),r.insert(c,n,t[e])}(n,e.slice(0))}}}(e)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,