!function(t){function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}var e={};n.m=t,n.c=e,n.i=function(t){return t},n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},n.p="",n(n.s=34)}([function(t,n,e){"use strict";(function(n){function r(t){return"[object Array]"===A.call(t)}function i(t){return void 0!==n&&n.isBuffer&&n.isBuffer(t)}function o(t){return"[object ArrayBuffer]"===A.call(t)}function a(t){return"undefined"!=typeof FormData&&t instanceof FormData}function u(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer}function s(t){return"string"==typeof t}function c(t){return"number"==typeof t}function f(t){return void 0===t}function l(t){return null!==t&&"object"==typeof t}function h(t){return"[object Date]"===A.call(t)}function p(t){return"[object File]"===A.call(t)}function d(t){return"[object Blob]"===A.call(t)}function g(t){return"[object Function]"===A.call(t)}function v(t){return l(t)&&g(t.pipe)}function y(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams}function _(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}function m(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)}function x(t,n){if(null!==t&&void 0!==t)if("object"==typeof t||r(t)||(t=[t]),r(t))for(var e=0,i=t.length;e<i;e++)n.call(null,t[e],e,t);else for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&n.call(null,t[o],o,t)}function b(){function t(t,e){"object"==typeof n[e]&&"object"==typeof t?n[e]=b(n[e],t):n[e]=t}for(var n={},e=0,r=arguments.length;e<r;e++)x(arguments[e],t);return n}function w(t,n,e){return x(n,function(n,r){t[r]=e&&"function"==typeof n?M(n,e):n}),t}var M=e(9),A=Object.prototype.toString;t.exports={isArray:r,isArrayBuffer:o,isBuffer:i,isFormData:a,isArrayBufferView:u,isString:s,isNumber:c,isObject:l,isUndefined:f,isDate:h,isFile:p,isBlob:d,isFunction:g,isStream:v,isURLSearchParams:y,isStandardBrowserEnv:m,forEach:x,merge:b,extend:w,trim:_}}).call(n,e(41).Buffer)},function(t,n,e){t.exports=e(17)},function(t,n,e){!function(t,e){e(n)}(0,function(t){"use strict";function n(t){return function(n,e){return Hc(t(n),e)}}function e(t,n){return[t,n]}function r(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=cf?10:o>=ff?5:o>=lf?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=cf?10:o>=ff?5:o>=lf?2:1)}function i(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=cf?i*=10:o>=ff?i*=5:o>=lf&&(i*=2),n<t?-i:i}function o(t){return t.length}function a(t){return"translate("+(t+.5)+",0)"}function u(t){return"translate(0,"+(t+.5)+")"}function s(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return t(e)+n}}function c(){return!this.__axis}function f(t,n){function e(e){var a=null==i?n.ticks?n.ticks.apply(n,r):n.domain():i,u=null==o?n.tickFormat?n.tickFormat.apply(n,r):Cf:o,v=Math.max(f,0)+h,y=n.range(),_=y[0]+.5,m=y[y.length-1]+.5,x=(n.bandwidth?s:Cf)(n.copy()),b=e.selection?e.selection():e,w=b.selectAll(".domain").data([null]),M=b.selectAll(".tick").data(a,n).order(),A=M.exit(),E=M.enter().append("g").attr("class","tick"),S=M.select("line"),T=M.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),M=M.merge(E),S=S.merge(E.append("line").attr("stroke","#000").attr(d+"2",p*f)),T=T.merge(E.append("text").attr("fill","#000").attr(d,p*v).attr("dy",t===Rf?"0em":t===Of?"0.71em":"0.32em")),e!==b&&(w=w.transition(e),M=M.transition(e),S=S.transition(e),T=T.transition(e),A=A.transition(e).attr("opacity",Uf).attr("transform",function(t){return isFinite(t=x(t))?g(t):this.getAttribute("transform")}),E.attr("opacity",Uf).attr("transform",function(t){var n=this.parentNode.__axis;return g(n&&isFinite(n=n(t))?n:x(t))})),A.remove(),w.attr("d",t===Lf||t==Pf?"M"+p*l+","+_+"H0.5V"+m+"H"+p*l:"M"+_+","+p*l+"V0.5H"+m+"V"+p*l),M.attr("opacity",1).attr("transform",function(t){return g(x(t))}),S.attr(d+"2",p*f),T.attr(d,p*v).text(u),b.filter(c).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Pf?"start":t===Lf?"end":"middle"),b.each(function(){this.__axis=x})}var r=[],i=null,o=null,f=6,l=6,h=3,p=t===Rf||t===Lf?-1:1,d=t===Lf||t===Pf?"x":"y",g=t===Rf||t===Of?a:u;return e.scale=function(t){return arguments.length?(n=t,e):n},e.ticks=function(){return r=Nf.call(arguments),e},e.tickArguments=function(t){return arguments.length?(r=null==t?[]:Nf.call(t),e):r.slice()},e.tickValues=function(t){return arguments.length?(i=null==t?null:Nf.call(t),e):i&&i.slice()},e.tickFormat=function(t){return arguments.length?(o=t,e):o},e.tickSize=function(t){return arguments.length?(f=l=+t,e):f},e.tickSizeInner=function(t){return arguments.length?(f=+t,e):f},e.tickSizeOuter=function(t){return arguments.length?(l=+t,e):l},e.tickPadding=function(t){return arguments.length?(h=+t,e):h},e}function l(t){return f(Rf,t)}function h(t){return f(Pf,t)}function p(t){return f(Of,t)}function d(t){return f(Lf,t)}function g(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new v(r)}function v(t){this._=t}function y(t,n){return t.trim().split(/^|\s+/).map(function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})}function _(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function m(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=Bf,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}function x(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===zf&&n.documentElement.namespaceURI===zf?n.createElement(t):n.createElementNS(e,t)}}function b(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function w(){return new M}function M(){this._="@"+(++Yf).toString(36)}function A(t,n,e){return t=E(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function E(n,e,r){return function(i){var o=t.event;t.event=i;try{n.call(this,this.__data__,e,r)}finally{t.event=o}}}function S(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}function T(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function k(t,n,e){var r=Wf.hasOwnProperty(t.type)?A:E;return function(i,o,a){var u,s=this.__on,c=r(n,o,a);if(s)for(var f=0,l=s.length;f<l;++f)if((u=s[f]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=c,u.capture=e),void(u.value=n);this.addEventListener(t.type,c,e),u={type:t.type,name:t.name,value:n,listener:c,capture:e},s?s.push(u):this.__on=[u]}}function N(n,e,r,i){var o=t.event;n.sourceEvent=t.event,t.event=n;try{return e.apply(r,i)}finally{t.event=o}}function C(){}function R(){return[]}function P(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function O(t,n,e,r,i,o){for(var a,u=0,s=n.length,c=o.length;u<c;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new P(t,o[u]);for(;u<s;++u)(a=n[u])&&(i[u]=a)}function L(t,n,e,r,i,o,a){var u,s,c,f={},l=n.length,h=o.length,p=new Array(l);for(u=0;u<l;++u)(s=n[u])&&(p[u]=c=ol+a.call(s,s.__data__,u,n),c in f?i[u]=s:f[c]=s);for(u=0;u<h;++u)c=ol+a.call(t,o[u],u,o),(s=f[c])?(r[u]=s,s.__data__=o[u],f[c]=null):e[u]=new P(t,o[u]);for(u=0;u<l;++u)(s=n[u])&&f[p[u]]===s&&(i[u]=s)}function U(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function B(t){return function(){this.removeAttribute(t)}}function z(t){return function(){this.removeAttributeNS(t.space,t.local)}}function D(t,n){return function(){this.setAttribute(t,n)}}function I(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function q(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function Y(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function j(t){return function(){this.style.removeProperty(t)}}function F(t,n,e){return function(){this.style.setProperty(t,n,e)}}function H(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function X(t,n){return t.style.getPropertyValue(n)||_l(t).getComputedStyle(t,null).getPropertyValue(n)}function W(t){return function(){delete this[t]}}function V(t,n){return function(){this[t]=n}}function $(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function Z(t){return t.trim().split(/^|\s+/)}function G(t){return t.classList||new J(t)}function J(t){this._node=t,this._names=Z(t.getAttribute("class")||"")}function K(t,n){for(var e=G(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function Q(t,n){for(var e=G(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function tt(t){return function(){K(this,t)}}function nt(t){return function(){Q(this,t)}}function et(t,n){return function(){(n.apply(this,arguments)?K:Q)(this,t)}}function rt(){this.textContent=""}function it(t){return function(){this.textContent=t}}function ot(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function at(){this.innerHTML=""}function ut(t){return function(){this.innerHTML=t}}function st(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function ct(){this.nextSibling&&this.parentNode.appendChild(this)}function ft(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function lt(){return null}function ht(){var t=this.parentNode;t&&t.removeChild(this)}function pt(t,n,e){var r=_l(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function dt(t,n){return function(){return pt(this,t,n)}}function gt(t,n){return function(){return pt(this,t,n.apply(this,arguments))}}function vt(t,n){this._groups=t,this._parents=n}function yt(){return new vt([[document.documentElement]],Rl)}function _t(){t.event.stopImmediatePropagation()}function mt(t,n){var e=t.document.documentElement,r=Pl(t).on("dragstart.drag",null);n&&(r.on("click.drag",Bl,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}function xt(t,n,e,r,i,o,a,u,s,c){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=a,this.dx=u,this.dy=s,this._=c}function bt(){return!t.event.button}function wt(){return this.parentNode}function Mt(n){return null==n?{x:t.event.x,y:t.event.y}:n}function At(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Et(){}function St(t){var n;return t=(t+"").trim().toLowerCase(),(n=Hl.exec(t))?(n=parseInt(n[1],16),new Rt(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1)):(n=Xl.exec(t))?Tt(parseInt(n[1],16)):(n=Wl.exec(t))?new Rt(n[1],n[2],n[3],1):(n=Vl.exec(t))?new Rt(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=$l.exec(t))?kt(n[1],n[2],n[3],n[4]):(n=Zl.exec(t))?kt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Gl.exec(t))?Pt(n[1],n[2]/100,n[3]/100,1):(n=Jl.exec(t))?Pt(n[1],n[2]/100,n[3]/100,n[4]):Kl.hasOwnProperty(t)?Tt(Kl[t]):"transparent"===t?new Rt(NaN,NaN,NaN,0):null}function Tt(t){return new Rt(t>>16&255,t>>8&255,255&t,1)}function kt(t,n,e,r){return r<=0&&(t=n=e=NaN),new Rt(t,n,e,r)}function Nt(t){return t instanceof Et||(t=St(t)),t?(t=t.rgb(),new Rt(t.r,t.g,t.b,t.opacity)):new Rt}function Ct(t,n,e,r){return 1===arguments.length?Nt(t):new Rt(t,n,e,null==r?1:r)}function Rt(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Pt(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Ut(t,n,e,r)}function Ot(t){if(t instanceof Ut)return new Ut(t.h,t.s,t.l,t.opacity);if(t instanceof Et||(t=St(t)),!t)return new Ut;if(t instanceof Ut)return t;t=t.rgb();var n=t.r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,s=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=s<.5?o+i:2-o-i,a*=60):u=s>0&&s<1?0:a,new Ut(a,u,s,t.opacity)}function Lt(t,n,e,r){return 1===arguments.length?Ot(t):new Ut(t,n,e,null==r?1:r)}function Ut(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Bt(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function zt(t){if(t instanceof It)return new It(t.l,t.a,t.b,t.opacity);if(t instanceof Wt){var n=t.h*Ql;return new It(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof Rt||(t=Nt(t));var e=Ft(t.r),r=Ft(t.g),i=Ft(t.b),o=qt((.4124564*e+.3575761*r+.1804375*i)/nh),a=qt((.2126729*e+.7151522*r+.072175*i)/eh);return new It(116*a-16,500*(o-a),200*(a-qt((.0193339*e+.119192*r+.9503041*i)/rh)),t.opacity)}function Dt(t,n,e,r){return 1===arguments.length?zt(t):new It(t,n,e,null==r?1:r)}function It(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function qt(t){return t>uh?Math.pow(t,1/3):t/ah+ih}function Yt(t){return t>oh?t*t*t:ah*(t-ih)}function jt(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ft(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Ht(t){if(t instanceof Wt)return new Wt(t.h,t.c,t.l,t.opacity);t instanceof It||(t=zt(t));var n=Math.atan2(t.b,t.a)*th;return new Wt(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Xt(t,n,e,r){return 1===arguments.length?Ht(t):new Wt(t,n,e,null==r?1:r)}function Wt(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function Vt(t){if(t instanceof Zt)return new Zt(t.h,t.s,t.l,t.opacity);t instanceof Rt||(t=Nt(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(gh*r+ph*n-dh*e)/(gh+ph-dh),o=r-i,a=(hh*(e-i)-fh*o)/lh,u=Math.sqrt(a*a+o*o)/(hh*i*(1-i)),s=u?Math.atan2(a,o)*th-120:NaN;return new Zt(s<0?s+360:s,u,i,t.opacity)}function $t(t,n,e,r){return 1===arguments.length?Vt(t):new Zt(t,n,e,null==r?1:r)}function Zt(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Gt(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}function Jt(t,n){return function(e){return t+e*n}}function Kt(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}function Qt(t,n){var e=n-t;return e?Jt(t,e>180||e<-180?e-360*Math.round(e/360):e):Ah(isNaN(t)?n:t)}function tn(t){return 1==(t=+t)?nn:function(n,e){return e-n?Kt(n,e,t):Ah(isNaN(n)?e:n)}}function nn(t,n){var e=n-t;return e?Jt(t,e):Ah(isNaN(t)?n:t)}function en(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=Ct(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}function rn(t){return function(){return t}}function on(t){return function(n){return t(n)+""}}function an(t){return"none"===t?Dh:(vh||(vh=document.createElement("DIV"),yh=document.documentElement,_h=document.defaultView),vh.style.transform=t,t=_h.getComputedStyle(yh.appendChild(vh),null).getPropertyValue("transform"),yh.removeChild(vh),t=t.slice(7,-1).split(","),Ih(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}function un(t){return null==t?Dh:(mh||(mh=document.createElementNS("http://www.w3.org/2000/svg","g")),mh.setAttribute("transform",t),(t=mh.transform.baseVal.consolidate())?(t=t.matrix,Ih(t.a,t.b,t.c,t.d,t.e,t.f)):Dh)}function sn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}function o(t,r,i,o,a,u){if(t!==i||r!==o){var s=a.push("translate(",null,n,null,e);u.push({i:s-4,x:Ch(t,i)},{i:s-2,x:Ch(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}function a(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Ch(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}function u(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Ch(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}function s(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Ch(t,e)},{i:u-2,x:Ch(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}return function(n,e){var r=[],i=[];return n=t(n),e=t(e),o(n.translateX,n.translateY,e.translateX,e.translateY,r,i),a(n.rotate,e.rotate,r,i),u(n.skewX,e.skewX,r,i),s(n.scaleX,n.scaleY,e.scaleX,e.scaleY,r,i),n=e=null,function(t){for(var n,e=-1,o=i.length;++e<o;)r[(n=i[e]).i]=n.x(t);return r.join("")}}}function cn(t){return((t=Math.exp(t))+1/t)/2}function fn(t){return((t=Math.exp(t))-1/t)/2}function ln(t){return((t=Math.exp(2*t))-1)/(t+1)}function hn(t){return function(n,e){var r=t((n=Lt(n)).h,(e=Lt(e)).h),i=nn(n.s,e.s),o=nn(n.l,e.l),a=nn(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=a(t),n+""}}}function pn(t,n){var e=nn((t=Dt(t)).l,(n=Dt(n)).l),r=nn(t.a,n.a),i=nn(t.b,n.b),o=nn(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function dn(t){return function(n,e){var r=t((n=Xt(n)).h,(e=Xt(e)).h),i=nn(n.c,e.c),o=nn(n.l,e.l),a=nn(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=a(t),n+""}}}function gn(t){return function n(e){function r(n,r){var i=t((n=$t(n)).h,(r=$t(r)).h),o=nn(n.s,r.s),a=nn(n.l,r.l),u=nn(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=a(Math.pow(t,e)),n.opacity=u(t),n+""}}return e=+e,r.gamma=n,r}(1)}function vn(){return ep||(op(yn),ep=ip.now()+rp)}function yn(){ep=0}function _n(){this._call=this._time=this._next=null}function mn(t,n,e){var r=new _n;return r.restart(t,n,e),r}function xn(){vn(),++Jh;for(var t,n=xh;n;)(t=ep-n._time)>=0&&n._call.call(null,t),n=n._next;--Jh}function bn(){ep=(np=ip.now())+rp,Jh=Kh=0;try{xn()}finally{Jh=0,Mn(),ep=0}}function wn(){var t=ip.now(),n=t-np;n>tp&&(rp-=n,np=t)}function Mn(){for(var t,n,e=xh,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:xh=n);bh=t,An(r)}function An(t){if(!Jh){Kh&&(Kh=clearTimeout(Kh));var n=t-ep;n>24?(t<1/0&&(Kh=setTimeout(bn,n)),Qh&&(Qh=clearInterval(Qh))):(Qh||(np=ep,Qh=setInterval(wn,tp)),Jh=1,op(bn))}}function En(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>fp)throw new Error("too late");return e}function Sn(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>hp)throw new Error("too late");return e}function Tn(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("too late");return e}function kn(t,n,e){function r(t){e.state=lp,e.timer.restart(i,e.delay,e.time),e.delay<=t&&i(t-e.delay)}function i(r){var c,f,l,h;if(e.state!==lp)return a();for(c in s)if(h=s[c],h.name===e.name){if(h.state===pp)return ap(i);h.state===dp?(h.state=vp,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete s[c]):+c<n&&(h.state=vp,h.timer.stop(),delete s[c])}if(ap(function(){e.state===pp&&(e.state=dp,e.timer.restart(o,e.delay,e.time),o(r))}),e.state=hp,e.on.call("start",t,t.__data__,e.index,e.group),e.state===hp){for(e.state=pp,u=new Array(l=e.tween.length),c=0,f=-1;c<l;++c)(h=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(u[++f]=h);u.length=f+1}}function o(n){for(var r=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=gp,1),i=-1,o=u.length;++i<o;)u[i].call(null,r);e.state===gp&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){e.state=vp,e.timer.stop(),delete s[n];for(var r in s)return;delete t.__transition}var u,s=t.__transition;s[n]=e,e.timer=mn(r,0,e.time)}function Nn(t,n){var e,r;return function(){var i=Sn(this,t),o=i.tween;if(o!==e){r=e=o;for(var a=0,u=r.length;a<u;++a)if(r[a].name===n){r=r.slice(),r.splice(a,1);break}}i.tween=r}}function Cn(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Sn(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},s=0,c=i.length;s<c;++s)if(i[s].name===n){i[s]=u;break}s===c&&i.push(u)}o.tween=i}}function Rn(t,n,e){var r=t._id;return t.each(function(){var t=Sn(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return Tn(t,r).value[n]}}function Pn(t){return function(){this.removeAttribute(t)}}function On(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ln(t,n,e){var r,i;return function(){var o=this.getAttribute(t);return o===e?null:o===r?i:i=n(r=o,e)}}function Un(t,n,e){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===e?null:o===r?i:i=n(r=o,e)}}function Bn(t,n,e){var r,i,o;return function(){var a,u=e(this);return null==u?void this.removeAttribute(t):(a=this.getAttribute(t),a===u?null:a===r&&u===i?o:o=n(r=a,i=u))}}function zn(t,n,e){var r,i,o;return function(){var a,u=e(this);return null==u?void this.removeAttributeNS(t.space,t.local):(a=this.getAttributeNS(t.space,t.local),a===u?null:a===r&&u===i?o:o=n(r=a,i=u))}}function Dn(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}function In(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e}function qn(t,n){return function(){En(this,t).delay=+n.apply(this,arguments)}}function Yn(t,n){return n=+n,function(){En(this,t).delay=n}}function jn(t,n){return function(){Sn(this,t).duration=+n.apply(this,arguments)}}function Fn(t,n){return n=+n,function(){Sn(this,t).duration=n}}function Hn(t,n){if("function"!=typeof n)throw new Error;return function(){Sn(this,t).ease=n}}function Xn(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}function Wn(t,n,e){var r,i,o=Xn(n)?En:Sn;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}function Vn(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}function $n(t,n){var e,r,i;return function(){var o=X(this,t),a=(this.style.removeProperty(t),X(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}function Zn(t){return function(){this.style.removeProperty(t)}}function Gn(t,n,e){var r,i;return function(){var o=X(this,t);return o===e?null:o===r?i:i=n(r=o,e)}}function Jn(t,n,e){var r,i,o;return function(){var a=X(this,t),u=e(this);return null==u&&(this.style.removeProperty(t),u=X(this,t)),a===u?null:a===r&&u===i?o:o=n(r=a,i=u)}}function Kn(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}function Qn(t){return function(){this.textContent=t}}function te(t){return function(){var n=t(this);this.textContent=null==n?"":n}}function ne(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function ee(t){return yt().transition(t)}function re(){return++Ip}function ie(t){return+t}function oe(t){return t*t}function ae(t){return t*(2-t)}function ue(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function se(t){return t*t*t}function ce(t){return--t*t*t+1}function fe(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}function le(t){return 1-Math.cos(t*Xp)}function he(t){return Math.sin(t*Xp)}function pe(t){return(1-Math.cos(Hp*t))/2}function de(t){return Math.pow(2,10*t-10)}function ge(t){return 1-Math.pow(2,-10*t)}function ve(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function ye(t){return 1-Math.sqrt(1-t*t)}function _e(t){return Math.sqrt(1- --t*t)}function me(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}function xe(t){return 1-be(1-t)}function be(t){return(t=+t)<Wp?nd*t*t:t<$p?nd*(t-=Vp)*t+Zp:t<Jp?nd*(t-=Gp)*t+Kp:nd*(t-=Qp)*t+td}function we(t){return((t*=2)<=1?1-be(1-t):be(t-1)+1)/2}function Me(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return cd.time=vn(),cd;return e}function Ae(){t.event.stopImmediatePropagation()}function Ee(t){return{type:t}}function Se(){return!t.event.button}function Te(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function ke(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Ne(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Ce(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function Re(){return Oe(xd)}function Pe(){return Oe(bd)}function Oe(n){function e(t){var e=t.property("__brush",u).selectAll(".overlay").data([Ee("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Md.overlay).merge(e).each(function(){var t=ke(this).extent;Pl(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),t.selectAll(".selection").data([Ee("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Md.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var i=t.selectAll(".handle").data(n.handles,function(t){return t.type});i.exit().remove(),i.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Md[t.type]}),t.each(r).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",a)}function r(){var t=Pl(this),n=ke(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?n[1][0]-h/2:n[0][0]-h/2}).attr("y",function(t){return"s"===t.type[0]?n[1][1]-h/2:n[0][1]-h/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+h:h}).attr("height",function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+h:h})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function i(t,n){return t.__brush.emitter||new o(t,n)}function o(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function a(){function e(){var t=Gf(A);!B||w||M||(Math.abs(t[0]-D[0])>Math.abs(t[1]-D[1])?M=!0:w=!0),D=t,b=!0,gd(),o()}function o(){var t;switch(m=D[0]-z[0],x=D[1]-z[1],S){case yd:case vd:T&&(m=Math.max(P-l,Math.min(L-g,m)),h=l+m,v=g+m),k&&(x=Math.max(O-p,Math.min(U-y,x)),d=p+x,_=y+x);break;case _d:T<0?(m=Math.max(P-l,Math.min(L-l,m)),h=l+m,v=g):T>0&&(m=Math.max(P-g,Math.min(L-g,m)),h=l,v=g+m),k<0?(x=Math.max(O-p,Math.min(U-p,x)),d=p+x,_=y):k>0&&(x=Math.max(O-y,Math.min(U-y,x)),d=p,_=y+x);break;case md:T&&(h=Math.max(P,Math.min(L,l-m*T)),v=Math.max(P,Math.min(L,g+m*T))),k&&(d=Math.max(O,Math.min(U,p-x*k)),_=Math.max(O,Math.min(U,y+x*k)))}v<h&&(T*=-1,t=l,l=g,g=t,t=h,h=v,v=t,E in Ad&&Y.attr("cursor",Md[E=Ad[E]])),_<d&&(k*=-1,t=p,p=y,y=t,t=d,d=_,_=t,E in Ed&&Y.attr("cursor",Md[E=Ed[E]])),N.selection&&(R=N.selection),w&&(h=R[0][0],v=R[1][0]),M&&(d=R[0][1],_=R[1][1]),R[0][0]===h&&R[0][1]===d&&R[1][0]===v&&R[1][1]===_||(N.selection=[[h,d],[v,_]],r.call(A),I.brush())}function a(){if(Ae(),t.event.touches){if(t.event.touches.length)return;s&&clearTimeout(s),s=setTimeout(function(){s=null},500),q.on("touchmove.brush touchend.brush touchcancel.brush",null)}else mt(t.event.view,b),j.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);q.attr("pointer-events","all"),Y.attr("cursor",Md.overlay),N.selection&&(R=N.selection),Ne(R)&&(N.selection=null,r.call(A)),I.end()}function u(){switch(t.event.keyCode){case 16:B=T&&k;break;case 18:S===_d&&(T&&(g=v-m*T,l=h+m*T),k&&(y=_-x*k,p=d+x*k),S=md,o());break;case 32:S!==_d&&S!==md||(T<0?g=v-m:T>0&&(l=h-m),k<0?y=_-x:k>0&&(p=d-x),S=yd,Y.attr("cursor",Md.selection),o());break;default:return}gd()}function c(){switch(t.event.keyCode){case 16:B&&(w=M=B=!1,o());break;case 18:S===md&&(T<0?g=v:T>0&&(l=h),k<0?y=_:k>0&&(p=d),S=_d,o());break;case 32:S===yd&&(t.event.altKey?(T&&(g=v-m*T,l=h+m*T),k&&(y=_-x*k,p=d+x*k),S=md):(T<0?g=v:T>0&&(l=h),k<0?y=_:k>0&&(p=d),S=_d),Y.attr("cursor",Md[E]),o());break;default:return}gd()}if(t.event.touches){if(t.event.changedTouches.length<t.event.touches.length)return gd()}else if(s)return;if(f.apply(this,arguments)){var l,h,p,d,g,v,y,_,m,x,b,w,M,A=this,E=t.event.target.__data__.type,S="selection"===(t.event.metaKey?E="overlay":E)?vd:t.event.altKey?md:_d,T=n===bd?null:Sd[E],k=n===xd?null:Td[E],N=ke(A),C=N.extent,R=N.selection,P=C[0][0],O=C[0][1],L=C[1][0],U=C[1][1],B=T&&k&&t.event.shiftKey,z=Gf(A),D=z,I=i(A,arguments).beforestart();"overlay"===E?N.selection=R=[[l=n===bd?P:z[0],p=n===xd?O:z[1]],[g=n===bd?L:l,y=n===xd?U:p]]:(l=R[0][0],p=R[0][1],g=R[1][0],y=R[1][1]),h=l,d=p,v=g,_=y;var q=Pl(A).attr("pointer-events","none"),Y=q.selectAll(".overlay").attr("cursor",Md[E]);if(t.event.touches)q.on("touchmove.brush",e,!0).on("touchend.brush touchcancel.brush",a,!0);else{var j=Pl(t.event.view).on("keydown.brush",u,!0).on("keyup.brush",c,!0).on("mousemove.brush",e,!0).on("mouseup.brush",a,!0);zl(t.event.view)}Ae(),_p(A),r.call(A),I.start()}}function u(){var t=this.__brush||{selection:null};return t.extent=c.apply(this,arguments),t.dim=n,t}var s,c=Te,f=Se,l=g(e,"start","brush","end"),h=6;return e.move=function(t,e){t.selection?t.on("start.brush",function(){i(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){i(this,arguments).end()}).tween("brush",function(){function t(t){a.selection=1===t&&Ne(c)?null:f(t),r.call(o),u.brush()}var o=this,a=o.__brush,u=i(o,arguments),s=a.selection,c=n.input("function"==typeof e?e.apply(this,arguments):e,a.extent),f=Uh(s,c);return s&&c?t:t(1)}):t.each(function(){var t=this,o=arguments,a=t.__brush,u=n.input("function"==typeof e?e.apply(t,o):e,a.extent),s=i(t,o).beforestart();_p(t),a.selection=null==u||Ne(u)?null:u,r.call(t),s.start().brush().end()})},o.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){N(new dd(e,t,n.output(this.state.selection)),l.apply,l,[t,this.that,this.args])}},e.extent=function(t){return arguments.length?(c="function"==typeof t?t:pd([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),e):c},e.filter=function(t){return arguments.length?(f="function"==typeof t?t:pd(!!t),e):f},e.handleSize=function(t){return arguments.length?(h=+t,e):h},e.on=function(){var t=l.on.apply(l,arguments);return t===l?e:t},e}function Le(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}function Ue(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Be(){return new Ue}function ze(t){return t.source}function De(t){return t.target}function Ie(t){return t.radius}function qe(t){return t.startAngle}function Ye(t){return t.endAngle}function je(){}function Fe(t,n){var e=new je;if(t instanceof je)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}function He(){return{}}function Xe(t,n,e){t[n]=e}function We(){return Fe()}function Ve(t,n,e){t.set(n,e)}function $e(){}function Ze(t,n){var e=new $e;if(t instanceof $e)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}function Ge(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function Je(t,n){var e=Ge(t);return function(r,i){return n(e(r),i,t)}}function Ke(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}function Qe(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,a,u,s,c,f,l,h,p=t._root,d={data:r},g=t._x0,v=t._y0,y=t._x1,_=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((c=n>=(o=(g+y)/2))?g=o:y=o,(f=e>=(a=(v+_)/2))?v=a:_=a,i=p,!(p=p[l=f<<1|c]))return i[l]=d,t;if(u=+t._x.call(null,p.data),s=+t._y.call(null,p.data),n===u&&e===s)return d.next=p,i?i[l]=d:t._root=d,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(c=n>=(o=(g+y)/2))?g=o:y=o,(f=e>=(a=(v+_)/2))?v=a:_=a}while((l=f<<1|c)==(h=(s>=a)<<1|u>=o));return i[h]=p,i[l]=d,t}function tr(t){var n,e,r,i,o=t.length,a=new Array(o),u=new Array(o),s=1/0,c=1/0,f=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(a[e]=r,u[e]=i,r<s&&(s=r),r>f&&(f=r),i<c&&(c=i),i>l&&(l=i));for(f<s&&(s=this._x0,f=this._x1),l<c&&(c=this._y0,l=this._y1),this.cover(s,c).cover(f,l),e=0;e<o;++e)Qe(this,a[e],u[e],t[e]);return this}function nr(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this}function er(t){return t[0]}function rr(t){return t[1]}function ir(t,n,e){var r=new or(null==n?er:n,null==e?rr:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function or(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function ar(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}function ur(t){return t.x+t.vx}function sr(t){return t.y+t.vy}function cr(t){return t.index}function fr(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}function lr(t){return t.x}function hr(t){return t.y}function pr(t){return new dr(t)}function dr(t){if(!(n=Dg.exec(t)))throw new Error("invalid format: "+t);var n,e=n[1]||" ",r=n[2]||">",i=n[3]||"-",o=n[4]||"",a=!!n[5],u=n[6]&&+n[6],s=!!n[7],c=n[8]&&+n[8].slice(1),f=n[9]||"";"n"===f?(s=!0,f="g"):zg[f]||(f=""),(a||"0"===e&&"="===r)&&(a=!0,e="0",r="="),this.fill=e,this.align=r,this.sign=i,this.symbol=o,this.zero=a,this.width=u,this.comma=s,this.precision=c,this.type=f}function gr(n){return Ig=jg(n),t.format=Ig.format,t.formatPrefix=Ig.formatPrefix,Ig}function vr(){this.reset()}function yr(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}function _r(t){return t>1?0:t<-1?Sv:Math.acos(t)}function mr(t){return t>1?Tv:t<-1?-Tv:Math.asin(t)}function xr(t){return(t=qv(t/2))*t}function br(){}function wr(t,n){t&&Xv.hasOwnProperty(t.type)&&Xv[t.type](t,n)}function Mr(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function Ar(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)Mr(t[e],n,1);n.polygonEnd()}function Er(){Zv.point=Tr}function Sr(){kr(Vg,$g)}function Tr(t,n){Zv.point=kr,Vg=t,$g=n,t*=Rv,n*=Rv,Zg=t,Gg=Uv(n=n/2+kv),Jg=qv(n)}function kr(t,n){t*=Rv,n*=Rv,n=n/2+kv;var e=t-Zg,r=e>=0?1:-1,i=r*e,o=Uv(n),a=qv(n),u=Jg*a,s=Gg*o+u*Uv(i),c=u*r*qv(i);Vv.add(Lv(c,s)),Zg=t,Gg=o,Jg=a}function Nr(t){return[Lv(t[1],t[0]),mr(t[2])]}function Cr(t){var n=t[0],e=t[1],r=Uv(e);return[r*Uv(n),r*qv(n),qv(e)]}function Rr(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Pr(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Or(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Lr(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Ur(t){var n=jv(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}function Br(t,n){av.push(uv=[Kg=t,tv=t]),n<Qg&&(Qg=n),n>nv&&(nv=n)}function zr(t,n){var e=Cr([t*Rv,n*Rv]);if(ov){var r=Pr(ov,e),i=[r[1],-r[0],0],o=Pr(i,r);Ur(o),o=Nr(o);var a,u=t-ev,s=u>0?1:-1,c=o[0]*Cv*s,f=Pv(u)>180;f^(s*ev<c&&c<s*t)?(a=o[1]*Cv)>nv&&(nv=a):(c=(c+360)%360-180,f^(s*ev<c&&c<s*t)?(a=-o[1]*Cv)<Qg&&(Qg=a):(n<Qg&&(Qg=n),n>nv&&(nv=n))),f?t<ev?Fr(Kg,t)>Fr(Kg,tv)&&(tv=t):Fr(t,tv)>Fr(Kg,tv)&&(Kg=t):tv>=Kg?(t<Kg&&(Kg=t),t>tv&&(tv=t)):t>ev?Fr(Kg,t)>Fr(Kg,tv)&&(tv=t):Fr(t,tv)>Fr(Kg,tv)&&(Kg=t)}else av.push(uv=[Kg=t,tv=t]);n<Qg&&(Qg=n),n>nv&&(nv=n),ov=e,ev=t}function Dr(){Kv.point=zr}function Ir(){uv[0]=Kg,uv[1]=tv,Kv.point=Br,ov=null}function qr(t,n){if(ov){var e=t-ev;Jv.add(Pv(e)>180?e+(e>0?360:-360):e)}else rv=t,iv=n;Zv.point(t,n),zr(t,n)}function Yr(){Zv.lineStart()}function jr(){qr(rv,iv),Zv.lineEnd(),Pv(Jv)>Ev&&(Kg=-(tv=180)),uv[0]=Kg,uv[1]=tv,ov=null}function Fr(t,n){return(n-=t)<0?n+360:n}function Hr(t,n){return t[0]-n[0]}function Xr(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}function Wr(t,n){t*=Rv,n*=Rv;var e=Uv(n);Vr(e*Uv(t),e*qv(t),qv(n))}function Vr(t,n,e){++sv,fv+=(t-fv)/sv,lv+=(n-lv)/sv,hv+=(e-hv)/sv}function $r(){ty.point=Zr}function Zr(t,n){t*=Rv,n*=Rv;var e=Uv(n);bv=e*Uv(t),wv=e*qv(t),Mv=qv(n),ty.point=Gr,Vr(bv,wv,Mv)}function Gr(t,n){t*=Rv,n*=Rv;var e=Uv(n),r=e*Uv(t),i=e*qv(t),o=qv(n),a=Lv(jv((a=wv*o-Mv*i)*a+(a=Mv*r-bv*o)*a+(a=bv*i-wv*r)*a),bv*r+wv*i+Mv*o);cv+=a,pv+=a*(bv+(bv=r)),dv+=a*(wv+(wv=i)),gv+=a*(Mv+(Mv=o)),Vr(bv,wv,Mv)}function Jr(){ty.point=Wr}function Kr(){ty.point=ti}function Qr(){ni(mv,xv),ty.point=Wr}function ti(t,n){mv=t,xv=n,t*=Rv,n*=Rv,ty.point=ni;var e=Uv(n);bv=e*Uv(t),wv=e*qv(t),Mv=qv(n),Vr(bv,wv,Mv)}function ni(t,n){t*=Rv,n*=Rv;var e=Uv(n),r=e*Uv(t),i=e*qv(t),o=qv(n),a=wv*o-Mv*i,u=Mv*r-bv*o,s=bv*i-wv*r,c=jv(a*a+u*u+s*s),f=mr(c),l=c&&-f/c;vv+=l*a,yv+=l*u,_v+=l*s,cv+=f,pv+=f*(bv+(bv=r)),dv+=f*(wv+(wv=i)),gv+=f*(Mv+(Mv=o)),Vr(bv,wv,Mv)}function ei(t,n){return[t>Sv?t-Nv:t<-Sv?t+Nv:t,n]}function ri(t,n,e){return(t%=Nv)?n||e?ry(oi(t),ai(n,e)):oi(t):n||e?ai(n,e):ei}function ii(t){return function(n,e){return n+=t,[n>Sv?n-Nv:n<-Sv?n+Nv:n,e]}}function oi(t){var n=ii(t);return n.invert=ii(-t),n}function ai(t,n){function e(t,n){var e=Uv(n),u=Uv(t)*e,s=qv(t)*e,c=qv(n),f=c*r+u*i;return[Lv(s*o-f*a,u*r-c*i),mr(f*o+s*a)]}var r=Uv(t),i=qv(t),o=Uv(n),a=qv(n);return e.invert=function(t,n){var e=Uv(n),u=Uv(t)*e,s=qv(t)*e,c=qv(n),f=c*o-s*a;return[Lv(s*o+c*a,u*r+f*i),mr(f*r-u*i)]},e}function ui(t,n,e,r,i,o){if(e){var a=Uv(n),u=qv(n),s=r*e;null==i?(i=n+r*Nv,o=n-s/2):(i=si(a,i),o=si(a,o),(r>0?i<o:i>o)&&(i+=r*Nv));for(var c,f=i;r>0?f>o:f<o;f-=s)c=Nr([a,-u*Uv(f),-u*qv(f)]),t.point(c[0],c[1])}}function si(t,n){n=Cr(n),n[0]-=t,Ur(n);var e=_r(-n[1]);return((-n[2]<0?-e:e)+Nv-Ev)%Nv}function ci(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function fi(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}function li(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,u,c){var f=0,l=0;if(null==i||(f=a(i,u))!==(l=a(o,u))||s(i,o)<0^u>0)do{c.point(0===f||3===f?t:e,f>1?r:n)}while((f=(f+u+4)%4)!==l);else c.point(o[0],o[1])}function a(r,i){return Pv(r[0]-t)<Ev?i>0?0:3:Pv(r[0]-e)<Ev?i>0?2:1:Pv(r[1]-n)<Ev?i>0?1:0:i>0?3:2}function u(t,n){return s(t.x,n.x)}function s(t,n){var e=a(t,1),r=a(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(a){function s(t,n){i(t,n)&&S.point(t,n)}function c(){for(var n=0,e=0,i=v.length;e<i;++e)for(var o,a,u=v[e],s=1,c=u.length,f=u[0],l=f[0],h=f[1];s<c;++s)o=l,a=h,f=u[s],l=f[0],h=f[1],a<=r?h>r&&(l-o)*(r-a)>(h-a)*(t-o)&&++n:h<=r&&(l-o)*(r-a)<(h-a)*(t-o)&&--n;return n}function f(){S=T,g=[],v=[],E=!0}function l(){var t=c(),n=E&&t,e=(g=bf(g)).length;(n||e)&&(a.polygonStart(),n&&(a.lineStart(),o(null,null,1,a),a.lineEnd()),e&&xy(g,u,t,o,a),a.polygonEnd()),S=a,g=v=y=null}function h(){k.point=d,v&&v.push(y=[]),A=!0,M=!1,b=w=NaN}function p(){g&&(d(_,m),x&&M&&T.rejoin(),g.push(T.result())),k.point=s,M&&S.lineEnd()}function d(o,a){var u=i(o,a);if(v&&y.push([o,a]),A)_=o,m=a,x=u,A=!1,u&&(S.lineStart(),S.point(o,a));else if(u&&M)S.point(o,a);else{var s=[b=Math.max(wy,Math.min(by,b)),w=Math.max(wy,Math.min(by,w))],c=[o=Math.max(wy,Math.min(by,o)),a=Math.max(wy,Math.min(by,a))];_y(s,c,t,n,e,r)?(M||(S.lineStart(),S.point(s[0],s[1])),S.point(c[0],c[1]),u||S.lineEnd(),E=!1):u&&(S.lineStart(),S.point(o,a),E=!1)}b=o,w=a,M=u}var g,v,y,_,m,x,b,w,M,A,E,S=a,T=yy(),k={point:s,lineStart:h,lineEnd:p,polygonStart:f,polygonEnd:l};return k}}function hi(){Ty.point=di,Ty.lineEnd=pi}function pi(){Ty.point=Ty.lineEnd=br}function di(t,n){t*=Rv,n*=Rv,iy=t,oy=qv(n),ay=Uv(n),Ty.point=gi}function gi(t,n){t*=Rv,n*=Rv;var e=qv(n),r=Uv(n),i=Pv(t-iy),o=Uv(i),a=qv(i),u=r*a,s=ay*e-oy*r*o,c=oy*e+ay*r*o;Sy.add(Lv(jv(u*u+s*s),c)),iy=t,oy=e,ay=r}function vi(t,n){return!(!t||!Oy.hasOwnProperty(t.type))&&Oy[t.type](t,n)}function yi(t,n){return 0===Ry(t,n)}function _i(t,n){var e=Ry(t[0],t[1]);return Ry(t[0],n)+Ry(n,t[1])<=e+Ev}function mi(t,n){return!!Ey(t.map(xi),bi(n))}function xi(t){return t=t.map(bi),t.pop(),t}function bi(t){return[t[0]*Rv,t[1]*Rv]}function wi(t,n,e){var r=sf(t,n-Ev,e).concat(n);return function(t){return r.map(function(n){return[t,n]})}}function Mi(t,n,e){var r=sf(t,n-Ev,e).concat(n);return function(t){return r.map(function(n){return[n,t]})}}function Ai(){function t(){return{type:"MultiLineString",coordinates:n()}}function n(){return sf(Bv(o/v)*v,i,v).map(h).concat(sf(Bv(c/y)*y,s,y).map(p)).concat(sf(Bv(r/d)*d,e,d).filter(function(t){return Pv(t%v)>Ev}).map(f)).concat(sf(Bv(u/g)*g,a,g).filter(function(t){return Pv(t%y)>Ev}).map(l))}var e,r,i,o,a,u,s,c,f,l,h,p,d=10,g=d,v=90,y=360,_=2.5;return t.lines=function(){return n().map(function(t){return{type:"LineString",coordinates:t}})},t.outline=function(){return{type:"Polygon",coordinates:[h(o).concat(p(s).slice(1),h(i).reverse().slice(1),p(c).reverse().slice(1))]}},t.extent=function(n){return arguments.length?t.extentMajor(n).extentMinor(n):t.extentMinor()},t.extentMajor=function(n){return arguments.length?(o=+n[0][0],i=+n[1][0],c=+n[0][1],s=+n[1][1],o>i&&(n=o,o=i,i=n),c>s&&(n=c,c=s,s=n),t.precision(_)):[[o,c],[i,s]]},t.extentMinor=function(n){return arguments.length?(r=+n[0][0],e=+n[1][0],u=+n[0][1],a=+n[1][1],r>e&&(n=r,r=e,e=n),u>a&&(n=u,u=a,a=n),t.precision(_)):[[r,u],[e,a]]},t.step=function(n){return arguments.length?t.stepMajor(n).stepMinor(n):t.stepMinor()},t.stepMajor=function(n){return arguments.length?(v=+n[0],y=+n[1],t):[v,y]},t.stepMinor=function(n){return arguments.length?(d=+n[0],g=+n[1],t):[d,g]},t.precision=function(n){return arguments.length?(_=+n,f=wi(u,a,90),l=Mi(r,e,_),h=wi(c,s,90),p=Mi(o,i,_),t):_},t.extentMajor([[-180,-90+Ev],[180,90-Ev]]).extentMinor([[-180,-80-Ev],[180,80+Ev]])}function Ei(){return Ai()()}function Si(){Iy.point=Ti}function Ti(t,n){Iy.point=ki,uy=cy=t,sy=fy=n}function ki(t,n){Dy.add(fy*t-cy*n),cy=t,fy=n}function Ni(){ki(uy,sy)}function Ci(t,n){t<qy&&(qy=t),t>jy&&(jy=t),n<Yy&&(Yy=n),n>Fy&&(Fy=n)}function Ri(t,n){Xy+=t,Wy+=n,++Vy}function Pi(){t_.point=Oi}function Oi(t,n){t_.point=Li,Ri(py=t,dy=n)}function Li(t,n){var e=t-py,r=n-dy,i=jv(e*e+r*r);$y+=i*(py+t)/2,Zy+=i*(dy+n)/2,Gy+=i,Ri(py=t,dy=n)}function Ui(){t_.point=Ri}function Bi(){t_.point=Di}function zi(){Ii(ly,hy)}function Di(t,n){t_.point=Ii,Ri(ly=py=t,hy=dy=n)}function Ii(t,n){var e=t-py,r=n-dy,i=jv(e*e+r*r);$y+=i*(py+t)/2,Zy+=i*(dy+n)/2,Gy+=i,i=dy*t-py*n,Jy+=i*(py+t),Ky+=i*(dy+n),Qy+=3*i,Ri(py=t,dy=n)}function qi(t){this._context=t}function Yi(t,n){u_.point=ji,e_=i_=t,r_=o_=n}function ji(t,n){i_-=t,o_-=n,a_.add(jv(i_*i_+o_*o_)),i_=t,o_=n}function Fi(){this._string=[]}function Hi(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function Xi(t){return t.length>1}function Wi(t,n){return((t=t.x)[0]<0?t[1]-Tv-Ev:Tv-t[1])-((n=n.x)[0]<0?n[1]-Tv-Ev:Tv-n[1])}function Vi(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,a){var u=o>0?Sv:-Sv,s=Pv(o-e);Pv(s-Sv)<Ev?(t.point(e,r=(r+a)/2>0?Tv:-Tv),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(o,r),n=0):i!==u&&s>=Sv&&(Pv(e-i)<Ev&&(e-=i*Ev),Pv(o-u)<Ev&&(o-=u*Ev),r=$i(e,r,o,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),n=0),t.point(e=o,r=a),i=u},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}function $i(t,n,e,r){var i,o,a=qv(t-e);return Pv(a)>Ev?Ov((qv(n)*(o=Uv(r))*qv(e)-qv(r)*(i=Uv(n))*qv(t))/(i*o*a)):(n+r)/2}function Zi(t,n,e,r){var i;if(null==t)i=e*Tv,r.point(-Sv,i),r.point(0,i),r.point(Sv,i),r.point(Sv,0),r.point(Sv,-i),r.point(0,-i),r.point(-Sv,-i),r.point(-Sv,0),r.point(-Sv,i);else if(Pv(t[0]-n[0])>Ev){var o=t[0]<n[0]?Sv:-Sv;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}function Gi(t){return function(n){var e=new Ji;for(var r in t)e[r]=t[r];return e.stream=n,e}}function Ji(){}function Ki(t,n,e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=t.clipExtent&&t.clipExtent();t.scale(150).translate([0,0]),null!=o&&t.clipExtent(null),Wv(e,t.stream(Hy));var a=Hy.result(),u=Math.min(r/(a[1][0]-a[0][0]),i/(a[1][1]-a[0][1])),s=+n[0][0]+(r-u*(a[1][0]+a[0][0]))/2,c=+n[0][1]+(i-u*(a[1][1]+a[0][1]))/2;return null!=o&&t.clipExtent(o),t.scale(150*u).translate([s,c])}function Qi(t,n,e){return Ki(t,[[0,0],n],e)}function to(t){return Gi({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}function no(t,n){function e(r,i,o,a,u,s,c,f,l,h,p,d,g,v){var y=c-r,_=f-i,m=y*y+_*_;if(m>4*n&&g--){var x=a+h,b=u+p,w=s+d,M=jv(x*x+b*b+w*w),A=mr(w/=M),E=Pv(Pv(w)-1)<Ev||Pv(o-l)<Ev?(o+l)/2:Lv(b,x),S=t(E,A),T=S[0],k=S[1],N=T-r,C=k-i,R=_*N-y*C;(R*R/m>n||Pv((y*N+_*C)/m-.5)>.3||a*h+u*p+s*d<d_)&&(e(r,i,o,a,u,s,T,k,E,x/=M,b/=M,w,g,v),v.point(T,k),e(T,k,E,x,b,w,c,f,l,h,p,d,g,v))}}return function(n){function r(e,r){e=t(e,r),n.point(e[0],e[1])}function i(){y=NaN,w.point=o,n.lineStart()}function o(r,i){var o=Cr([r,i]),a=t(r,i);e(y,_,v,m,x,b,y=a[0],_=a[1],v=r,m=o[0],x=o[1],b=o[2],p_,n),n.point(y,_)}function a(){w.point=r,n.lineEnd()}function u(){i(),w.point=s,w.lineEnd=c}function s(t,n){o(f=t,n),l=y,h=_,p=m,d=x,g=b,w.point=o}function c(){e(y,_,v,m,x,b,l,h,f,p,d,g,p_,n),w.lineEnd=a,a()}var f,l,h,p,d,g,v,y,_,m,x,b,w={point:r,lineStart:i,lineEnd:a,polygonStart:function(){n.polygonStart(),w.lineStart=u},polygonEnd:function(){n.polygonEnd(),w.lineStart=i}};return w}}function eo(t){return ro(function(){return t})()}function ro(t){function n(t){return t=f(t[0]*Rv,t[1]*Rv),[t[0]*v+u,s-t[1]*v]}function e(t){return(t=f.invert((t[0]-u)/v,(s-t[1])/v))&&[t[0]*Cv,t[1]*Cv]}function r(t,n){return t=a(t,n),[t[0]*v+u,s-t[1]*v]}function i(){f=ry(c=ri(b,w,M),a);var t=a(m,x);return u=y-t[0]*v,s=_+t[1]*v,o()}function o(){return d=g=null,n}var a,u,s,c,f,l,h,p,d,g,v=150,y=480,_=250,m=0,x=0,b=0,w=0,M=0,A=null,E=f_,S=null,T=By,k=.5,N=g_(r,k);return n.stream=function(t){return d&&g===t?d:d=v_(E(c,N(T(g=t))))},n.clipAngle=function(t){return arguments.length?(E=+t?l_(A=t*Rv,6*Rv):(A=null,f_),o()):A*Cv},n.clipExtent=function(t){return arguments.length?(T=null==t?(S=l=h=p=null,By):li(S=+t[0][0],l=+t[0][1],h=+t[1][0],p=+t[1][1]),o()):null==S?null:[[S,l],[h,p]]},n.scale=function(t){return arguments.length?(v=+t,i()):v},n.translate=function(t){return arguments.length?(y=+t[0],_=+t[1],i()):[y,_]},n.center=function(t){return arguments.length?(m=t[0]%360*Rv,x=t[1]%360*Rv,i()):[m*Cv,x*Cv]},n.rotate=function(t){return arguments.length?(b=t[0]%360*Rv,w=t[1]%360*Rv,M=t.length>2?t[2]%360*Rv:0,i()):[b*Cv,w*Cv,M*Cv]},n.precision=function(t){return arguments.length?(N=g_(r,k=t*t),o()):jv(k)},n.fitExtent=function(t,e){return Ki(n,t,e)},n.fitSize=function(t,e){return Qi(n,t,e)},function(){return a=t.apply(this,arguments),n.invert=a.invert&&e,i()}}function io(t){var n=0,e=Sv/3,r=ro(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*Rv,e=t[1]*Rv):[n*Cv,e*Cv]},i}function oo(t){function n(t,n){return[t*e,qv(n)/e]}var e=Uv(t);return n.invert=function(t,n){return[t/e,mr(n*e)]},n}function ao(t,n){function e(t,n){var e=jv(o-2*i*qv(n))/i;return[e*qv(t*=i),a-e*Uv(t)]}var r=qv(t),i=(r+qv(n))/2;if(Pv(i)<Ev)return oo(t);var o=1+r*(2*i-r),a=jv(o)/i;return e.invert=function(t,n){var e=a-n;return[Lv(t,Pv(e))/i*Yv(e),mr((o-(t*t+e*e)*i*i)/(2*i))]},e}function uo(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}function so(t){return function(n,e){var r=Uv(n),i=Uv(e),o=t(r*i);return[o*i*qv(n),o*qv(e)]}}function co(t){return function(n,e){var r=jv(n*n+e*e),i=t(r),o=qv(i),a=Uv(i);return[Lv(n*o,r*a),mr(r&&e*o/r)]}}function fo(t,n){return[t,Dv(Fv((Tv+n)/2))]}function lo(t){function n(){var n=Sv*u(),a=o(gy(o.rotate()).invert([0,0]));return c(null==f?[[a[0]-n,a[1]-n],[a[0]+n,a[1]+n]]:t===fo?[[Math.max(a[0]-n,f),e],[Math.min(a[0]+n,r),i]]:[[f,Math.max(a[1]-n,e)],[r,Math.min(a[1]+n,i)]])}var e,r,i,o=eo(t),a=o.center,u=o.scale,s=o.translate,c=o.clipExtent,f=null;return o.scale=function(t){return arguments.length?(u(t),n()):u()},o.translate=function(t){return arguments.length?(s(t),n()):s()},o.center=function(t){return arguments.length?(a(t),n()):a()},o.clipExtent=function(t){return arguments.length?(null==t?f=e=r=i=null:(f=+t[0][0],e=+t[0][1],r=+t[1][0],i=+t[1][1]),n()):null==f?null:[[f,e],[r,i]]},n()}function ho(t){return Fv((Tv+t)/2)}function po(t,n){function e(t,n){o>0?n<-Tv+Ev&&(n=-Tv+Ev):n>Tv-Ev&&(n=Tv-Ev);var e=o/Iv(ho(n),i);return[e*qv(i*t),o-e*Uv(i*t)]}var r=Uv(t),i=t===n?qv(t):Dv(r/Uv(n))/Dv(ho(n)/ho(t)),o=r*Iv(ho(t),i)/i;return i?(e.invert=function(t,n){var e=o-n,r=Yv(i)*jv(t*t+e*e);return[Lv(t,Pv(e))/i*Yv(e),2*Ov(Iv(o/r,1/i))-Tv]},e):fo}function go(t,n){return[t,n]}function vo(t,n){function e(t,n){var e=o-n,r=i*t;return[e*qv(r),o-e*Uv(r)]}var r=Uv(t),i=t===n?qv(t):(r-Uv(n))/(n-t),o=r/i+t;return Pv(i)<Ev?go:(e.invert=function(t,n){var e=o-n;return[Lv(t,Pv(e))/i*Yv(e),o-Yv(i)*jv(t*t+e*e)]},e)}function yo(t,n){var e=Uv(n),r=Uv(t)*e;return[e*qv(t)/r,qv(n)/r]}function _o(t,n,e,r){return 1===t&&1===n&&0===e&&0===r?By:Gi({point:function(i,o){this.stream.point(i*t+e,o*n+r)}})}function mo(t,n){return[Uv(n)*qv(t),qv(n)]}function xo(t,n){var e=Uv(n),r=1+Uv(t)*e;return[e*qv(t)/r,qv(n)/r]}function bo(t,n){return[Dv(Fv((Tv+n)/2)),-t]}function wo(t,n){return t.parent===n.parent?1:2}function Mo(t){return t.reduce(Ao,0)/t.length}function Ao(t,n){return t+n.x}function Eo(t){return 1+t.reduce(So,0)}function So(t,n){return Math.max(t,n.y)}function To(t){for(var n;n=t.children;)t=n[0];return t}function ko(t){for(var n;n=t.children;)t=n[n.length-1];return t}function No(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function Co(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}function Ro(t,n){var e,r,i,o,a,u=new Bo(t),s=+t.value&&(u.value=t.value),c=[u];for(null==n&&(n=Oo);e=c.pop();)if(s&&(e.value=+e.data.value),(i=n(e.data))&&(a=i.length))for(e.children=new Array(a),o=a-1;o>=0;--o)c.push(r=e.children[o]=new Bo(i[o])),r.parent=e,r.depth=e.depth+1;return u.eachBefore(Uo)}function Po(){return Ro(this).eachBefore(Lo)}function Oo(t){return t.children}function Lo(t){t.data=t.data.data}function Uo(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Bo(t){this.data=t,this.depth=this.height=0,this.parent=null}function zo(t){this._=t,this.next=null}function Do(t,n){var e=n.x-t.x,r=n.y-t.y,i=t.r-n.r;return i*i+1e-6>e*e+r*r}function Io(t,n){var e,r,i,o=null,a=t.head;switch(n.length){case 1:e=qo(n[0]);break;case 2:e=Yo(n[0],n[1]);break;case 3:e=jo(n[0],n[1],n[2])}for(;a;)i=a._,r=a.next,e&&Do(e,i)?o=a:(o?(t.tail=o,o.next=null):t.head=t.tail=null,n.push(i),e=Io(t,n),n.pop(),t.head?(a.next=t.head,t.head=a):(a.next=null,t.head=t.tail=a),o=t.tail,o.next=r),a=r;return t.tail=o,e}function qo(t){return{x:t.x,y:t.y,r:t.r}}function Yo(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,a=n.y,u=n.r,s=o-e,c=a-r,f=u-i,l=Math.sqrt(s*s+c*c);return{x:(e+o+s/l*f)/2,y:(r+a+c/l*f)/2,r:(l+i+u)/2}}function jo(t,n,e){var r=t.x,i=t.y,o=t.r,a=n.x,u=n.y,s=n.r,c=e.x,f=e.y,l=e.r,h=2*(r-a),p=2*(i-u),d=2*(s-o),g=r*r+i*i-o*o-a*a-u*u+s*s,v=2*(r-c),y=2*(i-f),_=2*(l-o),m=r*r+i*i-o*o-c*c-f*f+l*l,x=v*p-h*y,b=(p*m-y*g)/x-r,w=(y*d-p*_)/x,M=(v*g-h*m)/x-i,A=(h*_-v*d)/x,E=w*w+A*A-1,S=2*(b*w+M*A+o),T=b*b+M*M-o*o,k=(-S-Math.sqrt(S*S-4*E*T))/(2*E);return{x:b+w*k+r,y:M+A*k+i,r:k}}function Fo(t,n,e){var r=t.x,i=t.y,o=n.r+e.r,a=t.r+e.r,u=n.x-r,s=n.y-i,c=u*u+s*s;if(c){var f=.5+((a*=a)-(o*=o))/(2*c),l=Math.sqrt(Math.max(0,2*o*(a+c)-(a-=c)*a-o*o))/(2*c);e.x=r+f*u+l*s,e.y=i+f*s-l*u}else e.x=r+a,e.y=i}function Ho(t,n){var e=n.x-t.x,r=n.y-t.y,i=t.r+n.r;return i*i-1e-6>e*e+r*r}function Xo(t,n,e){var r=t._,i=t.next._,o=r.r+i.r,a=(r.x*i.r+i.x*r.r)/o-n,u=(r.y*i.r+i.y*r.r)/o-e;return a*a+u*u}function Wo(t){this._=t,this.next=null,this.previous=null}function Vo(t){if(!(i=t.length))return 0;var n,e,r,i;if(n=t[0],n.x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;Fo(e,n,r=t[2]);var o,a,u,s,c,f,l,h=n.r*n.r,p=e.r*e.r,d=r.r*r.r,g=h+p+d,v=h*n.x+p*e.x+d*r.x,y=h*n.y+p*e.y+d*r.y;n=new Wo(n),e=new Wo(e),r=new Wo(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(u=3;u<i;++u){Fo(n._,e._,r=t[u]),r=new Wo(r),s=e.next,c=n.previous,f=e._.r,l=n._.r;do{if(f<=l){if(Ho(s._,r._)){e=s,n.next=e,e.previous=n,--u;continue t}f+=s._.r,s=s.next}else{if(Ho(c._,r._)){n=c,n.next=e,e.previous=n,--u;continue t}l+=c._.r,c=c.previous}}while(s!==c.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,g+=d=r._.r*r._.r,v+=d*r._.x,y+=d*r._.y,h=Xo(n,o=v/g,a=y/g);(r=r.next)!==e;)(d=Xo(r,o,a))<h&&(n=r,h=d);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=W_(n),u=0;u<i;++u)n=t[u],n.x-=r.x,n.y-=r.y;return r.r}function $o(t){return null==t?null:Zo(t)}function Zo(t){if("function"!=typeof t)throw new Error;return t}function Go(){return 0}function Jo(t){return Math.sqrt(t.value)}function Ko(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function Qo(t,n){return function(e){if(r=e.children){var r,i,o,a=r.length,u=t(e)*n||0;if(u)for(i=0;i<a;++i)r[i].r+=u;if(o=Vo(r),u)for(i=0;i<a;++i)r[i].r-=u;e.r=o+u}}}function ta(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}function na(t){return t.id}function ea(t){return t.parentId}function ra(t,n){return t.parent===n.parent?1:2}function ia(t){var n=t.children;return n?n[0]:t.t}function oa(t){var n=t.children;return n?n[n.length-1]:t.t}function aa(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function ua(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)n=i[o],n.z+=e,n.m+=e,e+=n.s+(r+=n.c)}function sa(t,n,e){return t.a.parent===n.parent?t.a:e}function ca(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function fa(t){for(var n,e,r,i,o,a=new ca(t,0),u=[a];n=u.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)u.push(e=n.children[i]=new ca(r[i],i)),e.parent=n;return(a.parent=new ca(null,0)).children=[a],a}function la(t,n,e,r,i,o){for(var a,u,s,c,f,l,h,p,d,g,v,y=[],_=n.children,m=0,x=0,b=_.length,w=n.value;m<b;){s=i-e,c=o-r;do{f=_[x++].value}while(!f&&x<b);for(l=h=f,g=Math.max(c/s,s/c)/(w*t),v=f*f*g,d=Math.max(h/v,v/l);x<b;++x){if(f+=u=_[x].value,u<l&&(l=u),u>h&&(h=u),v=f*f*g,(p=Math.max(h/v,v/l))>d){f-=u;break}d=p}y.push(a={value:f,dice:s<c,children:_.slice(m,x)}),a.dice?J_(a,e,r,i,w?r+=c*f/w:o):im(a,e,r,w?e+=s*f/w:i,o),w-=f,m=x}return y}function ha(t,n){return t[0]-n[0]||t[1]-n[1]}function pa(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;++i){for(;r>1&&pm(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function da(t){this._size=t,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function ga(t){if(!t._start)try{va(t)}catch(n){if(t._tasks[t._ended+t._active-1])_a(t,n);else if(!t._data)throw n}}function va(t){for(;t._start=t._waiting&&t._active<t._size;){var n=t._ended+t._active,e=t._tasks[n],r=e.length-1,i=e[r];e[r]=ya(t,n),--t._waiting,++t._active,e=i.apply(null,e),t._tasks[n]&&(t._tasks[n]=e||_m)}}function ya(t,n){return function(e,r){t._tasks[n]&&(--t._active,++t._ended,t._tasks[n]=null,null==t._error&&(null!=e?_a(t,e):(t._data[n]=r,t._waiting?ga(t):ma(t))))}}function _a(t,n){var e,r=t._tasks.length;for(t._error=n,t._data=void 0,t._waiting=NaN;--r>=0;)if((e=t._tasks[r])&&(t._tasks[r]=null,e.abort))try{e.abort()}catch(n){}t._active=NaN,ma(t)}function ma(t){if(!t._active&&t._call){var n=t._data;t._data=void 0,t._call(t._error,n)}}function xa(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("invalid concurrency");return new da(t)}function ba(t){return function(n,e){t(null==n?e:null)}}function wa(t){var n=t.responseType;return n&&"text"!==n?t.response:t.responseText}function Ma(t,n){return function(e){return t(e.responseText,n)}}function Aa(t){function n(n){var o=n+"",a=e.get(o);if(!a){if(i!==Dm)return i;e.set(o,a=r.push(n))}return t[(a-1)%t.length]}var e=Fe(),r=[],i=Dm;return t=null==t?[]:zm.call(t),n.domain=function(t){if(!arguments.length)return r.slice();r=[],e=Fe();for(var i,o,a=-1,u=t.length;++a<u;)e.has(o=(i=t[a])+"")||e.set(o,r.push(i));return n},n.range=function(e){return arguments.length?(t=zm.call(e),n):t.slice()},n.unknown=function(t){return arguments.length?(i=t,n):i},n.copy=function(){return Aa().domain(r).range(t).unknown(i)},n}function Ea(){function t(){var t=i().length,r=a[1]<a[0],l=a[r-0],h=a[1-r];n=(h-l)/Math.max(1,t-s+2*c),u&&(n=Math.floor(n)),l+=(h-l-n*(t-s))*f,e=n*(1-s),u&&(l=Math.round(l),e=Math.round(e));var p=sf(t).map(function(t){return l+n*t});return o(r?p.reverse():p)}var n,e,r=Aa().unknown(void 0),i=r.domain,o=r.range,a=[0,1],u=!1,s=0,c=0,f=.5;return delete r.unknown,r.domain=function(n){return arguments.length?(i(n),t()):i()},r.range=function(n){return arguments.length?(a=[+n[0],+n[1]],t()):a.slice()},r.rangeRound=function(n){return a=[+n[0],+n[1]],u=!0,t()},r.bandwidth=function(){return e},r.step=function(){return n},r.round=function(n){return arguments.length?(u=!!n,t()):u},r.padding=function(n){return arguments.length?(s=c=Math.max(0,Math.min(1,n)),t()):s},r.paddingInner=function(n){return arguments.length?(s=Math.max(0,Math.min(1,n)),t()):s},r.paddingOuter=function(n){return arguments.length?(c=Math.max(0,Math.min(1,n)),t()):c},r.align=function(n){return arguments.length?(f=Math.max(0,Math.min(1,n)),t()):f},r.copy=function(){return Ea().domain(i()).range(a).round(u).paddingInner(s).paddingOuter(c).align(f)},t()}function Sa(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return Sa(n())},t}function Ta(){return Sa(Ea().paddingInner(1))}function ka(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:Im(n)}function Na(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}function Ca(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}function Ra(t,n,e,r){var i=t[0],o=t[1],a=n[0],u=n[1];return o<i?(i=e(o,i),a=r(u,a)):(i=e(i,o),a=r(a,u)),function(t){return a(i(t))}}function Pa(t,n,e,r){var i=Math.min(t.length,n.length)-1,o=new Array(i),a=new Array(i),u=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<i;)o[u]=e(t[u],t[u+1]),a[u]=r(n[u],n[u+1]);return function(n){var e=Vc(t,n,1,i)-1;return a[e](o[e](n))}}function Oa(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function La(t,n){function e(){return i=Math.min(u.length,s.length)>2?Pa:Ra,o=a=null,r}function r(n){return(o||(o=i(u,s,f?Na(t):t,c)))(+n)}var i,o,a,u=Ym,s=Ym,c=Uh,f=!1;return r.invert=function(t){return(a||(a=i(s,u,ka,f?Ca(n):n)))(+t)},r.domain=function(t){return arguments.length?(u=Bm.call(t,qm),e()):u.slice()},r.range=function(t){return arguments.length?(s=zm.call(t),e()):s.slice()},r.rangeRound=function(t){return s=zm.call(t),c=Bh,e()},r.clamp=function(t){return arguments.length?(f=!!t,e()):f},r.interpolate=function(t){return arguments.length?(c=t,e()):c},e()}function Ua(t){var n=t.domain;return t.ticks=function(t){var e=n();return hf(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return jm(n(),t,e)},t.nice=function(e){null==e&&(e=10);var i,o=n(),a=0,u=o.length-1,s=o[a],c=o[u];return c<s&&(i=s,s=c,c=i,i=a,a=u,u=i),i=r(s,c,e),i>0?(s=Math.floor(s/i)*i,c=Math.ceil(c/i)*i,i=r(s,c,e)):i<0&&(s=Math.ceil(s*i)/i,c=Math.floor(c*i)/i,i=r(s,c,e)),i>0?(o[a]=Math.floor(s/i)*i,o[u]=Math.ceil(c/i)*i,n(o)):i<0&&(o[a]=Math.ceil(s*i)/i,o[u]=Math.floor(c*i)/i,n(o)),t},t}function Ba(){var t=La(ka,Ch);return t.copy=function(){return Oa(t,Ba())},Ua(t)}function za(){function t(t){return+t}var n=[0,1];return t.invert=t,t.domain=t.range=function(e){return arguments.length?(n=Bm.call(e,qm),t):n.slice()},t.copy=function(){return za().domain(n)},Ua(t)}function Da(t,n){return(n=Math.log(n/t))?function(e){return Math.log(e/t)/n}:Im(n)}function Ia(t,n){return t<0?function(e){return-Math.pow(-n,e)*Math.pow(-t,1-e)}:function(e){return Math.pow(n,e)*Math.pow(t,1-e)}}function qa(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Ya(t){return 10===t?qa:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}function ja(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}function Fa(t){return function(n){return-t(-n)}}function Ha(){function n(){return o=ja(i),a=Ya(i),r()[0]<0&&(o=Fa(o),a=Fa(a)),e}var e=La(Da,Ia).domain([1,10]),r=e.domain,i=10,o=ja(10),a=Ya(10);return e.base=function(t){return arguments.length?(i=+t,n()):i},e.domain=function(t){return arguments.length?(r(t),n()):r()},e.ticks=function(t){var n,e=r(),u=e[0],s=e[e.length-1];(n=s<u)&&(h=u,u=s,s=h);var c,f,l,h=o(u),p=o(s),d=null==t?10:+t,g=[];if(!(i%1)&&p-h<d){if(h=Math.round(h)-1,p=Math.round(p)+1,u>0){for(;h<p;++h)for(f=1,c=a(h);f<i;++f)if(!((l=c*f)<u)){if(l>s)break;g.push(l)}}else for(;h<p;++h)for(f=i-1,c=a(h);f>=1;--f)if(!((l=c*f)<u)){if(l>s)break;g.push(l)}}else g=hf(h,p,Math.min(p-h,d)).map(a);return n?g.reverse():g},e.tickFormat=function(n,r){if(null==r&&(r=10===i?".0e":","),"function"!=typeof r&&(r=t.format(r)),n===1/0)return r;null==n&&(n=10);var u=Math.max(1,i*n/e.ticks().length);return function(t){var n=t/a(Math.round(o(t)));return n*i<i-.5&&(n*=i),n<=u?r(t):""}},e.nice=function(){return r(Fm(r(),{floor:function(t){return a(Math.floor(o(t)))},ceil:function(t){return a(Math.ceil(o(t)))}}))},e.copy=function(){return Oa(e,Ha().base(i))},e}function Xa(t,n){return t<0?-Math.pow(-t,n):Math.pow(t,n)}function Wa(){function t(t,n){return(n=Xa(n,e)-(t=Xa(t,e)))?function(r){return(Xa(r,e)-t)/n}:Im(n)}function n(t,n){return n=Xa(n,e)-(t=Xa(t,e)),function(r){return Xa(t+n*r,1/e)}}var e=1,r=La(t,n),i=r.domain;return r.exponent=function(t){return arguments.length?(e=+t,i(i())):e},r.copy=function(){return Oa(r,Wa().exponent(e))},Ua(r)}function Va(){return Wa().exponent(.5)}function $a(){function t(){var t=0,o=Math.max(1,r.length);for(i=new Array(o-1);++t<o;)i[t-1]=gf(e,t/o);return n}function n(t){if(!isNaN(t=+t))return r[Vc(i,t)]}var e=[],r=[],i=[];return n.invertExtent=function(t){var n=r.indexOf(t);return n<0?[NaN,NaN]:[n>0?i[n-1]:e[0],n<i.length?i[n]:e[e.length-1]]},n.domain=function(n){if(!arguments.length)return e.slice();e=[];for(var r,i=0,o=n.length;i<o;++i)null==(r=n[i])||isNaN(r=+r)||e.push(r);return e.sort(Hc),t()},n.range=function(n){return arguments.length?(r=zm.call(n),t()):r.slice()},n.quantiles=function(){return i.slice()},n.copy=function(){return $a().domain(e).range(r)},n}function Za(){function t(t){if(t<=t)return a[Vc(o,t,0,i)]}function n(){var n=-1;for(o=new Array(i);++n<i;)o[n]=((n+1)*r-(n-i)*e)/(i+1);return t}var e=0,r=1,i=1,o=[.5],a=[0,1];return t.domain=function(t){return arguments.length?(e=+t[0],r=+t[1],n()):[e,r]},t.range=function(t){return arguments.length?(i=(a=zm.call(t)).length-1,n()):a.slice()},t.invertExtent=function(t){var n=a.indexOf(t);return n<0?[NaN,NaN]:n<1?[e,o[0]]:n>=i?[o[i-1],r]:[o[n-1],o[n]]},t.copy=function(){return Za().domain([e,r]).range(a)},Ua(t)}function Ga(){function t(t){if(t<=t)return e[Vc(n,t,0,r)]}var n=[.5],e=[0,1],r=1;return t.domain=function(i){return arguments.length?(n=zm.call(i),r=Math.min(n.length,e.length-1),t):n.slice()},t.range=function(i){return arguments.length?(e=zm.call(i),r=Math.min(n.length,e.length-1),t):e.slice()},t.invertExtent=function(t){var r=e.indexOf(t);return[n[r-1],n[r]]},t.copy=function(){return Ga().domain(n).range(e)},t}function Ja(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;do{a.push(new Date(+e))}while(n(e,o),t(e),e<r);return a},i.filter=function(e){return Ja(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return Hm.setTime(+n),Xm.setTime(+r),t(Hm),t(Xm),Math.floor(e(Hm,Xm))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}function Ka(t){return Ja(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*$m)/Zm})}function Qa(t){return Ja(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/Zm})}function tu(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function nu(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function eu(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function ru(t){function n(t,n){return function(e){var r,i,o,a=[],u=-1,s=0,c=t.length;for(e instanceof Date||(e=new Date(+e));++u<c;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=Vx[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),s=u+1);return a.push(t.slice(s,u)),a.join("")}}function e(t,n){return function(e){var i=eu(1900);if(r(i,t,e+="",0)!=e.length)return null;if("p"in i&&(i.H=i.H%12+12*i.p),"W"in i||"U"in i){"w"in i||(i.w="W"in i?1:0);var o="Z"in i?nu(eu(i.y)).getUTCDay():n(eu(i.y)).getDay();i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(o+5)%7:i.w+7*i.U-(o+6)%7}return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,nu(i)):n(i)}}function r(t,n,e,r){for(var i,o,a=0,u=n.length,s=e.length;a<u;){if(r>=s)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=j[i in Vx?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}function i(t,n,e){var r=C.exec(n.slice(e));return r?(t.p=R[r[0].toLowerCase()],e+r[0].length):-1}function o(t,n,e){var r=L.exec(n.slice(e));return r?(t.w=U[r[0].toLowerCase()],e+r[0].length):-1}function a(t,n,e){var r=P.exec(n.slice(e));return r?(t.w=O[r[0].toLowerCase()],e+r[0].length):-1}function u(t,n,e){var r=D.exec(n.slice(e));return r?(t.m=I[r[0].toLowerCase()],e+r[0].length):-1}function s(t,n,e){var r=B.exec(n.slice(e));return r?(t.m=z[r[0].toLowerCase()],e+r[0].length):-1}function c(t,n,e){return r(t,w,n,e)}function f(t,n,e){return r(t,M,n,e)}function l(t,n,e){return r(t,A,n,e)}function h(t){return T[t.getDay()]}function p(t){return S[t.getDay()]}function d(t){return N[t.getMonth()]}function g(t){return k[t.getMonth()]}function v(t){return E[+(t.getHours()>=12)]}function y(t){return T[t.getUTCDay()]}function _(t){return S[t.getUTCDay()]}function m(t){return N[t.getUTCMonth()]}function x(t){return k[t.getUTCMonth()]}function b(t){return E[+(t.getUTCHours()>=12)]}var w=t.dateTime,M=t.date,A=t.time,E=t.periods,S=t.days,T=t.shortDays,k=t.months,N=t.shortMonths,C=au(E),R=uu(E),P=au(S),O=uu(S),L=au(T),U=uu(T),B=au(k),z=uu(k),D=au(N),I=uu(N),q={a:h,A:p,b:d,B:g,c:null,d:wu,e:wu,H:Mu,I:Au,j:Eu,L:Su,m:Tu,M:ku,p:v,S:Nu,U:Cu,w:Ru,W:Pu,x:null,X:null,y:Ou,Y:Lu,Z:Uu,"%":Gu},Y={a:y,A:_,b:m,B:x,c:null,d:Bu,e:Bu,H:zu,I:Du,j:Iu,L:qu,m:Yu,M:ju,p:b,S:Fu,U:Hu,w:Xu,W:Wu,x:null,X:null,y:Vu,Y:$u,Z:Zu,"%":Gu},j={a:o,A:a,b:u,B:s,c:c,d:gu,e:gu,H:yu,I:yu,j:vu,L:xu,m:du,M:_u,p:i,S:mu,U:cu,w:su,W:fu,x:f,X:l,y:hu,Y:lu,Z:pu,"%":bu};return q.x=n(M,q),q.X=n(A,q),q.c=n(w,q),Y.x=n(M,Y),Y.X=n(A,Y),Y.c=n(w,Y),{format:function(t){var e=n(t+="",q);return e.toString=function(){return t},e},parse:function(t){var n=e(t+="",tu);return n.toString=function(){return t},n},utcFormat:function(t){var e=n(t+="",Y);return e.toString=function(){return t},e},utcParse:function(t){var n=e(t,nu);return n.toString=function(){return t},n}}}function iu(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function ou(t){return t.replace(Gx,"\\$&")}function au(t){return new RegExp("^(?:"+t.map(ou).join("|")+")","i")}function uu(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function su(t,n,e){var r=$x.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function cu(t,n,e){var r=$x.exec(n.slice(e));return r?(t.U=+r[0],e+r[0].length):-1}function fu(t,n,e){var r=$x.exec(n.slice(e));return r?(t.W=+r[0],e+r[0].length):-1}function lu(t,n,e){var r=$x.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function hu(t,n,e){var r=$x.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function pu(t,n,e){var r=/^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function du(t,n,e){var r=$x.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function gu(t,n,e){var r=$x.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function vu(t,n,e){var r=$x.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function yu(t,n,e){var r=$x.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function _u(t,n,e){var r=$x.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function mu(t,n,e){var r=$x.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function xu(t,n,e){var r=$x.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function bu(t,n,e){var r=Zx.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function wu(t,n){return iu(t.getDate(),n,2)}function Mu(t,n){return iu(t.getHours(),n,2)}function Au(t,n){return iu(t.getHours()%12||12,n,2)}function Eu(t,n){return iu(1+ex.count(xx(t),t),n,3)}function Su(t,n){return iu(t.getMilliseconds(),n,3)}function Tu(t,n){return iu(t.getMonth()+1,n,2)}function ku(t,n){return iu(t.getMinutes(),n,2)}function Nu(t,n){return iu(t.getSeconds(),n,2)}function Cu(t,n){return iu(ix.count(xx(t),t),n,2)}function Ru(t){return t.getDay()}function Pu(t,n){return iu(ox.count(xx(t),t),n,2)}function Ou(t,n){return iu(t.getFullYear()%100,n,2)}function Lu(t,n){return iu(t.getFullYear()%1e4,n,4)}function Uu(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+iu(n/60|0,"0",2)+iu(n%60,"0",2)}function Bu(t,n){return iu(t.getUTCDate(),n,2)}function zu(t,n){return iu(t.getUTCHours(),n,2)}function Du(t,n){return iu(t.getUTCHours()%12||12,n,2)}function Iu(t,n){return iu(1+Sx.count(Hx(t),t),n,3)}function qu(t,n){return iu(t.getUTCMilliseconds(),n,3)}function Yu(t,n){return iu(t.getUTCMonth()+1,n,2)}function ju(t,n){return iu(t.getUTCMinutes(),n,2)}function Fu(t,n){return iu(t.getUTCSeconds(),n,2)}function Hu(t,n){return iu(kx.count(Hx(t),t),n,2)}function Xu(t){return t.getUTCDay()}function Wu(t,n){return iu(Nx.count(Hx(t),t),n,2)}function Vu(t,n){return iu(t.getUTCFullYear()%100,n,2)}function $u(t,n){return iu(t.getUTCFullYear()%1e4,n,4)}function Zu(){return"+0000"}function Gu(){return"%"}function Ju(n){return Xx=ru(n),t.timeFormat=Xx.format,t.timeParse=Xx.parse,t.utcFormat=Xx.utcFormat,t.utcParse=Xx.utcParse,Xx}function Ku(t){return t.toISOString()}function Qu(t){var n=new Date(t);return isNaN(n)?null:n}function ts(t){return new Date(t)}function ns(t){return t instanceof Date?+t:+new Date(+t)}function es(t,n,e,r,o,a,u,s,c){function f(i){return(u(i)<i?g:a(i)<i?v:o(i)<i?y:r(i)<i?_:n(i)<i?e(i)<i?m:x:t(i)<i?b:w)(i)}function l(n,e,r,o){if(null==n&&(n=10),"number"==typeof n){var a=Math.abs(r-e)/n,u=Xc(function(t){return t[2]}).right(M,a);u===M.length?(o=i(e/ob,r/ob,n),n=t):u?(u=M[a/M[u-1][2]<M[u][2]/a?u-1:u],o=u[1],n=u[0]):(o=i(e,r,n),n=s)}return null==o?n:n.every(o)}var h=La(ka,Ch),p=h.invert,d=h.domain,g=c(".%L"),v=c(":%S"),y=c("%I:%M"),_=c("%I %p"),m=c("%a %d"),x=c("%b %d"),b=c("%B"),w=c("%Y"),M=[[u,1,Qx],[u,5,5*Qx],[u,15,15*Qx],[u,30,30*Qx],[a,1,tb],[a,5,5*tb],[a,15,15*tb],[a,30,30*tb],[o,1,nb],[o,3,3*nb],[o,6,6*nb],[o,12,12*nb],[r,1,eb],[r,2,2*eb],[e,1,rb],[n,1,ib],[n,3,3*ib],[t,1,ob]];return h.invert=function(t){return new Date(p(t))},h.domain=function(t){return arguments.length?d(Bm.call(t,ns)):d().map(ts)},h.ticks=function(t,n){var e,r=d(),i=r[0],o=r[r.length-1],a=o<i;return a&&(e=i,i=o,o=e),e=l(t,i,o,n),e=e?e.range(i,o+1):[],a?e.reverse():e},h.tickFormat=function(t,n){return null==n?f:c(n)},h.nice=function(t,n){var e=d();return(t=l(t,e[0],e[e.length-1],n))?d(Fm(e,t)):h},h.copy=function(){return Oa(h,es(t,n,e,r,o,a,u,s,c))},h}function rs(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}function is(t){function n(n){var o=(n-e)/(r-e);return t(i?Math.max(0,Math.min(1,o)):o)}var e=0,r=1,i=!1;return n.domain=function(t){return arguments.length?(e=+t[0],r=+t[1],n):[e,r]},n.clamp=function(t){return arguments.length?(i=!!t,n):i},n.interpolator=function(e){return arguments.length?(t=e,n):t},n.copy=function(){return is(t).domain([e,r]).clamp(i)},Ua(n)}function os(t){return t>1?0:t<-1?Rb:Math.acos(t)}function as(t){return t>=1?Pb:t<=-1?-Pb:Math.asin(t)}function us(t){return t.innerRadius}function ss(t){return t.outerRadius}function cs(t){return t.startAngle}function fs(t){return t.endAngle}function ls(t){return t&&t.padAngle}function hs(t,n,e,r,i,o,a,u){var s=e-t,c=r-n,f=a-i,l=u-o,h=(f*(n-o)-l*(t-i))/(l*s-f*c);return[t+h*s,n+h*c]}function ps(t,n,e,r,i,o,a){var u=t-e,s=n-r,c=(a?o:-o)/Nb(u*u+s*s),f=c*s,l=-c*u,h=t+f,p=n+l,d=e+f,g=r+l,v=(h+d)/2,y=(p+g)/2,_=d-h,m=g-p,x=_*_+m*m,b=i-o,w=h*g-d*p,M=(m<0?-1:1)*Nb(Sb(0,b*b*x-w*w)),A=(w*m-_*M)/x,E=(-w*_-m*M)/x,S=(w*m+_*M)/x,T=(-w*_+m*M)/x,k=A-v,N=E-y,C=S-v,R=T-y;return k*k+N*N>C*C+R*R&&(A=S,E=T),{cx:A,cy:E,x01:-f,y01:-l,x11:A*(i/b-1),y11:E*(i/b-1)}}function ds(t){this._context=t}function gs(t){return t[0]}function vs(t){return t[1]}function ys(t){this._curve=t}function _s(t){function n(n){return new ys(t(n))}return n._curve=t,n}function ms(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(_s(t)):n()._curve},t}function xs(t){return t.source}function bs(t){return t.target}function ws(t){function n(){var n,u=Hb.call(arguments),s=e.apply(this,u),c=r.apply(this,u);if(a||(a=n=Be()),t(a,+i.apply(this,(u[0]=s,u)),+o.apply(this,u),+i.apply(this,(u[0]=c,u)),+o.apply(this,u)),n)return a=null,n+""||null}var e=xs,r=bs,i=gs,o=vs,a=null;return n.source=function(t){return arguments.length?(e=t,n):e},n.target=function(t){return arguments.length?(r=t,n):r},n.x=function(t){return arguments.length?(i="function"==typeof t?t:wb(+t),n):i},n.y=function(t){return arguments.length?(o="function"==typeof t?t:wb(+t),n):o},n.context=function(t){return arguments.length?(a=null==t?null:t,n):a},n}function Ms(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function As(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function Es(t,n,e,r,i){var o=Xb(n,e),a=Xb(n,e=(e+i)/2),u=Xb(r,e),s=Xb(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(a[0],a[1],u[0],u[1],s[0],s[1])}function Ss(){return ws(Ms)}function Ts(){return ws(As)}function ks(){var t=ws(Es);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}function Ns(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Cs(t){this._context=t}function Rs(t){this._context=t}function Ps(t){this._context=t}function Os(t,n){this._basis=new Cs(t),this._beta=n}function Ls(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Us(t,n){this._context=t,this._k=(1-n)/6}function Bs(t,n){this._context=t,this._k=(1-n)/6}function zs(t,n){this._context=t,this._k=(1-n)/6}function Ds(t,n,e){var r=t._x1,i=t._y1,o=t._x2,a=t._y2;if(t._l01_a>Cb){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,s=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/s,i=(i*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/s}if(t._l23_a>Cb){var c=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,f=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*c+t._x1*t._l23_2a-n*t._l12_2a)/f,a=(a*c+t._y1*t._l23_2a-e*t._l12_2a)/f}t._context.bezierCurveTo(r,i,o,a,t._x2,t._y2)}function Is(t,n){this._context=t,this._alpha=n}function qs(t,n){this._context=t,this._alpha=n}function Ys(t,n){this._context=t,this._alpha=n}function js(t){this._context=t}function Fs(t){return t<0?-1:1}function Hs(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(e-t._y1)/(i||r<0&&-0),u=(o*i+a*r)/(r+i);return(Fs(o)+Fs(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function Xs(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Ws(t,n,e){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,u=(o-r)/3;t._context.bezierCurveTo(r+u,i+u*n,o-u,a-u*e,o,a)}function Vs(t){this._context=t}function $s(t){this._context=new Zs(t)}function Zs(t){this._context=t}function Gs(t){return new Vs(t)}function Js(t){return new $s(t)}function Ks(t){this._context=t}function Qs(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,a[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,a[n]-=e*a[n-1];for(i[r-1]=a[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(a[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}function tc(t,n){this._context=t,this._t=n}function nc(t){return new tc(t,0)}function ec(t){return new tc(t,1)}function rc(t,n){return t[n]}function ic(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}function oc(t){return t[0]}function ac(t){return t[1]}function uc(){this._=null}function sc(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function cc(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function fc(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function lc(t){for(;t.L;)t=t.L;return t}function hc(t,n,e,r){var i=[null,null],o=Yw.push(i)-1;return i.left=t,i.right=n,e&&dc(i,t,n,e),r&&dc(i,n,t,r),Iw[t.index].halfedges.push(o),Iw[n.index].halfedges.push(o),i}function pc(t,n,e){var r=[n,e];return r.left=t,r}function dc(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function gc(t,n,e,r,i){var o,a=t[0],u=t[1],s=a[0],c=a[1],f=u[0],l=u[1],h=0,p=1,d=f-s,g=l-c;if(o=n-s,d||!(o>0)){if(o/=d,d<0){if(o<h)return;o<p&&(p=o)}else if(d>0){if(o>p)return;o>h&&(h=o)}if(o=r-s,d||!(o<0)){if(o/=d,d<0){if(o>p)return;o>h&&(h=o)}else if(d>0){if(o<h)return;o<p&&(p=o)}if(o=e-c,g||!(o>0)){if(o/=g,g<0){if(o<h)return;o<p&&(p=o)}else if(g>0){if(o>p)return;o>h&&(h=o)}if(o=i-c,g||!(o<0)){if(o/=g,g<0){if(o>p)return;o>h&&(h=o)}else if(g>0){if(o<h)return;o<p&&(p=o)}return!(h>0||p<1)||(h>0&&(t[0]=[s+h*d,c+h*g]),p<1&&(t[1]=[s+p*d,c+p*g]),!0)}}}}}function vc(t,n,e,r,i){var o=t[1];if(o)return!0;var a,u,s=t[0],c=t.left,f=t.right,l=c[0],h=c[1],p=f[0],d=f[1],g=(l+p)/2,v=(h+d)/2;if(d===h){if(g<n||g>=r)return;if(l>p){if(s){if(s[1]>=i)return}else s=[g,e];o=[g,i]}else{if(s){if(s[1]<e)return}else s=[g,i];o=[g,e]}}else if(a=(l-p)/(d-h),u=v-a*g,a<-1||a>1)if(l>p){if(s){if(s[1]>=i)return}else s=[(e-u)/a,e];o=[(i-u)/a,i]}else{if(s){if(s[1]<e)return}else s=[(i-u)/a,i];o=[(e-u)/a,e]}else if(h<d){if(s){if(s[0]>=r)return}else s=[n,a*n+u];o=[r,a*r+u]}else{if(s){if(s[0]<n)return}else s=[r,a*r+u];o=[n,a*n+u]}return t[0]=s,t[1]=o,!0}function yc(t,n,e,r){for(var i,o=Yw.length;o--;)vc(i=Yw[o],t,n,e,r)&&gc(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Hw||Math.abs(i[0][1]-i[1][1])>Hw)||delete Yw[o]}function _c(t){return Iw[t.index]={site:t,halfedges:[]}}function mc(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function xc(t,n){return n[+(n.left!==t.site)]}function bc(t,n){return n[+(n.left===t.site)]}function wc(){for(var t,n,e,r,i=0,o=Iw.length;i<o;++i)if((t=Iw[i])&&(r=(n=t.halfedges).length)){var a=new Array(r),u=new Array(r);for(e=0;e<r;++e)a[e]=e,u[e]=mc(t,Yw[n[e]]);for(a.sort(function(t,n){return u[n]-u[t]}),e=0;e<r;++e)u[e]=n[a[e]];for(e=0;e<r;++e)n[e]=u[e]}}function Mc(t,n,e,r){var i,o,a,u,s,c,f,l,h,p,d,g,v=Iw.length,y=!0;for(i=0;i<v;++i)if(o=Iw[i]){for(a=o.site,s=o.halfedges,u=s.length;u--;)Yw[s[u]]||s.splice(u,1);for(u=0,c=s.length;u<c;)p=bc(o,Yw[s[u]]),d=p[0],g=p[1],f=xc(o,Yw[s[++u%c]]),l=f[0],h=f[1],(Math.abs(d-l)>Hw||Math.abs(g-h)>Hw)&&(s.splice(u,0,Yw.push(pc(a,p,Math.abs(d-t)<Hw&&r-g>Hw?[t,Math.abs(l-t)<Hw?h:r]:Math.abs(g-r)<Hw&&e-d>Hw?[Math.abs(h-r)<Hw?l:e,r]:Math.abs(d-e)<Hw&&g-n>Hw?[e,Math.abs(l-e)<Hw?h:n]:Math.abs(g-n)<Hw&&d-t>Hw?[Math.abs(h-n)<Hw?l:t,n]:null))-1),++c);c&&(y=!1)}if(y){var _,m,x,b=1/0;for(i=0,y=null;i<v;++i)(o=Iw[i])&&(a=o.site,_=a[0]-t,m=a[1]-n,(x=_*_+m*m)<b&&(b=x,y=o));if(y){var w=[t,n],M=[t,r],A=[e,r],E=[e,n];y.halfedges.push(Yw.push(pc(a=y.site,w,M))-1,Yw.push(pc(a,M,A))-1,Yw.push(pc(a,A,E))-1,Yw.push(pc(a,E,w))-1)}}for(i=0;i<v;++i)(o=Iw[i])&&(o.halfedges.length||delete Iw[i])}function Ac(){sc(this),this.x=this.y=this.arc=this.site=this.cy=null}function Ec(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var a=i[0],u=i[1],s=r[0]-a,c=r[1]-u,f=o[0]-a,l=o[1]-u,h=2*(s*l-c*f);if(!(h>=-Xw)){var p=s*s+c*c,d=f*f+l*l,g=(l*p-c*d)/h,v=(s*d-f*p)/h,y=jw.pop()||new Ac;y.arc=t,y.site=i,y.x=g+a,y.y=(y.cy=v+u)+Math.sqrt(g*g+v*v),t.circle=y;for(var _=null,m=qw._;m;)if(y.y<m.y||y.y===m.y&&y.x<=m.x){if(!m.L){_=m.P;break}m=m.L}else{if(!m.R){_=m;break}m=m.R}qw.insert(_,y),_||(zw=y)}}}}function Sc(t){var n=t.circle;n&&(n.P||(zw=n.N),qw.remove(n),jw.push(n),sc(n),t.circle=null)}function Tc(){sc(this),this.edge=this.site=this.circle=null}function kc(t){var n=Fw.pop()||new Tc;return n.site=t,n}function Nc(t){Sc(t),Dw.remove(t),Fw.push(t),sc(t)}function Cc(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,a=t.N,u=[t];Nc(t);for(var s=o;s.circle&&Math.abs(e-s.circle.x)<Hw&&Math.abs(r-s.circle.cy)<Hw;)o=s.P,u.unshift(s),Nc(s),s=o;u.unshift(s),Sc(s);for(var c=a;c.circle&&Math.abs(e-c.circle.x)<Hw&&Math.abs(r-c.circle.cy)<Hw;)a=c.N,u.push(c),Nc(c),c=a;u.push(c),Sc(c);var f,l=u.length;for(f=1;f<l;++f)c=u[f],s=u[f-1],dc(c.edge,s.site,c.site,i);s=u[0],c=u[l-1],c.edge=hc(s.site,c.site,null,i),Ec(s),Ec(c)}function Rc(t){for(var n,e,r,i,o=t[0],a=t[1],u=Dw._;u;)if((r=Pc(u,a)-o)>Hw)u=u.L;else{if(!((i=o-Oc(u,a))>Hw)){r>-Hw?(n=u.P,e=u):i>-Hw?(n=u,e=u.N):n=e=u;break}if(!u.R){n=u;break}u=u.R}_c(t);var s=kc(t);if(Dw.insert(n,s),n||e){if(n===e)return Sc(n),e=kc(n.site),Dw.insert(s,e),s.edge=e.edge=hc(n.site,s.site),Ec(n),void Ec(e);if(!e)return void(s.edge=hc(n.site,s.site));Sc(n),Sc(e);var c=n.site,f=c[0],l=c[1],h=t[0]-f,p=t[1]-l,d=e.site,g=d[0]-f,v=d[1]-l,y=2*(h*v-p*g),_=h*h+p*p,m=g*g+v*v,x=[(v*_-p*m)/y+f,(h*m-g*_)/y+l];dc(e.edge,c,d,x),s.edge=hc(c,t,null,x),e.edge=hc(t,d,null,x),Ec(n),Ec(e)}}function Pc(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var a=t.P;if(!a)return-1/0;e=a.site;var u=e[0],s=e[1],c=s-n;if(!c)return u;var f=u-r,l=1/o-1/c,h=f/c;return l?(-h+Math.sqrt(h*h-2*l*(f*f/(-2*c)-s+c/2+i-o/2)))/l+r:(r+u)/2}function Oc(t,n){var e=t.N;if(e)return Pc(e,n);var r=t.site;return r[1]===n?r[0]:1/0}function Lc(t,n,e){return(t[0]-e[0])*(n[1]-t[1])-(t[0]-n[0])*(e[1]-t[1])}function Uc(t,n){return n[1]-t[1]||n[0]-t[0]}function Bc(t,n){var e,r,i,o=t.sort(Uc).pop();for(Yw=[],Iw=new Array(t.length),Dw=new uc,qw=new uc;;)if(i=zw,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(Rc(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;Cc(i.arc)}if(wc(),n){var a=+n[0][0],u=+n[0][1],s=+n[1][0],c=+n[1][1];yc(a,u,s,c),Mc(a,u,s,c)}this.edges=Yw,this.cells=Iw,Dw=qw=Yw=Iw=null}function zc(t,n,e){this.target=t,this.type=n,this.transform=e}function Dc(t,n,e){this.k=t,this.x=n,this.y=e}function Ic(t){return t.__zoom||$w}function qc(){t.event.stopImmediatePropagation()}function Yc(){return!t.event.button}function jc(){var t,n,e=this;return e instanceof SVGElement?(e=e.ownerSVGElement||e,t=e.width.baseVal.value,n=e.height.baseVal.value):(t=e.clientWidth,n=e.clientHeight),[[0,0],[t,n]]}function Fc(){return this.__zoom||$w}var Hc=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},Xc=function(t){return 1===t.length&&(t=n(t)),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}},Wc=Xc(Hc),Vc=Wc.right,$c=Wc.left,Zc=function(t,n){null==n&&(n=e);for(var r=0,i=t.length-1,o=t[0],a=new Array(i<0?0:i);r<i;)a[r]=n(o,o=t[++r]);return a},Gc=function(t,n,r){var i,o,a,u,s=t.length,c=n.length,f=new Array(s*c);for(null==r&&(r=e),i=a=0;i<s;++i)for(u=t[i],o=0;o<c;++o,++a)f[a]=r(u,n[o]);return f},Jc=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},Kc=function(t){return null===t?NaN:+t},Qc=function(t,n){var e,r,i=t.length,o=0,a=-1,u=0,s=0;if(null==n)for(;++a<i;)isNaN(e=Kc(t[a]))||(r=e-u,u+=r/++o,s+=r*(e-u));else for(;++a<i;)isNaN(e=Kc(n(t[a],a,t)))||(r=e-u,u+=r/++o,s+=r*(e-u));if(o>1)return s/(o-1)},tf=function(t,n){var e=Qc(t,n);return e?Math.sqrt(e):e},nf=function(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e>=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},ef=Array.prototype,rf=ef.slice,of=ef.map,af=function(t){return function(){return t}},uf=function(t){return t},sf=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o},cf=Math.sqrt(50),ff=Math.sqrt(10),lf=Math.sqrt(2),hf=function(t,n,e){var i,o,a,u=n<t,s=-1;if(u&&(i=t,t=n,n=i),0===(a=r(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++s<i;)o[s]=(t-s)/a;return u&&o.reverse(),o},pf=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},df=function(){function t(t){var o,a,u=t.length,s=new Array(u);for(o=0;o<u;++o)s[o]=n(t[o],o,t);var c=e(s),f=c[0],l=c[1],h=r(s,f,l);Array.isArray(h)||(h=i(f,l,h),h=sf(Math.ceil(f/h)*h,Math.floor(l/h)*h,h));for(var p=h.length;h[0]<=f;)h.shift(),--p;for(;h[p-1]>l;)h.pop(),--p;var d,g=new Array(p+1);for(o=0;o<=p;++o)d=g[o]=[],d.x0=o>0?h[o-1]:f,d.x1=o<p?h[o]:l;for(o=0;o<u;++o)a=s[o],f<=a&&a<=l&&g[Vc(h,a,0,p)].push(t[o]);return g}var n=uf,e=nf,r=pf;return t.value=function(e){return arguments.length?(n="function"==typeof e?e:af(e),t):n},t.domain=function(n){return arguments.length?(e="function"==typeof n?n:af([n[0],n[1]]),t):e},t.thresholds=function(n){return arguments.length?(r="function"==typeof n?n:af(Array.isArray(n)?rf.call(n):n),t):r},t},gf=function(t,n,e){if(null==e&&(e=Kc),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(i-o)}},vf=function(t,n,e){return t=of.call(t,Kc).sort(Hc),Math.ceil((e-n)/(2*(gf(t,.75)-gf(t,.25))*Math.pow(t.length,-1/3)))},yf=function(t,n,e){return Math.ceil((e-n)/(3.5*tf(t)*Math.pow(t.length,-1/3)))},_f=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r},mf=function(t,n){var e,r=t.length,i=r,o=-1,a=0;if(null==n)for(;++o<r;)isNaN(e=Kc(t[o]))?--i:a+=e;else for(;++o<r;)isNaN(e=Kc(n(t[o],o,t)))?--i:a+=e;if(i)return a/i},xf=function(t,n){var e,r=t.length,i=-1,o=[];if(null==n)for(;++i<r;)isNaN(e=Kc(t[i]))||o.push(e);else for(;++i<r;)isNaN(e=Kc(n(t[i],i,t)))||o.push(e);return gf(o.sort(Hc),.5)},bf=function(t){for(var n,e,r,i=t.length,o=-1,a=0;++o<i;)a+=t[o].length;for(e=new Array(a);--i>=0;)for(r=t[i],n=r.length;--n>=0;)e[--a]=r[n];return e},wf=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r},Mf=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r},Af=function(t,n){if(e=t.length){var e,r,i=0,o=0,a=t[o];for(null==n&&(n=Hc);++i<e;)(n(r=t[i],a)<0||0!==n(a,a))&&(a=r,o=i);return 0===n(a,a)?o:void 0}},Ef=function(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t},Sf=function(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o},Tf=function(t){if(!(i=t.length))return[];for(var n=-1,e=wf(t,o),r=new Array(e);++n<e;)for(var i,a=-1,u=r[n]=new Array(i);++a<i;)u[a]=t[a][n];return r},kf=function(){return Tf(arguments)},Nf=Array.prototype.slice,Cf=function(t){return t},Rf=1,Pf=2,Of=3,Lf=4,Uf=1e-6,Bf={value:function(){}};v.prototype=g.prototype={constructor:v,on:function(t,n){var e,r=this._,i=y(t+"",r),o=-1,a=i.length;{if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=m(r[e],t.name,n);else if(null==n)for(e in r)r[e]=m(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=_(r[e],t.name)))return e}},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new v(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(r=this._[t],o=0,e=r.length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var zf="http://www.w3.org/1999/xhtml",Df={svg:"http://www.w3.org/2000/svg",xhtml:zf,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},If=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),Df.hasOwnProperty(n)?{space:Df[n],local:t}:t},qf=function(t){var n=If(t);return(n.local?b:x)(n)},Yf=0;M.prototype=w.prototype={constructor:M,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var jf=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var Ff=document.documentElement;if(!Ff.matches){var Hf=Ff.webkitMatchesSelector||Ff.msMatchesSelector||Ff.mozMatchesSelector||Ff.oMatchesSelector;jf=function(t){return function(){return Hf.call(this,t)}}}}var Xf=jf,Wf={};if(t.event=null,"undefined"!=typeof document){"onmouseenter"in document.documentElement||(Wf={mouseenter:"mouseover",mouseleave:"mouseout"})}var Vf=function(t,n,e){var r,i,o=S(t+""),a=o.length;{if(!(arguments.length<2)){for(u=n?k:T,null==e&&(e=!1),r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var s,c=0,f=u.length;c<f;++c)for(r=0,s=u[c];r<a;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value}},$f=function(){for(var n,e=t.event;n=e.sourceEvent;)e=n;return e},Zf=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,r=r.matrixTransform(t.getScreenCTM().inverse()),[r.x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},Gf=function(t){var n=$f();return n.changedTouches&&(n=n.changedTouches[0]),Zf(t,n)},Jf=function(t){return null==t?C:function(){return this.querySelector(t)}},Kf=function(t){"function"!=typeof t&&(t=Jf(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],s=u.length,c=r[i]=new Array(s),f=0;f<s;++f)(o=u[f])&&(a=t.call(o,o.__data__,f,u))&&("__data__"in o&&(a.__data__=o.__data__),c[f]=a);return new vt(r,this._parents)},Qf=function(t){return null==t?R:function(){return this.querySelectorAll(t)}},tl=function(t){"function"!=typeof t&&(t=Qf(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],s=u.length,c=0;c<s;++c)(a=u[c])&&(r.push(t.call(a,a.__data__,c,u)),i.push(a));return new vt(r,i)},nl=function(t){"function"!=typeof t&&(t=Xf(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],c=0;c<u;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&s.push(o);return new vt(r,this._parents)},el=function(t){return new Array(t.length)},rl=function(){return new vt(this._enter||this._groups.map(el),this._parents)};P.prototype={constructor:P,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var il=function(t){return function(){return t}},ol="$",al=function(t,n){if(!t)return p=new Array(this.size()),c=-1,this.each(function(t){p[++c]=t}),p;var e=n?L:O,r=this._parents,i=this._groups;"function"!=typeof t&&(t=il(t));for(var o=i.length,a=new Array(o),u=new Array(o),s=new Array(o),c=0;c<o;++c){var f=r[c],l=i[c],h=l.length,p=t.call(f,f&&f.__data__,c,r),d=p.length,g=u[c]=new Array(d),v=a[c]=new Array(d);e(f,l,g,v,s[c]=new Array(h),p,n);for(var y,_,m=0,x=0;m<d;++m)if(y=g[m]){for(m>=x&&(x=m+1);!(_=v[x])&&++x<d;);y._next=_||null}}return a=new vt(a,r),a._enter=u,a._exit=s,a},ul=function(){return new vt(this._exit||this._groups.map(el),this._parents)},sl=function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,c=n[u],f=e[u],l=c.length,h=a[u]=new Array(l),p=0;p<l;++p)(s=c[p]||f[p])&&(h[p]=s);for(;u<r;++u)a[u]=n[u];return new vt(a,this._parents)},cl=function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},fl=function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=U);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],s=u.length,c=i[o]=new Array(s),f=0;f<s;++f)(a=u[f])&&(c[f]=a);c.sort(n)}return new vt(i,this._parents).order()},ll=function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},hl=function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},pl=function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},dl=function(){var t=0;return this.each(function(){++t}),t},gl=function(){return!this.node()},vl=function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},yl=function(t,n){var e=If(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?z:B:"function"==typeof n?e.local?Y:q:e.local?I:D)(e,n))},_l=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView},ml=function(t,n,e){return arguments.length>1?this.each((null==n?j:"function"==typeof n?H:F)(t,n,null==e?"":e)):X(this.node(),t)},xl=function(t,n){return arguments.length>1?this.each((null==n?W:"function"==typeof n?$:V)(t,n)):this.node()[t]};J.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var bl=function(t,n){var e=Z(t+"");if(arguments.length<2){for(var r=G(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?et:n?tt:nt)(e,n))},wl=function(t){return arguments.length?this.each(null==t?rt:("function"==typeof t?ot:it)(t)):this.node().textContent},Ml=function(t){return arguments.length?this.each(null==t?at:("function"==typeof t?st:ut)(t)):this.node().innerHTML},Al=function(){return this.each(ct)},El=function(){return this.each(ft)},Sl=function(t){var n="function"==typeof t?t:qf(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},Tl=function(t,n){var e="function"==typeof t?t:qf(t),r=null==n?lt:"function"==typeof n?n:Jf(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},kl=function(){return this.each(ht)},Nl=function(t){return arguments.length?this.property("__data__",t):this.node().__data__},Cl=function(t,n){return this.each(("function"==typeof n?gt:dt)(t,n))},Rl=[null];vt.prototype=yt.prototype={constructor:vt,select:Kf,selectAll:tl,filter:nl,data:al,enter:rl,exit:ul,merge:sl,order:cl,sort:fl,call:ll,nodes:hl,node:pl,size:dl,empty:gl,each:vl,attr:yl,style:ml,property:xl,classed:bl,text:wl,html:Ml,raise:Al,lower:El,append:Sl,insert:Tl,remove:kl,datum:Nl,on:Vf,dispatch:Cl};var Pl=function(t){return"string"==typeof t?new vt([[document.querySelector(t)]],[document.documentElement]):new vt([[t]],Rl)},Ol=function(t){return"string"==typeof t?new vt([document.querySelectorAll(t)],[document.documentElement]):new vt([null==t?[]:t],Rl)},Ll=function(t,n,e){arguments.length<3&&(e=n,n=$f().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return Zf(t,r);return null},Ul=function(t,n){null==n&&(n=$f().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=Zf(t,n[e]);return i},Bl=function(){t.event.preventDefault(),t.event.stopImmediatePropagation()},zl=function(t){var n=t.document.documentElement,e=Pl(t).on("dragstart.drag",Bl,!0);"onselectstart"in n?e.on("selectstart.drag",Bl,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")},Dl=function(t){return function(){return t}};xt.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Il=function(){function n(t){t.on("mousedown.drag",e).on("touchstart.drag",o).on("touchmove.drag",a).on("touchend.drag touchcancel.drag",u).style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function e(){if(!h&&p.apply(this,arguments)){var n=s("mouse",d.apply(this,arguments),Gf,this,arguments);n&&(Pl(t.event.view).on("mousemove.drag",r,!0).on("mouseup.drag",i,!0),zl(t.event.view),_t(),l=!1,c=t.event.clientX,f=t.event.clientY,n("start"))}}function r(){if(Bl(),!l){var n=t.event.clientX-c,e=t.event.clientY-f;l=n*n+e*e>x}y.mouse("drag")}function i(){Pl(t.event.view).on("mousemove.drag mouseup.drag",null),mt(t.event.view,l),Bl(),y.mouse("end")}function o(){if(p.apply(this,arguments)){var n,e,r=t.event.changedTouches,i=d.apply(this,arguments),o=r.length;for(n=0;n<o;++n)(e=s(r[n].identifier,i,Ll,this,arguments))&&(_t(),e("start"))}}function a(){var n,e,r=t.event.changedTouches,i=r.length;for(n=0;n<i;++n)(e=y[r[n].identifier])&&(Bl(),e("drag"))}function u(){var n,e,r=t.event.changedTouches,i=r.length;for(h&&clearTimeout(h),h=setTimeout(function(){h=null},500),n=0;n<i;++n)(e=y[r[n].identifier])&&(_t(),e("end"))}function s(e,r,i,o,a){var u,s,c,f=i(r,e),l=_.copy();if(N(new xt(n,"beforestart",u,e,m,f[0],f[1],0,0,l),function(){return null!=(t.event.subject=u=v.apply(o,a))&&(s=u.x-f[0]||0,c=u.y-f[1]||0,!0)}))return function t(h){var p,d=f;switch(h){case"start":y[e]=t,p=m++;break;case"end":delete y[e],--m;case"drag":f=i(r,e),p=m}N(new xt(n,h,u,e,p,f[0]+s,f[1]+c,f[0]-d[0],f[1]-d[1],l),l.apply,l,[h,o,a])}}var c,f,l,h,p=bt,d=wt,v=Mt,y={},_=g("start","drag","end"),m=0,x=0;return n.filter=function(t){return arguments.length?(p="function"==typeof t?t:Dl(!!t),n):p},n.container=function(t){return arguments.length?(d="function"==typeof t?t:Dl(t),n):d},n.subject=function(t){return arguments.length?(v="function"==typeof t?t:Dl(t),n):v},n.on=function(){var t=_.on.apply(_,arguments);return t===_?n:t},n.clickDistance=function(t){return arguments.length?(x=(t=+t)*t,n):Math.sqrt(x)},n},ql=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t},Yl="\\s*([+-]?\\d+)\\s*",jl="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Fl="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Hl=/^#([0-9a-f]{3})$/,Xl=/^#([0-9a-f]{6})$/,Wl=new RegExp("^rgb\\("+[Yl,Yl,Yl]+"\\)$"),Vl=new RegExp("^rgb\\("+[Fl,Fl,Fl]+"\\)$"),$l=new RegExp("^rgba\\("+[Yl,Yl,Yl,jl]+"\\)$"),Zl=new RegExp("^rgba\\("+[Fl,Fl,Fl,jl]+"\\)$"),Gl=new RegExp("^hsl\\("+[jl,Fl,Fl]+"\\)$"),Jl=new RegExp("^hsla\\("+[jl,Fl,Fl,jl]+"\\)$"),Kl={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};ql(Et,St,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),ql(Rt,Ct,At(Et,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Rt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Rt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return t=isNaN(t)?1:Math.max(0,Math.min(1,t)),(1===t?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),ql(Ut,Lt,At(Et,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ut(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ut(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Rt(Bt(t>=240?t-240:t+120,i,r),Bt(t,i,r),Bt(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Ql=Math.PI/180,th=180/Math.PI,nh=.95047,eh=1,rh=1.08883,ih=4/29,oh=6/29,ah=3*oh*oh,uh=oh*oh*oh;ql(It,Dt,At(Et,{brighter:function(t){return new It(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new It(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return t=eh*Yt(t),n=nh*Yt(n),e=rh*Yt(e),new Rt(jt(3.2404542*n-1.5371385*t-.4985314*e),jt(-.969266*n+1.8760108*t+.041556*e),jt(.0556434*n-.2040259*t+1.0572252*e),this.opacity)}})),ql(Wt,Xt,At(Et,{brighter:function(t){return new Wt(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Wt(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return zt(this).rgb()}}));var sh=-.14861,ch=1.78277,fh=-.29227,lh=-.90649,hh=1.97294,ph=hh*lh,dh=hh*ch,gh=ch*fh-lh*sh;ql(Zt,$t,At(Et,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Zt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Zt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Ql,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Rt(255*(n+e*(sh*r+ch*i)),255*(n+e*(fh*r+lh*i)),255*(n+e*(hh*r)),this.opacity)}}));var vh,yh,_h,mh,xh,bh,wh=function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return Gt((e-r/n)*n,a,i,o,u)}},Mh=function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return Gt((e-r/n)*n,i,o,a,u)}},Ah=function(t){return function(){return t}},Eh=function t(n){function e(t,n){var e=r((t=Ct(t)).r,(n=Ct(n)).r),i=r(t.g,n.g),o=r(t.b,n.b),a=nn(t.opacity,n.opacity);return function(n){return t.r=e(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}var r=tn(n);return e.gamma=t,e}(1),Sh=en(wh),Th=en(Mh),kh=function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(r),a=new Array(r);for(e=0;e<i;++e)o[e]=Uh(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}},Nh=function(t,n){var e=new Date;return t=+t,n-=t,function(r){return e.setTime(t+n*r),e}},Ch=function(t,n){return t=+t,n-=t,function(e){return t+n*e}},Rh=function(t,n){var e,r={},i={};null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={});for(e in n)e in t?r[e]=Uh(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},Ph=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Oh=new RegExp(Ph.source,"g"),Lh=function(t,n){var e,r,i,o=Ph.lastIndex=Oh.lastIndex=0,a=-1,u=[],s=[];for(t+="",n+="";(e=Ph.exec(t))&&(r=Oh.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:Ch(e,r)})),o=Oh.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?on(s[0].x):rn(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})},Uh=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?Ah(n):("number"===r?Ch:"string"===r?(e=St(n))?(n=e,Eh):Lh:n instanceof St?Eh:n instanceof Date?Nh:Array.isArray(n)?kh:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Rh:Ch)(t,n)},Bh=function(t,n){return t=+t,n-=t,function(e){return Math.round(t+n*e)}},zh=180/Math.PI,Dh={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Ih=function(t,n,e,r,i,o){var a,u,s;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*zh,skewX:Math.atan(s)*zh,scaleX:a,scaleY:u}},qh=sn(an,"px, ","px)","deg)"),Yh=sn(un,", ",")",")"),jh=Math.SQRT2,Fh=function(t,n){var e,r,i=t[0],o=t[1],a=t[2],u=n[0],s=n[1],c=n[2],f=u-i,l=s-o,h=f*f+l*l;if(h<1e-12)r=Math.log(c/a)/jh,e=function(t){return[i+t*f,o+t*l,a*Math.exp(jh*t*r)]};else{var p=Math.sqrt(h),d=(c*c-a*a+4*h)/(2*a*2*p),g=(c*c-a*a-4*h)/(2*c*2*p),v=Math.log(Math.sqrt(d*d+1)-d),y=Math.log(Math.sqrt(g*g+1)-g);r=(y-v)/jh,e=function(t){var n=t*r,e=cn(v),u=a/(2*p)*(e*ln(jh*n+v)-fn(v));return[i+u*f,o+u*l,a*e/cn(jh*n+v)]}}return e.duration=1e3*r,e},Hh=hn(Qt),Xh=hn(nn),Wh=dn(Qt),Vh=dn(nn),$h=gn(Qt),Zh=gn(nn),Gh=function(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e},Jh=0,Kh=0,Qh=0,tp=1e3,np=0,ep=0,rp=0,ip="object"==typeof performance&&performance.now?performance:Date,op="function"==typeof requestAnimationFrame?requestAnimationFrame:function(t){setTimeout(t,17)};_n.prototype=mn.prototype={constructor:_n,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?vn():+e)+(null==n?0:+n),this._next||bh===this||(bh?bh._next=this:xh=this,bh=this),this._call=t,this._time=e,An()},stop:function(){this._call&&(this._call=null,this._time=1/0,An())}};var ap=function(t,n,e){var r=new _n;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},up=function(t,n,e){var r=new _n,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?vn():+e,r.restart(function o(a){a+=i,r.restart(o,i+=n,e),t(a)},n,e),r)},sp=g("start","end","interrupt"),cp=[],fp=0,lp=1,hp=2,pp=3,dp=4,gp=5,vp=6,yp=function(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};kn(t,e,{name:n,index:r,group:i,on:sp,tween:cp,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:fp})},_p=function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){n=null==n?null:n+"";for(i in o)(e=o[i]).name===n?(r=e.state>hp&&e.state<gp,e.state=vp,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}},mp=function(t){return this.each(function(){_p(this,t)})},xp=function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Tn(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?Nn:Cn)(e,t,n))},bp=function(t,n){var e;return("number"==typeof n?Ch:n instanceof St?Eh:(e=St(n))?(n=e,Eh):Lh)(t,n)},wp=function(t,n){var e=If(t),r="transform"===e?Yh:bp;return this.attrTween(t,"function"==typeof n?(e.local?zn:Bn)(e,r,Rn(this,"attr."+t,n)):null==n?(e.local?On:Pn)(e):(e.local?Un:Ln)(e,r,n+""))},Mp=function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=If(t);return this.tween(e,(r.local?Dn:In)(r,n))},Ap=function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?qn:Yn)(n,t)):Tn(this.node(),n).delay},Ep=function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?jn:Fn)(n,t)):Tn(this.node(),n).duration},Sp=function(t){var n=this._id;return arguments.length?this.each(Hn(n,t)):Tn(this.node(),n).ease},Tp=function(t){"function"!=typeof t&&(t=Xf(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],c=0;c<u;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&s.push(o);return new ne(r,this._parents,this._name,this._id)},kp=function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,c=n[u],f=e[u],l=c.length,h=a[u]=new Array(l),p=0;p<l;++p)(s=c[p]||f[p])&&(h[p]=s);for(;u<r;++u)a[u]=n[u];return new ne(a,this._parents,this._name,this._id)},Np=function(t,n){var e=this._id;return arguments.length<2?Tn(this.node(),e).on.on(t):this.each(Wn(e,t,n))},Cp=function(){return this.on("end.remove",Vn(this._id))},Rp=function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Jf(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,s,c=r[a],f=c.length,l=o[a]=new Array(f),h=0;h<f;++h)(u=c[h])&&(s=t.call(u,u.__data__,h,c))&&("__data__"in u&&(s.__data__=u.__data__),l[h]=s,yp(l[h],n,e,h,l,Tn(u,e)));return new ne(o,this._parents,n,e)},Pp=function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Qf(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var s,c=r[u],f=c.length,l=0;l<f;++l)if(s=c[l]){for(var h,p=t.call(s,s.__data__,l,c),d=Tn(s,e),g=0,v=p.length;g<v;++g)(h=p[g])&&yp(h,n,e,g,p,d);o.push(p),a.push(s)}return new ne(o,a,n,e)},Op=yt.prototype.constructor,Lp=function(){return new Op(this._groups,this._parents)},Up=function(t,n,e){var r="transform"==(t+="")?qh:bp;return null==n?this.styleTween(t,$n(t,r)).on("end.style."+t,Zn(t)):this.styleTween(t,"function"==typeof n?Jn(t,r,Rn(this,"style."+t,n)):Gn(t,r,n+""),e)},Bp=function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Kn(t,n,null==e?"":e))},zp=function(t){return this.tween("text","function"==typeof t?te(Rn(this,"text",t)):Qn(null==t?"":t+""))},Dp=function(){for(var t=this._name,n=this._id,e=re(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,c=0;c<s;++c)if(a=u[c]){var f=Tn(a,n);yp(a,t,e,c,u,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new ne(r,this._parents,t,e)},Ip=0,qp=yt.prototype;ne.prototype=ee.prototype={constructor:ne,select:Rp,selectAll:Pp,filter:Tp,merge:kp,selection:Lp,transition:Dp,call:qp.call,nodes:qp.nodes,node:qp.node,size:qp.size,empty:qp.empty,each:qp.each,on:Np,attr:wp,attrTween:Mp,style:Up,styleTween:Bp,text:zp,remove:Cp,tween:xp,delay:Ap,duration:Ep,ease:Sp};var Yp=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),jp=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),Fp=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Hp=Math.PI,Xp=Hp/2,Wp=4/11,Vp=6/11,$p=8/11,Zp=.75,Gp=9/11,Jp=10/11,Kp=.9375,Qp=21/22,td=63/64,nd=1/Wp/Wp,ed=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(1.70158),rd=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),id=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158),od=2*Math.PI,ad=function t(n,e){function r(t){return n*Math.pow(2,10*--t)*Math.sin((i-t)/e)}var i=Math.asin(1/(n=Math.max(1,n)))*(e/=od);return r.amplitude=function(n){return t(n,e*od)},r.period=function(e){return t(n,e)},r}(1,.3),ud=function t(n,e){function r(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+i)/e)}var i=Math.asin(1/(n=Math.max(1,n)))*(e/=od);return r.amplitude=function(n){return t(n,e*od)},r.period=function(e){return t(n,e)},r}(1,.3),sd=function t(n,e){function r(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((i-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((i+t)/e))/2}var i=Math.asin(1/(n=Math.max(1,n)))*(e/=od);return r.amplitude=function(n){return t(n,e*od)},r.period=function(e){return t(n,e)},r}(1,.3),cd={time:null,delay:0,duration:250,ease:fe},fd=function(t){var n,e;t instanceof ne?(n=t._id,t=t._name):(n=re(),(e=cd).time=vn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,c=0;c<s;++c)(a=u[c])&&yp(a,t,n,c,u,e||Me(a,n));return new ne(r,this._parents,t,n)};yt.prototype.interrupt=mp,yt.prototype.transition=fd;var ld=[null],hd=function(t,n){var e,r,i=t.__transition;if(i){n=null==n?null:n+"";for(r in i)if((e=i[r]).state>lp&&e.name===n)return new ne([[t]],ld,n,+r)}return null},pd=function(t){return function(){return t}},dd=function(t,n,e){this.target=t,this.type=n,this.selection=e},gd=function(){t.event.preventDefault(),t.event.stopImmediatePropagation()},vd={name:"drag"},yd={name:"space"},_d={name:"handle"},md={name:"center"},xd={name:"x",handles:["e","w"].map(Ee),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},bd={name:"y",handles:["n","s"].map(Ee),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},wd={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Ee),input:function(t){return t},output:function(t){return t}},Md={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ad={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Ed={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Sd={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Td={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1},kd=function(){return Oe(wd)},Nd=Math.cos,Cd=Math.sin,Rd=Math.PI,Pd=Rd/2,Od=2*Rd,Ld=Math.max,Ud=function(){function t(t){var o,a,u,s,c,f,l=t.length,h=[],p=sf(l),d=[],g=[],v=g.groups=new Array(l),y=new Array(l*l);for(o=0,c=-1;++c<l;){for(a=0,f=-1;++f<l;)a+=t[c][f];h.push(a),d.push(sf(l)),o+=a}for(e&&p.sort(function(t,n){return e(h[t],h[n])}),r&&d.forEach(function(n,e){n.sort(function(n,i){return r(t[e][n],t[e][i])})}),o=Ld(0,Od-n*l)/o,s=o?n:Od/l,a=0,c=-1;++c<l;){for(u=a,f=-1;++f<l;){var _=p[c],m=d[_][f],x=t[_][m],b=a,w=a+=x*o;y[m*l+_]={index:_,subindex:m,startAngle:b,endAngle:w,value:x}}v[_]={index:_,startAngle:u,endAngle:a,value:h[_]},a+=s}for(c=-1;++c<l;)for(f=c-1;++f<l;){var M=y[f*l+c],A=y[c*l+f];(M.value||A.value)&&g.push(M.value<A.value?{source:A,target:M}:{source:M,target:A})}return i?g.sort(i):g}var n=0,e=null,r=null,i=null;return t.padAngle=function(e){return arguments.length?(n=Ld(0,e),t):n},t.sortGroups=function(n){return arguments.length?(e=n,t):e},t.sortSubgroups=function(n){return arguments.length?(r=n,t):r},t.sortChords=function(n){return arguments.length?(null==n?i=null:(i=Le(n))._=n,t):i&&i._},t},Bd=Array.prototype.slice,zd=function(t){return function(){return t}},Dd=Math.PI,Id=2*Dd,qd=Id-1e-6;Ue.prototype=Be.prototype={constructor:Ue,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,u=e-t,s=r-n,c=o-t,f=a-n,l=c*c+f*f;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>1e-6)if(Math.abs(f*u-s*c)>1e-6&&i){var h=e-o,p=r-a,d=u*u+s*s,g=h*h+p*p,v=Math.sqrt(d),y=Math.sqrt(l),_=i*Math.tan((Dd-Math.acos((d+l-g)/(2*v*y)))/2),m=_/y,x=_/v;Math.abs(m-1)>1e-6&&(this._+="L"+(t+m*c)+","+(n+m*f)),this._+="A"+i+","+i+",0,0,"+ +(f*h>c*p)+","+(this._x1=t+x*u)+","+(this._y1=n+x*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,e=+e;var a=e*Math.cos(r),u=e*Math.sin(r),s=t+a,c=n+u,f=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+c:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+s+","+c),e&&(l<0&&(l=l%Id+Id),l>qd?this._+="A"+e+","+e+",0,1,"+f+","+(t-a)+","+(n-u)+"A"+e+","+e+",0,1,"+f+","+(this._x1=s)+","+(this._y1=c):l>1e-6&&(this._+="A"+e+","+e+",0,"+ +(l>=Dd)+","+f+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var Yd=function(){function t(){var t,u=Bd.call(arguments),s=n.apply(this,u),c=e.apply(this,u),f=+r.apply(this,(u[0]=s,u)),l=i.apply(this,u)-Pd,h=o.apply(this,u)-Pd,p=f*Nd(l),d=f*Cd(l),g=+r.apply(this,(u[0]=c,u)),v=i.apply(this,u)-Pd,y=o.apply(this,u)-Pd;if(a||(a=t=Be()),a.moveTo(p,d),a.arc(0,0,f,l,h),l===v&&h===y||(a.quadraticCurveTo(0,0,g*Nd(v),g*Cd(v)),a.arc(0,0,g,v,y)),a.quadraticCurveTo(0,0,p,d),a.closePath(),t)return a=null,t+""||null}var n=ze,e=De,r=Ie,i=qe,o=Ye,a=null;return t.radius=function(n){return arguments.length?(r="function"==typeof n?n:zd(+n),t):r},t.startAngle=function(n){return arguments.length?(i="function"==typeof n?n:zd(+n),t):i},t.endAngle=function(n){return arguments.length?(o="function"==typeof n?n:zd(+n),t):o},t.source=function(e){return arguments.length?(n=e,t):n},t.target=function(n){return arguments.length?(e=n,t):e},t.context=function(n){return arguments.length?(a=null==n?null:n,t):a},t};je.prototype=Fe.prototype={constructor:je,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var jd=function(){function t(n,i,a,u){if(i>=o.length)return null!=r?r(n):null!=e?n.sort(e):n;for(var s,c,f,l=-1,h=n.length,p=o[i++],d=Fe(),g=a();++l<h;)(f=d.get(s=p(c=n[l])+""))?f.push(c):d.set(s,[c]);return d.each(function(n,e){u(g,e,t(n,i,a,u))}),g}function n(t,e){if(++e>o.length)return t;var i,u=a[e-1];return null!=r&&e>=o.length?i=t.entries():(i=[],t.each(function(t,r){i.push({key:r,values:n(t,e)})})),null!=u?i.sort(function(t,n){return u(t.key,n.key)}):i}var e,r,i,o=[],a=[];return i={object:function(n){return t(n,0,He,Xe)},map:function(n){return t(n,0,We,Ve)},entries:function(e){return n(t(e,0,We,Ve),0)},key:function(t){return o.push(t),i},sortKeys:function(t){return a[o.length-1]=t,i},sortValues:function(t){return e=t,i},rollup:function(t){return r=t,i}}},Fd=Fe.prototype;$e.prototype=Ze.prototype={constructor:$e,has:Fd.has,add:function(t){return t+="",this["$"+t]=t,this},remove:Fd.remove,clear:Fd.clear,values:Fd.keys,size:Fd.size,empty:Fd.empty,each:Fd.each};var Hd=function(t){var n=[];for(var e in t)n.push(e);return n},Xd=function(t){var n=[];for(var e in t)n.push(t[e]);return n},Wd=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n},Vd=function(t){function n(t,n){var r,i,o=e(t,function(t,e){if(r)return r(t,e-1);i=t,r=n?Je(t,n):Ge(t)});return o.columns=i,o}function e(t,n){function e(){if(f>=c)return a;if(i)return i=!1,o;var n,e=f;if(34===t.charCodeAt(e)){for(var r=e;r++<c;)if(34===t.charCodeAt(r)){if(34!==t.charCodeAt(r+1))break;++r}return f=r+2,n=t.charCodeAt(r+1),13===n?(i=!0,10===t.charCodeAt(r+2)&&++f):10===n&&(i=!0),t.slice(e+1,r).replace(/""/g,'"')}for(;f<c;){var u=1;if(10===(n=t.charCodeAt(f++)))i=!0;else if(13===n)i=!0,10===t.charCodeAt(f)&&(++f,++u);else if(n!==s)continue;return t.slice(e,f-u)}return t.slice(e)}for(var r,i,o={},a={},u=[],c=t.length,f=0,l=0;(r=e())!==a;){for(var h=[];r!==o&&r!==a;)h.push(r),r=e();n&&null==(h=n(h,l++))||u.push(h)}return u}function r(n,e){return null==e&&(e=Ke(n)),[e.map(a).join(t)].concat(n.map(function(n){return e.map(function(t){return a(n[t])}).join(t)})).join("\n")}function i(t){return t.map(o).join("\n")}function o(n){return n.map(a).join(t)}function a(t){return null==t?"":u.test(t+="")?'"'+t.replace(/\"/g,'""')+'"':t}var u=new RegExp('["'+t+"\n\r]"),s=t.charCodeAt(0);return{parse:n,parseRows:e,format:r,formatRows:i}},$d=Vd(","),Zd=$d.parse,Gd=$d.parseRows,Jd=$d.format,Kd=$d.formatRows,Qd=Vd("\t"),tg=Qd.parse,ng=Qd.parseRows,eg=Qd.format,rg=Qd.formatRows,ig=function(t,n){function e(){var e,i,o=r.length,a=0,u=0;for(e=0;e<o;++e)i=r[e],a+=i.x,u+=i.y;for(a=a/o-t,u=u/o-n,e=0;e<o;++e)i=r[e],i.x-=a,i.y-=u}var r;return null==t&&(t=0),null==n&&(n=0),e.initialize=function(t){r=t},e.x=function(n){return arguments.length?(t=+n,e):t},e.y=function(t){return arguments.length?(n=+t,e):n},e},og=function(t){return function(){return t}},ag=function(){return 1e-6*(Math.random()-.5)},ug=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Qe(this.cover(n,e),n,e,t)},sg=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{if(!(e>t||t>i||r>n||n>o))return this;var a,u,s=i-e,c=this._root;switch(u=(n<(r+o)/2)<<1|t<(e+i)/2){case 0:do{a=new Array(4),a[u]=c,c=a}while(s*=2,i=e+s,o=r+s,t>i||n>o);break;case 1:do{a=new Array(4),a[u]=c,c=a}while(s*=2,e=i-s,o=r+s,e>t||n>o);break;case 2:do{a=new Array(4),a[u]=c,c=a}while(s*=2,i=e+s,r=o-s,t>i||r>n);break;case 3:do{a=new Array(4),a[u]=c,c=a}while(s*=2,e=i-s,r=o-s,e>t||r>n)}this._root&&this._root.length&&(this._root=c)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},cg=function(){var t=[];return this.visit(function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)}),t},fg=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},lg=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i},hg=function(t,n,e){var r,i,o,a,u,s,c,f=this._x0,l=this._y0,h=this._x1,p=this._y1,d=[],g=this._root;for(g&&d.push(new lg(g,f,l,h,p)),null==e?e=1/0:(f=t-e,l=n-e,h=t+e,p=n+e,e*=e);s=d.pop();)if(!(!(g=s.node)||(i=s.x0)>h||(o=s.y0)>p||(a=s.x1)<f||(u=s.y1)<l))if(g.length){var v=(i+a)/2,y=(o+u)/2;d.push(new lg(g[3],v,y,a,u),new lg(g[2],i,y,v,u),new lg(g[1],v,o,a,y),new lg(g[0],i,o,v,y)),(c=(n>=y)<<1|t>=v)&&(s=d[d.length-1],d[d.length-1]=d[d.length-1-c],d[d.length-1-c]=s)}else{var _=t-+this._x.call(null,g.data),m=n-+this._y.call(null,g.data),x=_*_+m*m;if(x<e){var b=Math.sqrt(e=x);f=t-b,l=n-b,h=t+b,p=n+b,r=g.data}}return r},pg=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var n,e,r,i,o,a,u,s,c,f,l,h,p=this._root,d=this._x0,g=this._y0,v=this._x1,y=this._y1;if(!p)return this;if(p.length)for(;;){if((c=o>=(u=(d+v)/2))?d=u:v=u,(f=a>=(s=(g+y)/2))?g=s:y=s,n=p,!(p=p[l=f<<1|c]))return this;if(!p.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,h=l)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[h]=p:this._root=p),this):(this._root=i,this)},dg=function(){return this._root},gg=function(){var t=0;return this.visit(function(n){if(!n.length)do{++t}while(n=n.next)}),t},vg=function(t){var n,e,r,i,o,a,u=[],s=this._root;for(s&&u.push(new lg(s,this._x0,this._y0,this._x1,this._y1));n=u.pop();)if(!t(s=n.node,r=n.x0,i=n.y0,o=n.x1,a=n.y1)&&s.length){var c=(r+o)/2,f=(i+a)/2;(e=s[3])&&u.push(new lg(e,c,f,o,a)),(e=s[2])&&u.push(new lg(e,r,f,c,a)),(e=s[1])&&u.push(new lg(e,c,i,o,f)),(e=s[0])&&u.push(new lg(e,r,i,c,f))}return this},yg=function(t){var n,e=[],r=[];for(this._root&&e.push(new lg(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,a=n.x0,u=n.y0,s=n.x1,c=n.y1,f=(a+s)/2,l=(u+c)/2;(o=i[0])&&e.push(new lg(o,a,u,f,l)),(o=i[1])&&e.push(new lg(o,f,u,s,l)),(o=i[2])&&e.push(new lg(o,a,l,f,c)),(o=i[3])&&e.push(new lg(o,f,l,s,c))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},_g=function(t){return arguments.length?(this._x=t,this):this._x},mg=function(t){return arguments.length?(this._y=t,this):this._y},xg=ir.prototype=or.prototype;xg.copy=function(){var t,n,e=new or(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=ar(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=ar(n));return e},xg.add=ug,xg.addAll=tr,xg.cover=sg,xg.data=cg,xg.extent=fg,xg.find=hg,xg.remove=pg,xg.removeAll=nr,xg.root=dg,xg.size=gg,xg.visit=vg,xg.visitAfter=yg,xg.x=_g,xg.y=mg;var bg,wg=function(t){function n(){function t(t,n,e,r,i){var o=t.data,u=t.r,p=l+u;{if(!o)return n>c+p||r<c-p||e>f+p||i<f-p;if(o.index>s.index){var d=c-o.x-o.vx,g=f-o.y-o.vy,v=d*d+g*g;v<p*p&&(0===d&&(d=ag(),v+=d*d),0===g&&(g=ag(),v+=g*g),v=(p-(v=Math.sqrt(v)))/v*a,s.vx+=(d*=v)*(p=(u*=u)/(h+u)),s.vy+=(g*=v)*p,o.vx-=d*(p=1-p),o.vy-=g*p)}}}for(var n,r,s,c,f,l,h,p=i.length,d=0;d<u;++d)for(r=ir(i,ur,sr).visitAfter(e),n=0;n<p;++n)s=i[n],l=o[s.index],h=l*l,c=s.x+s.vx,f=s.y+s.vy,r.visit(t)}function e(t){if(t.data)return t.r=o[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function r(){if(i){var n,e,r=i.length;for(o=new Array(r),n=0;n<r;++n)e=i[n],o[e.index]=+t(e,n,i)}}var i,o,a=1,u=1;return"function"!=typeof t&&(t=og(null==t?1:+t)),n.initialize=function(t){i=t,r()},n.iterations=function(t){return arguments.length?(u=+t,n):u},n.strength=function(t){return arguments.length?(a=+t,n):a},n.radius=function(e){return arguments.length?(t="function"==typeof e?e:og(+e),r(),n):t},n},Mg=function(t){function n(t){return 1/Math.min(c[t.source.index],c[t.target.index])}function e(n){for(var e=0,r=t.length;e<d;++e)for(var i,o,s,c,l,h,p,g=0;g<r;++g)i=t[g],o=i.source,s=i.target,c=s.x+s.vx-o.x-o.vx||ag(),l=s.y+s.vy-o.y-o.vy||ag(),h=Math.sqrt(c*c+l*l),h=(h-u[g])/h*n*a[g],c*=h,l*=h,s.vx-=c*(p=f[g]),s.vy-=l*p,o.vx+=c*(p=1-p),o.vy+=l*p}function r(){if(s){var n,e,r=s.length,h=t.length,p=Fe(s,l);for(n=0,c=new Array(r);n<h;++n)e=t[n],e.index=n,"object"!=typeof e.source&&(e.source=fr(p,e.source)),"object"!=typeof e.target&&(e.target=fr(p,e.target)),c[e.source.index]=(c[e.source.index]||0)+1,c[e.target.index]=(c[e.target.index]||0)+1;for(n=0,f=new Array(h);n<h;++n)e=t[n],f[n]=c[e.source.index]/(c[e.source.index]+c[e.target.index]);a=new Array(h),i(),u=new Array(h),o()}}function i(){if(s)for(var n=0,e=t.length;n<e;++n)a[n]=+h(t[n],n,t)}function o(){if(s)for(var n=0,e=t.length;n<e;++n)u[n]=+p(t[n],n,t)}var a,u,s,c,f,l=cr,h=n,p=og(30),d=1;return null==t&&(t=[]),e.initialize=function(t){s=t,r()},e.links=function(n){return arguments.length?(t=n,r(),e):t},e.id=function(t){return arguments.length?(l=t,e):l},e.iterations=function(t){return arguments.length?(d=+t,e):d},e.strength=function(t){return arguments.length?(h="function"==typeof t?t:og(+t),i(),e):h},e.distance=function(t){return arguments.length?(p="function"==typeof t?t:og(+t),o(),e):p},e},Ag=10,Eg=Math.PI*(3-Math.sqrt(5)),Sg=function(t){function n(){e(),p.call("tick",o),a<u&&(h.stop(),p.call("end",o))}function e(){var n,e,r=t.length;for(a+=(c-a)*s,l.each(function(t){t(a)}),n=0;n<r;++n)e=t[n],null==e.fx?e.x+=e.vx*=f:(e.x=e.fx,e.vx=0),null==e.fy?e.y+=e.vy*=f:(e.y=e.fy,e.vy=0)}function r(){for(var n,e=0,r=t.length;e<r;++e){if(n=t[e],n.index=e,isNaN(n.x)||isNaN(n.y)){var i=Ag*Math.sqrt(e),o=e*Eg;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function i(n){return n.initialize&&n.initialize(t),n}var o,a=1,u=.001,s=1-Math.pow(u,1/300),c=0,f=.6,l=Fe(),h=mn(n),p=g("tick","end");return null==t&&(t=[]),r(),o={tick:e,restart:function(){return h.restart(n),o},stop:function(){return h.stop(),o},nodes:function(n){return arguments.length?(t=n,r(),l.each(i),o):t},alpha:function(t){return arguments.length?(a=+t,o):a},alphaMin:function(t){return arguments.length?(u=+t,o):u},alphaDecay:function(t){return arguments.length?(s=+t,o):+s},alphaTarget:function(t){return arguments.length?(c=+t,o):c},velocityDecay:function(t){return arguments.length?(f=1-t,o):1-f},force:function(t,n){return arguments.length>1?(null==n?l.remove(t):l.set(t,i(n)),o):l.get(t)},find:function(n,e,r){var i,o,a,u,s,c=0,f=t.length;for(null==r?r=1/0:r*=r,c=0;c<f;++c)u=t[c],i=n-u.x,o=e-u.y,(a=i*i+o*o)<r&&(s=u,r=a);return s},on:function(t,n){return arguments.length>1?(p.on(t,n),o):p.on(t)}}},Tg=function(){function t(t){var n,u=i.length,s=ir(i,lr,hr).visitAfter(e);for(a=t,n=0;n<u;++n)o=i[n],s.visit(r)}function n(){if(i){var t,n,e=i.length;for(u=new Array(e),t=0;t<e;++t)n=i[t],u[n.index]=+s(n,t,i)}}function e(t){var n,e,r,i,o,a=0;if(t.length){for(r=i=o=0;o<4;++o)(n=t[o])&&(e=n.value)&&(a+=e,r+=e*n.x,i+=e*n.y);t.x=r/a,t.y=i/a}else{n=t,n.x=n.data.x,n.y=n.data.y;do{a+=u[n.data.index]}while(n=n.next)}t.value=a}function r(t,n,e,r){if(!t.value)return!0;var i=t.x-o.x,s=t.y-o.y,h=r-n,p=i*i+s*s;if(h*h/l<p)return p<f&&(0===i&&(i=ag(),p+=i*i),0===s&&(s=ag(),p+=s*s),p<c&&(p=Math.sqrt(c*p)),o.vx+=i*t.value*a/p,o.vy+=s*t.value*a/p),!0;if(!(t.length||p>=f)){(t.data!==o||t.next)&&(0===i&&(i=ag(),p+=i*i),0===s&&(s=ag(),p+=s*s),p<c&&(p=Math.sqrt(c*p)));do{t.data!==o&&(h=u[t.data.index]*a/p,o.vx+=i*h,o.vy+=s*h)}while(t=t.next)}}var i,o,a,u,s=og(-30),c=1,f=1/0,l=.81;return t.initialize=function(t){i=t,n()},t.strength=function(e){return arguments.length?(s="function"==typeof e?e:og(+e),n(),t):s},t.distanceMin=function(n){return arguments.length?(c=n*n,t):Math.sqrt(c)},t.distanceMax=function(n){return arguments.length?(f=n*n,t):Math.sqrt(f)},t.theta=function(n){return arguments.length?(l=n*n,t):Math.sqrt(l)},t},kg=function(t){function n(t){for(var n,e=0,a=r.length;e<a;++e)n=r[e],n.vx+=(o[e]-n.x)*i[e]*t}function e(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)i[n]=isNaN(o[n]=+t(r[n],n,r))?0:+a(r[n],n,r)}}var r,i,o,a=og(.1);return"function"!=typeof t&&(t=og(null==t?0:+t)),n.initialize=function(t){r=t,e()},n.strength=function(t){return arguments.length?(a="function"==typeof t?t:og(+t),e(),n):a},n.x=function(r){return arguments.length?(t="function"==typeof r?r:og(+r),e(),n):t},n},Ng=function(t){function n(t){for(var n,e=0,a=r.length;e<a;++e)n=r[e],n.vy+=(o[e]-n.y)*i[e]*t}function e(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)i[n]=isNaN(o[n]=+t(r[n],n,r))?0:+a(r[n],n,r)}}var r,i,o,a=og(.1);return"function"!=typeof t&&(t=og(null==t?0:+t)),n.initialize=function(t){r=t,e()},n.strength=function(t){return arguments.length?(a="function"==typeof t?t:og(+t),e(),n):a},n.y=function(r){return arguments.length?(t="function"==typeof r?r:og(+r),e(),n):t},n},Cg=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},Rg=function(t){return t=Cg(Math.abs(t)),t?t[1]:NaN},Pg=function(t,n){return function(e,r){for(var i=e.length,o=[],a=0,u=t[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),o.push(e.substring(i-=u,i+u)),!((s+=u+1)>r));)u=t[a=(a+1)%t.length];return o.reverse().join(n)}},Og=function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}},Lg=function(t,n){t=t.toPrecision(n);t:for(var e,r=t.length,i=1,o=-1;i<r;++i)switch(t[i]){case".":o=e=i;break;case"0":0===o&&(o=i),e=i;break;case"e":break t;default:o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(e+1):t},Ug=function(t,n){var e=Cg(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(bg=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Cg(t,Math.max(0,n+o-1))[0]},Bg=function(t,n){var e=Cg(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},zg={"":Lg,"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Bg(100*t,n)},r:Bg,s:Ug,X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Dg=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;pr.prototype=dr.prototype,dr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var Ig,qg=function(t){return t},Yg=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],jg=function(t){function n(t){function n(t){var n,i,u,f=v,x=y;if("c"===g)x=_(t)+x,t="";else{t=+t;var b=t<0;if(t=_(Math.abs(t),d),b&&0==+t&&(b=!1),f=(b?"("===c?c:"-":"-"===c||"("===c?"":c)+f,x=x+("s"===g?Yg[8+bg/3]:"")+(b&&"("===c?")":""),m)for(n=-1,i=t.length;++n<i;)if(48>(u=t.charCodeAt(n))||u>57){x=(46===u?o+t.slice(n+1):t.slice(n))+x,t=t.slice(0,n);break}}p&&!l&&(t=r(t,1/0));var w=f.length+t.length+x.length,M=w<h?new Array(h-w+1).join(e):"";switch(p&&l&&(t=r(M+t,M.length?h-x.length:1/0),M=""),s){case"<":t=f+t+x+M;break;case"=":t=f+M+t+x;break;case"^":t=M.slice(0,w=M.length>>1)+f+t+x+M.slice(w);break;default:t=M+f+t+x}return a(t)}t=pr(t);var e=t.fill,s=t.align,c=t.sign,f=t.symbol,l=t.zero,h=t.width,p=t.comma,d=t.precision,g=t.type,v="$"===f?i[0]:"#"===f&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",y="$"===f?i[1]:/[%p]/.test(g)?u:"",_=zg[g],m=!g||/[defgprs%]/.test(g);return d=null==d?g?6:12:/[gprs]/.test(g)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),n.toString=function(){return t+""},n}function e(t,e){var r=n((t=pr(t),t.type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(Rg(e)/3))),o=Math.pow(10,-i),a=Yg[8+i/3];return function(t){return r(o*t)+a}}var r=t.grouping&&t.thousands?Pg(t.grouping,t.thousands):qg,i=t.currency,o=t.decimal,a=t.numerals?Og(t.numerals):qg,u=t.percent||"%";return{format:n,formatPrefix:e}};gr({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var Fg=function(t){return Math.max(0,-Rg(Math.abs(t)))},Hg=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Rg(n)/3)))-Rg(Math.abs(t)))},Xg=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Rg(n)-Rg(t))+1},Wg=function(){return new vr};vr.prototype={constructor:vr,reset:function(){this.s=this.t=0},add:function(t){yr(Av,t,this.t),yr(this,Av.s,this.s),this.s?this.t+=Av.t:this.s=Av.t},valueOf:function(){return this.s}};var Vg,$g,Zg,Gg,Jg,Kg,Qg,tv,nv,ev,rv,iv,ov,av,uv,sv,cv,fv,lv,hv,pv,dv,gv,vv,yv,_v,mv,xv,bv,wv,Mv,Av=new vr,Ev=1e-6,Sv=Math.PI,Tv=Sv/2,kv=Sv/4,Nv=2*Sv,Cv=180/Sv,Rv=Sv/180,Pv=Math.abs,Ov=Math.atan,Lv=Math.atan2,Uv=Math.cos,Bv=Math.ceil,zv=Math.exp,Dv=Math.log,Iv=Math.pow,qv=Math.sin,Yv=Math.sign||function(t){return t>0?1:t<0?-1:0},jv=Math.sqrt,Fv=Math.tan,Hv={Feature:function(t,n){wr(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)wr(e[r].geometry,n)}},Xv={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){Mr(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Mr(e[r],n,0)},Polygon:function(t,n){Ar(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Ar(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)wr(e[r],n)}},Wv=function(t,n){t&&Hv.hasOwnProperty(t.type)?Hv[t.type](t,n):wr(t,n)},Vv=Wg(),$v=Wg(),Zv={point:br,lineStart:br,lineEnd:br,polygonStart:function(){Vv.reset(),Zv.lineStart=Er,Zv.lineEnd=Sr},polygonEnd:function(){var t=+Vv;$v.add(t<0?Nv+t:t),this.lineStart=this.lineEnd=this.point=br},sphere:function(){$v.add(Nv)}},Gv=function(t){return $v.reset(),Wv(t,Zv),2*$v},Jv=Wg(),Kv={point:Br,lineStart:Dr,lineEnd:Ir,polygonStart:function(){Kv.point=qr,Kv.lineStart=Yr,Kv.lineEnd=jr,Jv.reset(),Zv.polygonStart()},polygonEnd:function(){Zv.polygonEnd(),Kv.point=Br,Kv.lineStart=Dr,Kv.lineEnd=Ir,Vv<0?(Kg=-(tv=180),Qg=-(nv=90)):Jv>Ev?nv=90:Jv<-Ev&&(Qg=-90),uv[0]=Kg,uv[1]=tv}},Qv=function(t){var n,e,r,i,o,a,u;if(nv=tv=-(Kg=Qg=1/0),av=[],Wv(t,Kv),e=av.length){for(av.sort(Hr),n=1,r=av[0],o=[r];n<e;++n)i=av[n],Xr(r,i[0])||Xr(r,i[1])?(Fr(r[0],i[1])>Fr(r[0],r[1])&&(r[1]=i[1]),Fr(i[0],r[1])>Fr(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(a=-1/0,e=o.length-1,n=0,r=o[e];n<=e;r=i,++n)i=o[n],(u=Fr(r[1],i[0]))>a&&(a=u,Kg=i[0],tv=r[1])}return av=uv=null,Kg===1/0||Qg===1/0?[[NaN,NaN],[NaN,NaN]]:[[Kg,Qg],[tv,nv]]},ty={sphere:br,point:Wr,lineStart:$r,lineEnd:Jr,polygonStart:function(){ty.lineStart=Kr,ty.lineEnd=Qr},polygonEnd:function(){ty.lineStart=$r,ty.lineEnd=Jr}},ny=function(t){sv=cv=fv=lv=hv=pv=dv=gv=vv=yv=_v=0,Wv(t,ty);var n=vv,e=yv,r=_v,i=n*n+e*e+r*r;return i<1e-12&&(n=pv,e=dv,r=gv,cv<Ev&&(n=fv,e=lv,r=hv),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[Lv(e,n)*Cv,mr(r/jv(i))*Cv]},ey=function(t){return function(){return t}},ry=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};ei.invert=ei;var iy,oy,ay,uy,sy,cy,fy,ly,hy,py,dy,gy=function(t){function n(n){return n=t(n[0]*Rv,n[1]*Rv),n[0]*=Cv,n[1]*=Cv,n}return t=ri(t[0]*Rv,t[1]*Rv,t.length>2?t[2]*Rv:0),n.invert=function(n){return n=t.invert(n[0]*Rv,n[1]*Rv),n[0]*=Cv,n[1]*=Cv,n},n},vy=function(){function t(t,n){e.push(t=r(t,n)),t[0]*=Cv,t[1]*=Cv}function n(){var t=i.apply(this,arguments),n=o.apply(this,arguments)*Rv,s=a.apply(this,arguments)*Rv;return e=[],r=ri(-t[0]*Rv,-t[1]*Rv,0).invert,ui(u,n,s,1),t={type:"Polygon",coordinates:[e]},e=r=null,t}var e,r,i=ey([0,0]),o=ey(90),a=ey(6),u={point:t};return n.center=function(t){return arguments.length?(i="function"==typeof t?t:ey([+t[0],+t[1]]),n):i},n.radius=function(t){return arguments.length?(o="function"==typeof t?t:ey(+t),n):o},n.precision=function(t){return arguments.length?(a="function"==typeof t?t:ey(+t),n):a},n},yy=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:br,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},_y=function(t,n,e,r,i,o){var a,u=t[0],s=t[1],c=n[0],f=n[1],l=0,h=1,p=c-u,d=f-s;if(a=e-u,p||!(a>0)){if(a/=p,p<0){if(a<l)return;a<h&&(h=a)}else if(p>0){if(a>h)return;a>l&&(l=a)}if(a=i-u,p||!(a<0)){if(a/=p,p<0){if(a>h)return;a>l&&(l=a)}else if(p>0){if(a<l)return;a<h&&(h=a)}if(a=r-s,d||!(a>0)){if(a/=d,d<0){if(a<l)return;a<h&&(h=a)}else if(d>0){if(a>h)return;a>l&&(l=a)}if(a=o-s,d||!(a<0)){if(a/=d,d<0){if(a>h)return;a>l&&(l=a)}else if(d>0){if(a<l)return;a<h&&(h=a)}return l>0&&(t[0]=u+l*p,t[1]=s+l*d),h<1&&(n[0]=u+h*p,n[1]=s+h*d),!0}}}}},my=function(t,n){return Pv(t[0]-n[0])<Ev&&Pv(t[1]-n[1])<Ev},xy=function(t,n,e,r,i){var o,a,u=[],s=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],a=t[n];if(my(r,a)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);return void i.lineEnd()}u.push(e=new ci(r,t,null,!0)),s.push(e.o=new ci(r,null,e,!1)),u.push(e=new ci(a,t,null,!1)),s.push(e.o=new ci(a,null,e,!0))}}),u.length){for(s.sort(n),fi(u),fi(s),o=0,a=s.length;o<a;++o)s[o].e=e=!e;for(var c,f,l=u[0];;){for(var h=l,p=!0;h.v;)if((h=h.n)===l)return;c=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(p)for(o=0,a=c.length;o<a;++o)i.point((f=c[o])[0],f[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(p)for(c=h.p.z,o=c.length-1;o>=0;--o)i.point((f=c[o])[0],f[1]);else r(h.x,h.p.x,-1,i);h=h.p}h=h.o,c=h.z,p=!p}while(!h.v);i.lineEnd()}}},by=1e9,wy=-by,My=function(){var t,n,e,r=0,i=0,o=960,a=500;return e={stream:function(e){return t&&n===e?t:t=li(r,i,o,a)(n=e)},extent:function(u){return arguments.length?(r=+u[0][0],i=+u[0][1],o=+u[1][0],a=+u[1][1],t=n=null,e):[[r,i],[o,a]]}}},Ay=Wg(),Ey=function(t,n){var e=n[0],r=n[1],i=[qv(e),-Uv(e),0],o=0,a=0;Ay.reset();for(var u=0,s=t.length;u<s;++u)if(f=(c=t[u]).length)for(var c,f,l=c[f-1],h=l[0],p=l[1]/2+kv,d=qv(p),g=Uv(p),v=0;v<f;++v,h=_,d=x,g=b,l=y){var y=c[v],_=y[0],m=y[1]/2+kv,x=qv(m),b=Uv(m),w=_-h,M=w>=0?1:-1,A=M*w,E=A>Sv,S=d*x;if(Ay.add(Lv(S*M*qv(A),g*b+S*Uv(A))),o+=E?w+M*Nv:w,E^h>=e^_>=e){var T=Pr(Cr(l),Cr(y));Ur(T);var k=Pr(i,T);Ur(k);var N=(E^w>=0?-1:1)*mr(k[2]);(r>N||r===N&&(T[0]||T[1]))&&(a+=E^w>=0?1:-1)}}return(o<-Ev||o<Ev&&Ay<-Ev)^1&a},Sy=Wg(),Ty={sphere:br,point:br,lineStart:hi,lineEnd:br,polygonStart:br,polygonEnd:br},ky=function(t){return Sy.reset(),Wv(t,Ty),+Sy},Ny=[null,null],Cy={type:"LineString",coordinates:Ny},Ry=function(t,n){return Ny[0]=t,Ny[1]=n,ky(Cy)},Py={Feature:function(t,n){return vi(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(vi(e[r].geometry,n))return!0;return!1}},Oy={Sphere:function(){return!0},Point:function(t,n){return yi(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(yi(e[r],n))return!0;return!1},LineString:function(t,n){return _i(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(_i(e[r],n))return!0;return!1},Polygon:function(t,n){return mi(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(mi(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(vi(e[r],n))return!0;return!1}},Ly=function(t,n){return(t&&Py.hasOwnProperty(t.type)?Py[t.type]:vi)(t,n)},Uy=function(t,n){var e=t[0]*Rv,r=t[1]*Rv,i=n[0]*Rv,o=n[1]*Rv,a=Uv(r),u=qv(r),s=Uv(o),c=qv(o),f=a*Uv(e),l=a*qv(e),h=s*Uv(i),p=s*qv(i),d=2*mr(jv(xr(o-r)+a*s*xr(i-e))),g=qv(d),v=d?function(t){var n=qv(t*=d)/g,e=qv(d-t)/g,r=e*f+n*h,i=e*l+n*p,o=e*u+n*c;return[Lv(i,r)*Cv,Lv(o,jv(r*r+i*i))*Cv]}:function(){return[e*Cv,r*Cv]};return v.distance=d,v},By=function(t){return t},zy=Wg(),Dy=Wg(),Iy={point:br,lineStart:br,lineEnd:br,polygonStart:function(){Iy.lineStart=Si,Iy.lineEnd=Ni},polygonEnd:function(){Iy.lineStart=Iy.lineEnd=Iy.point=br,zy.add(Pv(Dy)),Dy.reset()},result:function(){var t=zy/2;return zy.reset(),t}},qy=1/0,Yy=qy,jy=-qy,Fy=jy,Hy={point:Ci,lineStart:br,lineEnd:br,polygonStart:br,polygonEnd:br,result:function(){var t=[[qy,Yy],[jy,Fy]];return jy=Fy=-(Yy=qy=1/0),t}},Xy=0,Wy=0,Vy=0,$y=0,Zy=0,Gy=0,Jy=0,Ky=0,Qy=0,t_={point:Ri,lineStart:Pi,lineEnd:Ui,polygonStart:function(){t_.lineStart=Bi,t_.lineEnd=zi},polygonEnd:function(){t_.point=Ri,t_.lineStart=Pi,t_.lineEnd=Ui},result:function(){var t=Qy?[Jy/Qy,Ky/Qy]:Gy?[$y/Gy,Zy/Gy]:Vy?[Xy/Vy,Wy/Vy]:[NaN,NaN];return Xy=Wy=Vy=$y=Zy=Gy=Jy=Ky=Qy=0,t}};qi.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Nv)}},result:br};var n_,e_,r_,i_,o_,a_=Wg(),u_={point:br,lineStart:function(){u_.point=Yi},lineEnd:function(){n_&&ji(e_,r_),u_.point=br},polygonStart:function(){n_=!0},polygonEnd:function(){n_=null},result:function(){var t=+a_;return a_.reset(),t}};Fi.prototype={_radius:4.5,_circle:Hi(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Hi(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var s_=function(t,n){function e(t){return t&&("function"==typeof o&&i.pointRadius(+o.apply(this,arguments)),Wv(t,r(i))),i.result()}var r,i,o=4.5;return e.area=function(t){return Wv(t,r(Iy)),Iy.result()},e.measure=function(t){return Wv(t,r(u_)),u_.result()},e.bounds=function(t){return Wv(t,r(Hy)),Hy.result()},e.centroid=function(t){return Wv(t,r(t_)),t_.result()},e.projection=function(n){return arguments.length?(r=null==n?(t=null,By):(t=n).stream,e):t},e.context=function(t){return arguments.length?(i=null==t?(n=null,new Fi):new qi(n=t),"function"!=typeof o&&i.pointRadius(o),e):n},e.pointRadius=function(t){return arguments.length?(o="function"==typeof t?t:(i.pointRadius(+t),+t),e):o},e.projection(t).context(n)},c_=function(t,n,e,r){return function(i,o){function a(n,e){var r=i(n,e);t(n=r[0],e=r[1])&&o.point(n,e)}function u(t,n){var e=i(t,n);v.point(e[0],e[1])}function s(){b.point=u,v.lineStart()}function c(){b.point=a,v.lineEnd()}function f(t,n){g.push([t,n]);var e=i(t,n);m.point(e[0],e[1])}function l(){m.lineStart(),g=[]}function h(){f(g[0][0],g[0][1]),m.lineEnd();var t,n,e,r,i=m.clean(),a=_.result(),u=a.length;if(g.pop(),p.push(g),g=null,u)if(1&i){if(e=a[0],(n=e.length-1)>0){for(x||(o.polygonStart(),x=!0),o.lineStart(),t=0;t<n;++t)o.point((r=e[t])[0],r[1]);o.lineEnd()}}else u>1&&2&i&&a.push(a.pop().concat(a.shift())),d.push(a.filter(Xi))}var p,d,g,v=n(o),y=i.invert(r[0],r[1]),_=yy(),m=n(_),x=!1,b={point:a,lineStart:s,lineEnd:c,polygonStart:function(){b.point=f,b.lineStart=l,b.lineEnd=h,d=[],p=[]},polygonEnd:function(){b.point=a,b.lineStart=s,b.lineEnd=c,d=bf(d);var t=Ey(p,y);d.length?(x||(o.polygonStart(),x=!0),xy(d,Wi,t,e,o)):t&&(x||(o.polygonStart(),x=!0),o.lineStart(),e(null,null,1,o),o.lineEnd()),x&&(o.polygonEnd(),x=!1),d=p=null},sphere:function(){o.polygonStart(),o.lineStart(),e(null,null,1,o),o.lineEnd(),o.polygonEnd()}};return b}},f_=c_(function(){return!0},Vi,Zi,[-Sv,-Tv]),l_=function(t,n){function e(e,r,i,o){ui(o,t,n,i,e,r)}function r(t,n){return Uv(t)*Uv(n)>u}function i(t){var n,e,i,u,f;return{lineStart:function(){u=i=!1,f=1},point:function(l,h){var p,d=[l,h],g=r(l,h),v=s?g?0:a(l,h):g?a(l+(l<0?Sv:-Sv),h):0;if(!n&&(u=i=g)&&t.lineStart(),g!==i&&(!(p=o(n,d))||my(n,p)||my(d,p))&&(d[0]+=Ev,d[1]+=Ev,g=r(d[0],d[1])),g!==i)f=0,g?(t.lineStart(),p=o(d,n),t.point(p[0],p[1])):(p=o(n,d),t.point(p[0],p[1]),t.lineEnd()),n=p;else if(c&&n&&s^g){var y;v&e||!(y=o(d,n,!0))||(f=0,s?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!g||n&&my(n,d)||t.point(d[0],d[1]),n=d,i=g,e=v},lineEnd:function(){i&&t.lineEnd(),n=null},clean:function(){return f|(u&&i)<<1}}}function o(t,n,e){var r=Cr(t),i=Cr(n),o=[1,0,0],a=Pr(r,i),s=Rr(a,a),c=a[0],f=s-c*c;if(!f)return!e&&t;var l=u*s/f,h=-u*c/f,p=Pr(o,a),d=Lr(o,l);Or(d,Lr(a,h));var g=p,v=Rr(d,g),y=Rr(g,g),_=v*v-y*(Rr(d,d)-1);if(!(_<0)){var m=jv(_),x=Lr(g,(-v-m)/y);if(Or(x,d),x=Nr(x),!e)return x;var b,w=t[0],M=n[0],A=t[1],E=n[1];M<w&&(b=w,w=M,M=b);var S=M-w,T=Pv(S-Sv)<Ev,k=T||S<Ev;if(!T&&E<A&&(b=A,A=E,E=b),k?T?A+E>0^x[1]<(Pv(x[0]-w)<Ev?A:E):A<=x[1]&&x[1]<=E:S>Sv^(w<=x[0]&&x[0]<=M)){var N=Lr(g,(-v+m)/y);return Or(N,d),[x,Nr(N)]}}}function a(n,e){var r=s?t:Sv-t,i=0;return n<-r?i|=1:n>r&&(i|=2),e<-r?i|=4:e>r&&(i|=8),i}var u=Uv(t),s=u>0,c=Pv(u)>Ev;return c_(r,i,e,s?[0,-t]:[-Sv,t-Sv])},h_=function(t){return{stream:Gi(t)}};Ji.prototype={constructor:Ji,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var p_=16,d_=Uv(30*Rv),g_=function(t,n){return+n?no(t,n):to(t)},v_=Gi({point:function(t,n){this.stream.point(t*Rv,n*Rv)}}),y_=function(){return io(ao).scale(155.424).center([0,33.6442])},__=function(){return y_().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])},m_=function(){function t(t){var n=t[0],e=t[1];return u=null,i.point(n,e),u||(o.point(n,e),u)||(a.point(n,e),u)}function n(){return e=r=null,t}var e,r,i,o,a,u,s=__(),c=y_().rotate([154,0]).center([-2,58.5]).parallels([55,65]),f=y_().rotate([157,0]).center([-3,19.9]).parallels([8,18]),l={point:function(t,n){u=[t,n]}};return t.invert=function(t){var n=s.scale(),e=s.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?c:i>=.166&&i<.234&&r>=-.214&&r<-.115?f:s).invert(t)},t.stream=function(t){return e&&r===t?e:e=uo([s.stream(r=t),c.stream(t),f.stream(t)])},t.precision=function(t){return arguments.length?(s.precision(t),c.precision(t),f.precision(t),n()):s.precision()},t.scale=function(n){return arguments.length?(s.scale(n),c.scale(.35*n),f.scale(n),t.translate(s.translate())):s.scale()},t.translate=function(t){if(!arguments.length)return s.translate();var e=s.scale(),r=+t[0],u=+t[1];return i=s.translate(t).clipExtent([[r-.455*e,u-.238*e],[r+.455*e,u+.238*e]]).stream(l),o=c.translate([r-.307*e,u+.201*e]).clipExtent([[r-.425*e+Ev,u+.12*e+Ev],[r-.214*e-Ev,u+.234*e-Ev]]).stream(l),a=f.translate([r-.205*e,u+.212*e]).clipExtent([[r-.214*e+Ev,u+.166*e+Ev],[r-.115*e-Ev,u+.234*e-Ev]]).stream(l),n()},t.fitExtent=function(n,e){return Ki(t,n,e)},t.fitSize=function(n,e){return Qi(t,n,e)},t.scale(1070)},x_=so(function(t){return jv(2/(1+t))});x_.invert=co(function(t){return 2*mr(t/2)});var b_=function(){return eo(x_).scale(124.75).clipAngle(179.999)},w_=so(function(t){return(t=_r(t))&&t/qv(t)});w_.invert=co(function(t){return t});var M_=function(){return eo(w_).scale(79.4188).clipAngle(179.999)};fo.invert=function(t,n){return[t,2*Ov(zv(n))-Tv]};var A_=function(){return lo(fo).scale(961/Nv)},E_=function(){return io(po).scale(109.5).parallels([30,30])};go.invert=go;var S_=function(){return eo(go).scale(152.63)},T_=function(){return io(vo).scale(131.154).center([0,13.9389])};yo.invert=co(Ov);var k_=function(){return eo(yo).scale(144.049).clipAngle(60)},N_=function(){function t(){return i=o=null,a}var n,e,r,i,o,a,u=1,s=0,c=0,f=1,l=1,h=By,p=null,d=By;return a={stream:function(t){return i&&o===t?i:i=h(d(o=t))},clipExtent:function(i){return arguments.length?(d=null==i?(p=n=e=r=null,By):li(p=+i[0][0],n=+i[0][1],e=+i[1][0],r=+i[1][1]),t()):null==p?null:[[p,n],[e,r]]},scale:function(n){return arguments.length?(h=_o((u=+n)*f,u*l,s,c),t()):u},translate:function(n){return arguments.length?(h=_o(u*f,u*l,s=+n[0],c=+n[1]),t()):[s,c]},reflectX:function(n){return arguments.length?(h=_o(u*(f=n?-1:1),u*l,s,c),t()):f<0},reflectY:function(n){return arguments.length?(h=_o(u*f,u*(l=n?-1:1),s,c),t()):l<0},fitExtent:function(t,n){return Ki(a,t,n)},fitSize:function(t,n){return Qi(a,t,n)}}};mo.invert=co(mr);var C_=function(){return eo(mo).scale(249.5).clipAngle(90+Ev)};xo.invert=co(function(t){return 2*Ov(t)});var R_=function(){return eo(xo).scale(250).clipAngle(142)};bo.invert=function(t,n){return[-n,2*Ov(zv(t))-Tv]};var P_=function(){var t=lo(bo),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):(t=n(),[t[1],-t[0]])},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):(t=e(),[t[0],t[1],t[2]-90])},e([0,0,90]).scale(159.155)},O_=function(){function t(t){var o,a=0;t.eachAfter(function(t){var e=t.children;e?(t.x=Mo(e),t.y=Eo(e)):(t.x=o?a+=n(t,o):0,t.y=0,o=t)});var u=To(t),s=ko(t),c=u.x-n(u,s)/2,f=s.x+n(s,u)/2;return t.eachAfter(i?function(n){n.x=(n.x-t.x)*e,n.y=(t.y-n.y)*r}:function(n){n.x=(n.x-c)/(f-c)*e,n.y=(1-(t.y?n.y/t.y:1))*r})}var n=wo,e=1,r=1,i=!1;return t.separation=function(e){return arguments.length?(n=e,t):n},t.size=function(n){return arguments.length?(i=!1,e=+n[0],r=+n[1],t):i?null:[e,r]},t.nodeSize=function(n){return arguments.length?(i=!0,e=+n[0],r=+n[1],t):i?[e,r]:null},t},L_=function(){return this.eachAfter(No)},U_=function(t){var n,e,r,i,o=this,a=[o];do{for(n=a.reverse(),a=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)a.push(e[r])}while(a.length);return this},B_=function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},z_=function(t){for(var n,e,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=a.pop();)t(i);return this},D_=function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e})},I_=function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})},q_=function(t){for(var n=this,e=Co(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},Y_=function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},j_=function(){var t=[];return this.each(function(n){t.push(n)}),t},F_=function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t},H_=function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n};Bo.prototype=Ro.prototype={constructor:Bo,count:L_,each:U_,eachAfter:z_,eachBefore:B_,sum:D_,sort:I_,path:q_,ancestors:Y_,descendants:j_,leaves:F_,links:H_,copy:Po};var X_=function(t){for(var n=(t=t.slice()).length,e=null,r=e;n;){var i=new zo(t[n-1]);r=r?r.next=i:e=i,t[void 0]=t[--n]}return{head:e,tail:r}},W_=function(t){return Io(X_(t),[])},V_=function(t){return Vo(t),t},$_=function(t){return function(){return t}},Z_=function(){function t(t){return t.x=e/2,t.y=r/2,n?t.eachBefore(Ko(n)).eachAfter(Qo(i,.5)).eachBefore(ta(1)):t.eachBefore(Ko(Jo)).eachAfter(Qo(Go,1)).eachAfter(Qo(i,t.r/Math.min(e,r))).eachBefore(ta(Math.min(e,r)/(2*t.r))),t}var n=null,e=1,r=1,i=Go;return t.radius=function(e){return arguments.length?(n=$o(e),t):n},t.size=function(n){return arguments.length?(e=+n[0],r=+n[1],t):[e,r]},t.padding=function(n){return arguments.length?(i="function"==typeof n?n:$_(+n),t):i},t},G_=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},J_=function(t,n,e,r,i){for(var o,a=t.children,u=-1,s=a.length,c=t.value&&(r-n)/t.value;++u<s;)o=a[u],o.y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*c},K_=function(){function t(t){var a=t.height+1;return t.x0=t.y0=i,t.x1=e,t.y1=r/a,t.eachBefore(n(r,a)),o&&t.eachBefore(G_),t}function n(t,n){return function(e){e.children&&J_(e,e.x0,t*(e.depth+1)/n,e.x1,t*(e.depth+2)/n);var r=e.x0,o=e.y0,a=e.x1-i,u=e.y1-i;a<r&&(r=a=(r+a)/2),u<o&&(o=u=(o+u)/2),e.x0=r,e.y0=o,e.x1=a,e.y1=u}}var e=1,r=1,i=0,o=!1;return t.round=function(n){return arguments.length?(o=!!n,t):o},t.size=function(n){return arguments.length?(e=+n[0],r=+n[1],t):[e,r]},t.padding=function(n){return arguments.length?(i=+n,t):i},t},Q_="$",tm={depth:-1},nm={},em=function(){function t(t){var r,i,o,a,u,s,c,f=t.length,l=new Array(f),h={};for(i=0;i<f;++i)r=t[i],u=l[i]=new Bo(r),null!=(s=n(r,i,t))&&(s+="")&&(c=Q_+(u.id=s),h[c]=c in h?nm:u);for(i=0;i<f;++i)if(u=l[i],null!=(s=e(t[i],i,t))&&(s+="")){if(!(a=h[Q_+s]))throw new Error("missing: "+s);if(a===nm)throw new Error("ambiguous: "+s);a.children?a.children.push(u):a.children=[u],u.parent=a}else{if(o)throw new Error("multiple roots");o=u}if(!o)throw new Error("no root");if(o.parent=tm,o.eachBefore(function(t){t.depth=t.parent.depth+1,--f}).eachBefore(Uo),o.parent=null,f>0)throw new Error("cycle");return o}var n=na,e=ea;return t.id=function(e){return arguments.length?(n=Zo(e),t):n},t.parentId=function(n){return arguments.length?(e=Zo(n),t):e},t};ca.prototype=Object.create(Bo.prototype);var rm=function(){function t(t){var r=fa(t);if(r.eachAfter(n),r.parent.m=-r.z,r.eachBefore(e),s)t.eachBefore(i);else{var c=t,f=t,l=t;t.eachBefore(function(t){t.x<c.x&&(c=t),t.x>f.x&&(f=t),t.depth>l.depth&&(l=t)});var h=c===f?1:o(c,f)/2,p=h-c.x,d=a/(f.x+h+p),g=u/(l.depth||1);t.eachBefore(function(t){t.x=(t.x+p)*d,t.y=t.depth*g})}return t}function n(t){var n=t.children,e=t.parent.children,i=t.i?e[t.i-1]:null;if(n){ua(t);var a=(n[0].z+n[n.length-1].z)/2;i?(t.z=i.z+o(t._,i._),t.m=t.z-a):t.z=a}else i&&(t.z=i.z+o(t._,i._));t.parent.A=r(t,i,t.parent.A||e[0])}function e(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function r(t,n,e){if(n){for(var r,i=t,a=t,u=n,s=i.parent.children[0],c=i.m,f=a.m,l=u.m,h=s.m;u=oa(u),i=ia(i),u&&i;)s=ia(s),a=oa(a),a.a=t,r=u.z+l-i.z-c+o(u._,i._),r>0&&(aa(sa(u,t,e),t,r),c+=r,f+=r),l+=u.m,c+=i.m,h+=s.m,f+=a.m;u&&!oa(a)&&(a.t=u,a.m+=l-f),i&&!ia(s)&&(s.t=i,s.m+=c-h,e=t)}return e}function i(t){t.x*=a,t.y=t.depth*u}var o=ra,a=1,u=1,s=null;return t.separation=function(n){return arguments.length?(o=n,t):o},t.size=function(n){return arguments.length?(s=!1,a=+n[0],u=+n[1],t):s?null:[a,u]},t.nodeSize=function(n){return arguments.length?(s=!0,a=+n[0],u=+n[1],t):s?[a,u]:null},t},im=function(t,n,e,r,i){for(var o,a=t.children,u=-1,s=a.length,c=t.value&&(i-e)/t.value;++u<s;)o=a[u],o.x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*c},om=(1+Math.sqrt(5))/2,am=function t(n){function e(t,e,r,i,o){la(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(om),um=function(){function t(t){return t.x0=t.y0=0,t.x1=i,t.y1=o,t.eachBefore(n),a=[0],r&&t.eachBefore(G_),t}function n(t){var n=a[t.depth],r=t.x0+n,i=t.y0+n,o=t.x1-n,h=t.y1-n;o<r&&(r=o=(r+o)/2),h<i&&(i=h=(i+h)/2),t.x0=r,t.y0=i,t.x1=o,t.y1=h,t.children&&(n=a[t.depth+1]=u(t)/2,r+=l(t)-n,i+=s(t)-n,o-=c(t)-n,h-=f(t)-n,o<r&&(r=o=(r+o)/2),h<i&&(i=h=(i+h)/2),e(t,r,i,o,h))}var e=am,r=!1,i=1,o=1,a=[0],u=Go,s=Go,c=Go,f=Go,l=Go;return t.round=function(n){return arguments.length?(r=!!n,t):r},t.size=function(n){return arguments.length?(i=+n[0],o=+n[1],t):[i,o]},t.tile=function(n){return arguments.length?(e=Zo(n),t):e},t.padding=function(n){return arguments.length?t.paddingInner(n).paddingOuter(n):t.paddingInner()},t.paddingInner=function(n){return arguments.length?(u="function"==typeof n?n:$_(+n),t):u},t.paddingOuter=function(n){return arguments.length?t.paddingTop(n).paddingRight(n).paddingBottom(n).paddingLeft(n):t.paddingTop()},t.paddingTop=function(n){return arguments.length?(s="function"==typeof n?n:$_(+n),t):s},t.paddingRight=function(n){return arguments.length?(c="function"==typeof n?n:$_(+n),t):c},t.paddingBottom=function(n){return arguments.length?(f="function"==typeof n?n:$_(+n),t):f},t.paddingLeft=function(n){return arguments.length?(l="function"==typeof n?n:$_(+n),t):l},t},sm=function(t,n,e,r,i){function o(t,n,e,r,i,a,u){if(t>=n-1){var c=s[t];return c.x0=r,c.y0=i,c.x1=a,c.y1=u,void 0}for(var l=f[t],h=e/2+l,p=t+1,d=n-1;p<d;){var g=p+d>>>1;f[g]<h?p=g+1:d=g}h-f[p-1]<f[p]-h&&t+1<p&&--p;var v=f[p]-l,y=e-v;if(a-r>u-i){var _=(r*y+a*v)/e;o(t,p,v,r,i,_,u),o(p,n,y,_,i,a,u)}else{var m=(i*y+u*v)/e;o(t,p,v,r,i,a,m),o(p,n,y,r,m,a,u)}}var a,u,s=t.children,c=s.length,f=new Array(c+1);for(f[0]=u=a=0;a<c;++a)f[a+1]=u+=s[a].value;o(0,c,t.value,n,e,r,i)},cm=function(t,n,e,r,i){(1&t.depth?im:J_)(t,n,e,r,i)},fm=function t(n){function e(t,e,r,i,o){if((a=t._squarify)&&a.ratio===n)for(var a,u,s,c,f,l=-1,h=a.length,p=t.value;++l<h;){for(u=a[l],s=u.children,c=u.value=0,f=s.length;c<f;++c)u.value+=s[c].value;u.dice?J_(u,e,r,i,r+=(o-r)*u.value/p):im(u,e,r,e+=(i-e)*u.value/p,o),p-=u.value}else t._squarify=a=la(n,t,e,r,i,o),a.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(om),lm=function(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2},hm=function(t){for(var n,e,r=-1,i=t.length,o=0,a=0,u=t[i-1],s=0;++r<i;)n=u,u=t[r],s+=e=n[0]*u[1]-u[0]*n[1],o+=(n[0]+u[0])*e,a+=(n[1]+u[1])*e;return s*=3,[o/s,a/s]},pm=function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])},dm=function(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(ha),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=pa(r),a=pa(i),u=a[0]===o[0],s=a[a.length-1]===o[o.length-1],c=[];for(n=o.length-1;n>=0;--n)c.push(t[r[o[n]][2]]);for(n=+u;n<a.length-s;++n)c.push(t[r[a[n]][2]]);return c},gm=function(t,n){for(var e,r,i=t.length,o=t[i-1],a=n[0],u=n[1],s=o[0],c=o[1],f=!1,l=0;l<i;++l)o=t[l],e=o[0],r=o[1],r>u!=c>u&&a<(s-e)*(u-r)/(c-r)+e&&(f=!f),s=e,c=r;return f},vm=function(t){for(var n,e,r=-1,i=t.length,o=t[i-1],a=o[0],u=o[1],s=0;++r<i;)n=a,e=u,o=t[r],a=o[0],u=o[1],n-=a,e-=u,s+=Math.sqrt(n*n+e*e);return s},ym=[].slice,_m={};da.prototype=xa.prototype={constructor:da,defer:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var n=ym.call(arguments,1);return n.push(t),++this._waiting,this._tasks.push(n),ga(this),this},abort:function(){return null==this._error&&_a(this,new Error("abort")),this},await:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(n,e){t.apply(null,[n].concat(e))},ma(this),this},awaitAll:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=t,ma(this),this}};var mm=function(){return Math.random()},xm=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(mm),bm=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(mm),wm=function t(n){function e(){var t=bm.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(mm),Mm=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(mm),Am=function t(n){function e(t){var e=Mm.source(n)(t);return function(){return e()/t}}return e.source=t,e}(mm),Em=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(mm),Sm=function(t,n){function e(t){var n,e=c.status;if(!e&&wa(c)||e>=200&&e<300||304===e){if(o)try{n=o.call(r,c)}catch(t){return void u.call("error",r,t)}else n=c;u.call("load",r,n)}else u.call("error",r,t)}var r,i,o,a,u=g("beforesend","progress","load","error"),s=Fe(),c=new XMLHttpRequest,f=null,l=null,h=0;if("undefined"==typeof XDomainRequest||"withCredentials"in c||!/^(http(s)?:)?\/\//.test(t)||(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=c.ontimeout=e:c.onreadystatechange=function(t){c.readyState>3&&e(t)},c.onprogress=function(t){u.call("progress",r,t)},r={header:function(t,n){return t=(t+"").toLowerCase(),arguments.length<2?s.get(t):(null==n?s.remove(t):s.set(t,n+""),r)},mimeType:function(t){return arguments.length?(i=null==t?null:t+"",r):i},responseType:function(t){return arguments.length?(a=t,r):a},timeout:function(t){return arguments.length?(h=+t,r):h},user:function(t){return arguments.length<1?f:(f=null==t?null:t+"",r)},password:function(t){return arguments.length<1?l:(l=null==t?null:t+"",r)},response:function(t){return o=t,r},get:function(t,n){return r.send("GET",t,n)},post:function(t,n){return r.send("POST",t,n)},send:function(n,e,o){return c.open(n,t,!0,f,l),null==i||s.has("accept")||s.set("accept",i+",*/*"),c.setRequestHeader&&s.each(function(t,n){c.setRequestHeader(n,t)}),null!=i&&c.overrideMimeType&&c.overrideMimeType(i),null!=a&&(c.responseType=a),h>0&&(c.timeout=h),null==o&&"function"==typeof e&&(o=e,e=null),null!=o&&1===o.length&&(o=ba(o)),null!=o&&r.on("error",o).on("load",function(t){o(null,t)}),u.call("beforesend",r,c),c.send(null==e?null:e),r},abort:function(){return c.abort(),r},on:function(){var t=u.on.apply(u,arguments);return t===u?r:t}},null!=n){if("function"!=typeof n)throw new Error("invalid callback: "+n);return r.get(n)}return r},Tm=function(t,n){return function(e,r){var i=Sm(e).mimeType(t).response(n);if(null!=r){if("function"!=typeof r)throw new Error("invalid callback: "+r);return i.get(r)}return i}},km=Tm("text/html",function(t){return document.createRange().createContextualFragment(t.responseText)}),Nm=Tm("application/json",function(t){return JSON.parse(t.responseText)}),Cm=Tm("text/plain",function(t){return t.responseText}),Rm=Tm("application/xml",function(t){var n=t.responseXML;if(!n)throw new Error("parse error");return n}),Pm=function(t,n){return function(e,r,i){arguments.length<3&&(i=r,r=null);var o=Sm(e).mimeType(t);return o.row=function(t){return arguments.length?o.response(Ma(n,r=t)):r},o.row(r),i?o.get(i):o}},Om=Pm("text/csv",Zd),Lm=Pm("text/tab-separated-values",tg),Um=Array.prototype,Bm=Um.map,zm=Um.slice,Dm={name:"implicit"},Im=function(t){return function(){return t}},qm=function(t){return+t},Ym=[0,1],jm=function(n,e,r){var o,a=n[0],u=n[n.length-1],s=i(a,u,null==e?10:e);switch(r=pr(null==r?",f":r),r.type){case"s":var c=Math.max(Math.abs(a),Math.abs(u));return null!=r.precision||isNaN(o=Hg(s,c))||(r.precision=o),t.formatPrefix(r,c);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(o=Xg(s,Math.max(Math.abs(a),Math.abs(u))))||(r.precision=o-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(o=Fg(s))||(r.precision=o-2*("%"===r.type))}return t.format(r)},Fm=function(t,n){t=t.slice();var e,r=0,i=t.length-1,o=t[r],a=t[i];return a<o&&(e=r,r=i,i=e,e=o,o=a,a=e),t[r]=n.floor(o),t[i]=n.ceil(a),t},Hm=new Date,Xm=new Date,Wm=Ja(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});Wm.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ja(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):Wm:null};var Vm=Wm.range,$m=6e4,Zm=6048e5,Gm=Ja(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),Jm=Gm.range,Km=Ja(function(t){t.setTime(Math.floor(t/$m)*$m)},function(t,n){t.setTime(+t+n*$m)},function(t,n){return(n-t)/$m},function(t){return t.getMinutes()}),Qm=Km.range,tx=Ja(function(t){var n=t.getTimezoneOffset()*$m%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()}),nx=tx.range,ex=Ja(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*$m)/864e5},function(t){return t.getDate()-1}),rx=ex.range,ix=Ka(0),ox=Ka(1),ax=Ka(2),ux=Ka(3),sx=Ka(4),cx=Ka(5),fx=Ka(6),lx=ix.range,hx=ox.range,px=ax.range,dx=ux.range,gx=sx.range,vx=cx.range,yx=fx.range,_x=Ja(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),mx=_x.range,xx=Ja(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()});xx.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ja(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var bx=xx.range,wx=Ja(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*$m)},function(t,n){return(n-t)/$m},function(t){return t.getUTCMinutes()}),Mx=wx.range,Ax=Ja(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()}),Ex=Ax.range,Sx=Ja(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1}),Tx=Sx.range,kx=Qa(0),Nx=Qa(1),Cx=Qa(2),Rx=Qa(3),Px=Qa(4),Ox=Qa(5),Lx=Qa(6),Ux=kx.range,Bx=Nx.range,zx=Cx.range,Dx=Rx.range,Ix=Px.range,qx=Ox.range,Yx=Lx.range,jx=Ja(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Fx=jx.range,Hx=Ja(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()});Hx.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ja(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var Xx,Wx=Hx.range,Vx={"-":"",_:" ",0:"0"},$x=/^\s*\d+/,Zx=/^%/,Gx=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;Ju({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Jx=Date.prototype.toISOString?Ku:t.utcFormat("%Y-%m-%dT%H:%M:%S.%LZ"),Kx=+new Date("2000-01-01T00:00:00.000Z")?Qu:t.utcParse("%Y-%m-%dT%H:%M:%S.%LZ"),Qx=1e3,tb=60*Qx,nb=60*tb,eb=24*nb,rb=7*eb,ib=30*eb,ob=365*eb,ab=function(){return es(xx,_x,ix,ex,tx,Km,Gm,Wm,t.timeFormat).domain([new Date(2e3,0,1),new Date(2e3,0,2)])},ub=function(){return es(Hx,jx,kx,Sx,Ax,wx,Gm,Wm,t.utcFormat).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])},sb=function(t){return t.match(/.{6}/g).map(function(t){return"#"+t})},cb=sb("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),fb=sb("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),lb=sb("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),hb=sb("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),pb=Zh($t(300,.5,0),$t(-240,.5,1)),db=Zh($t(-100,.75,.35),$t(80,1.5,.8)),gb=Zh($t(260,.75,.35),$t(80,1.5,.8)),vb=$t(),yb=function(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return vb.h=360*t-100,vb.s=1.5-1.5*n,vb.l=.8-.9*n,vb+""},_b=rs(sb("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),mb=rs(sb("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),xb=rs(sb("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),bb=rs(sb("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),wb=function(t){return function(){return t}},Mb=Math.abs,Ab=Math.atan2,Eb=Math.cos,Sb=Math.max,Tb=Math.min,kb=Math.sin,Nb=Math.sqrt,Cb=1e-12,Rb=Math.PI,Pb=Rb/2,Ob=2*Rb,Lb=function(){function t(){var t,c,f=+n.apply(this,arguments),l=+e.apply(this,arguments),h=o.apply(this,arguments)-Pb,p=a.apply(this,arguments)-Pb,d=Mb(p-h),g=p>h;if(s||(s=t=Be()),l<f&&(c=l,l=f,f=c),l>Cb)if(d>Ob-Cb)s.moveTo(l*Eb(h),l*kb(h)),s.arc(0,0,l,h,p,!g),f>Cb&&(s.moveTo(f*Eb(p),f*kb(p)),s.arc(0,0,f,p,h,g));else{var v,y,_=h,m=p,x=h,b=p,w=d,M=d,A=u.apply(this,arguments)/2,E=A>Cb&&(i?+i.apply(this,arguments):Nb(f*f+l*l)),S=Tb(Mb(l-f)/2,+r.apply(this,arguments)),T=S,k=S;if(E>Cb){var N=as(E/f*kb(A)),C=as(E/l*kb(A));(w-=2*N)>Cb?(N*=g?1:-1,x+=N,b-=N):(w=0,x=b=(h+p)/2),(M-=2*C)>Cb?(C*=g?1:-1,_+=C,m-=C):(M=0,_=m=(h+p)/2)}var R=l*Eb(_),P=l*kb(_),O=f*Eb(b),L=f*kb(b);if(S>Cb){var U=l*Eb(m),B=l*kb(m),z=f*Eb(x),D=f*kb(x);if(d<Rb){var I=w>Cb?hs(R,P,z,D,U,B,O,L):[O,L],q=R-I[0],Y=P-I[1],j=U-I[0],F=B-I[1],H=1/kb(os((q*j+Y*F)/(Nb(q*q+Y*Y)*Nb(j*j+F*F)))/2),X=Nb(I[0]*I[0]+I[1]*I[1]);T=Tb(S,(f-X)/(H-1)),k=Tb(S,(l-X)/(H+1))}}M>Cb?k>Cb?(v=ps(z,D,R,P,l,k,g),y=ps(U,B,O,L,l,k,g),s.moveTo(v.cx+v.x01,v.cy+v.y01),k<S?s.arc(v.cx,v.cy,k,Ab(v.y01,v.x01),Ab(y.y01,y.x01),!g):(s.arc(v.cx,v.cy,k,Ab(v.y01,v.x01),Ab(v.y11,v.x11),!g),s.arc(0,0,l,Ab(v.cy+v.y11,v.cx+v.x11),Ab(y.cy+y.y11,y.cx+y.x11),!g),s.arc(y.cx,y.cy,k,Ab(y.y11,y.x11),Ab(y.y01,y.x01),!g))):(s.moveTo(R,P),s.arc(0,0,l,_,m,!g)):s.moveTo(R,P),f>Cb&&w>Cb?T>Cb?(v=ps(O,L,U,B,f,-T,g),y=ps(R,P,z,D,f,-T,g),s.lineTo(v.cx+v.x01,v.cy+v.y01),T<S?s.arc(v.cx,v.cy,T,Ab(v.y01,v.x01),Ab(y.y01,y.x01),!g):(s.arc(v.cx,v.cy,T,Ab(v.y01,v.x01),Ab(v.y11,v.x11),!g),s.arc(0,0,f,Ab(v.cy+v.y11,v.cx+v.x11),Ab(y.cy+y.y11,y.cx+y.x11),g),s.arc(y.cx,y.cy,T,Ab(y.y11,y.x11),Ab(y.y01,y.x01),!g))):s.arc(0,0,f,b,x,g):s.lineTo(O,L)}else s.moveTo(0,0);if(s.closePath(),t)return s=null,t+""||null}var n=us,e=ss,r=wb(0),i=null,o=cs,a=fs,u=ls,s=null;return t.centroid=function(){var t=(+n.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+o.apply(this,arguments)+ +a.apply(this,arguments))/2-Rb/2;return[Eb(r)*t,kb(r)*t]},t.innerRadius=function(e){return arguments.length?(n="function"==typeof e?e:wb(+e),t):n},t.outerRadius=function(n){return arguments.length?(e="function"==typeof n?n:wb(+n),t):e},t.cornerRadius=function(n){return arguments.length?(r="function"==typeof n?n:wb(+n),t):r},t.padRadius=function(n){return arguments.length?(i=null==n?null:"function"==typeof n?n:wb(+n),t):i},t.startAngle=function(n){return arguments.length?(o="function"==typeof n?n:wb(+n),t):o},t.endAngle=function(n){return arguments.length?(a="function"==typeof n?n:wb(+n),t):a},t.padAngle=function(n){return arguments.length?(u="function"==typeof n?n:wb(+n),t):u},t.context=function(n){return arguments.length?(s=null==n?null:n,t):s},t};ds.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var Ub=function(t){return new ds(t)},Bb=function(){function t(t){var u,s,c,f=t.length,l=!1;for(null==i&&(a=o(c=Be())),u=0;u<=f;++u)!(u<f&&r(s=t[u],u,t))===l&&((l=!l)?a.lineStart():a.lineEnd()),l&&a.point(+n(s,u,t),+e(s,u,t));if(c)return a=null,c+""||null}var n=gs,e=vs,r=wb(!0),i=null,o=Ub,a=null;return t.x=function(e){return arguments.length?(n="function"==typeof e?e:wb(+e),t):n},t.y=function(n){return arguments.length?(e="function"==typeof n?n:wb(+n),t):e},t.defined=function(n){return arguments.length?(r="function"==typeof n?n:wb(!!n),t):r},t.curve=function(n){return arguments.length?(o=n,null!=i&&(a=o(i)),t):o},t.context=function(n){return arguments.length?(null==n?i=a=null:a=o(i=n),t):i},t},zb=function(){function t(t){var n,f,l,h,p,d=t.length,g=!1,v=new Array(d),y=new Array(d);for(null==u&&(c=s(p=Be())),n=0;n<=d;++n){if(!(n<d&&a(h=t[n],n,t))===g)if(g=!g)f=n,c.areaStart(),c.lineStart();else{for(c.lineEnd(),c.lineStart(),l=n-1;l>=f;--l)c.point(v[l],y[l]);c.lineEnd(),c.areaEnd()}g&&(v[n]=+e(h,n,t),y[n]=+i(h,n,t),c.point(r?+r(h,n,t):v[n],o?+o(h,n,t):y[n]))}if(p)return c=null,p+""||null}function n(){return Bb().defined(a).curve(s).context(u)}var e=gs,r=null,i=wb(0),o=vs,a=wb(!0),u=null,s=Ub,c=null;return t.x=function(n){return arguments.length?(e="function"==typeof n?n:wb(+n),r=null,t):e},t.x0=function(n){return arguments.length?(e="function"==typeof n?n:wb(+n),t):e},t.x1=function(n){return arguments.length?(r=null==n?null:"function"==typeof n?n:wb(+n),t):r},t.y=function(n){return arguments.length?(i="function"==typeof n?n:wb(+n),o=null,t):i},t.y0=function(n){return arguments.length?(i="function"==typeof n?n:wb(+n),t):i},t.y1=function(n){return arguments.length?(o=null==n?null:"function"==typeof n?n:wb(+n),t):o},t.lineX0=t.lineY0=function(){return n().x(e).y(i)},t.lineY1=function(){return n().x(e).y(o)},t.lineX1=function(){return n().x(r).y(i)},t.defined=function(n){return arguments.length?(a="function"==typeof n?n:wb(!!n),t):a},t.curve=function(n){return arguments.length?(s=n,null!=u&&(c=s(u)),t):s},t.context=function(n){return arguments.length?(null==n?u=c=null:c=s(u=n),t):u},t},Db=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},Ib=function(t){return t},qb=function(){function t(t){var u,s,c,f,l,h=t.length,p=0,d=new Array(h),g=new Array(h),v=+i.apply(this,arguments),y=Math.min(Ob,Math.max(-Ob,o.apply(this,arguments)-v)),_=Math.min(Math.abs(y)/h,a.apply(this,arguments)),m=_*(y<0?-1:1);for(u=0;u<h;++u)(l=g[d[u]=u]=+n(t[u],u,t))>0&&(p+=l);for(null!=e?d.sort(function(t,n){return e(g[t],g[n])}):null!=r&&d.sort(function(n,e){return r(t[n],t[e])}),u=0,c=p?(y-h*m)/p:0;u<h;++u,v=f)s=d[u],l=g[s],f=v+(l>0?l*c:0)+m,g[s]={data:t[s],index:u,value:l,startAngle:v,endAngle:f,padAngle:_};return g}var n=Ib,e=Db,r=null,i=wb(0),o=wb(Ob),a=wb(0);return t.value=function(e){return arguments.length?(n="function"==typeof e?e:wb(+e),t):n},t.sortValues=function(n){return arguments.length?(e=n,r=null,t):e},t.sort=function(n){return arguments.length?(r=n,e=null,t):r},t.startAngle=function(n){return arguments.length?(i="function"==typeof n?n:wb(+n),t):i},t.endAngle=function(n){return arguments.length?(o="function"==typeof n?n:wb(+n),t):o},t.padAngle=function(n){return arguments.length?(a="function"==typeof n?n:wb(+n),t):a},t},Yb=_s(Ub);ys.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var jb=function(){return ms(Bb().curve(Yb))},Fb=function(){var t=zb().curve(Yb),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return ms(e())},delete t.lineX0,t.lineEndAngle=function(){return ms(r())},delete t.lineX1,t.lineInnerRadius=function(){return ms(i())},delete t.lineY0,t.lineOuterRadius=function(){return ms(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(_s(t)):n()._curve},t},Hb=Array.prototype.slice,Xb=function(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]},Wb={draw:function(t,n){var e=Math.sqrt(n/Rb);t.moveTo(e,0),t.arc(0,0,e,0,Ob)}},Vb={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}},$b=Math.sqrt(1/3),Zb=2*$b,Gb={draw:function(t,n){var e=Math.sqrt(n/Zb),r=e*$b;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}},Jb=Math.sin(Rb/10)/Math.sin(7*Rb/10),Kb=Math.sin(Ob/10)*Jb,Qb=-Math.cos(Ob/10)*Jb,tw={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=Kb*e,i=Qb*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var a=Ob*o/5,u=Math.cos(a),s=Math.sin(a);t.lineTo(s*e,-u*e),t.lineTo(u*r-s*i,s*r+u*i)}t.closePath()}},nw={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}},ew=Math.sqrt(3),rw={draw:function(t,n){var e=-Math.sqrt(n/(3*ew));t.moveTo(0,2*e),t.lineTo(-ew*e,-e),t.lineTo(ew*e,-e),t.closePath()}},iw=-.5,ow=Math.sqrt(3)/2,aw=1/Math.sqrt(12),uw=3*(aw/2+1),sw={draw:function(t,n){var e=Math.sqrt(n/uw),r=e/2,i=e*aw,o=r,a=e*aw+e,u=-o,s=a;t.moveTo(r,i),t.lineTo(o,a),t.lineTo(u,s),t.lineTo(iw*r-ow*i,ow*r+iw*i),t.lineTo(iw*o-ow*a,ow*o+iw*a),t.lineTo(iw*u-ow*s,ow*u+iw*s),t.lineTo(iw*r+ow*i,iw*i-ow*r),t.lineTo(iw*o+ow*a,iw*a-ow*o),t.lineTo(iw*u+ow*s,iw*s-ow*u),t.closePath()}},cw=[Wb,Vb,Gb,nw,tw,rw,sw],fw=function(){function t(){var t;if(r||(r=t=Be()),n.apply(this,arguments).draw(r,+e.apply(this,arguments)),t)return r=null,t+""||null}var n=wb(Wb),e=wb(64),r=null;return t.type=function(e){return arguments.length?(n="function"==typeof e?e:wb(e),t):n},t.size=function(n){return arguments.length?(e="function"==typeof n?n:wb(+n),t):e},t.context=function(n){return arguments.length?(r=null==n?null:n,t):r},t},lw=function(){};Cs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Ns(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Ns(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var hw=function(t){return new Cs(t)};Rs.prototype={areaStart:lw,areaEnd:lw,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Ns(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var pw=function(t){return new Rs(t)};Ps.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Ns(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var dw=function(t){return new Ps(t)};Os.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],a=t[e]-i,u=n[e]-o,s=-1;++s<=e;)r=s/e,this._basis.point(this._beta*t[s]+(1-this._beta)*(i+r*a),this._beta*n[s]+(1-this._beta)*(o+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var gw=function t(n){function e(t){return 1===n?new Cs(t):new Os(t,n)}return e.beta=function(n){return t(+n)},e}(.85);Us.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Ls(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:Ls(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var vw=function t(n){function e(t){return new Us(t,n)}return e.tension=function(n){return t(+n)},e}(0);Bs.prototype={areaStart:lw,areaEnd:lw,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Ls(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var yw=function t(n){function e(t){return new Bs(t,n)}return e.tension=function(n){return t(+n)},e}(0);zs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ls(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var _w=function t(n){function e(t){return new zs(t,n)}return e.tension=function(n){return t(+n)},e}(0);Is.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Ds(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var mw=function t(n){function e(t){return n?new Is(t,n):new Us(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);qs.prototype={areaStart:lw,areaEnd:lw,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Ds(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var xw=function t(n){function e(t){return n?new qs(t,n):new Bs(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);Ys.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ds(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var bw=function t(n){function e(t){return n?new Ys(t,n):new zs(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);js.prototype={areaStart:lw,areaEnd:lw,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};var ww=function(t){return new js(t)};Vs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Ws(this,this._t0,Xs(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(t=+t,n=+n,t!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Ws(this,Xs(this,e=Hs(this,t,n)),e);break;default:Ws(this,this._t0,e=Hs(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},($s.prototype=Object.create(Vs.prototype)).point=function(t,n){Vs.prototype.point.call(this,n,t)},Zs.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},Ks.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=Qs(t),i=Qs(n),o=0,a=1;a<e;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],n[a]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var Mw=function(t){return new Ks(t)};tc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var Aw=function(t){return new tc(t,.5)},Ew=function(t,n){if((i=t.length)>1)for(var e,r,i,o=1,a=t[n[0]],u=a.length;o<i;++o)for(r=a,a=t[n[o]],e=0;e<u;++e)a[e][1]+=a[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]},Sw=function(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e},Tw=function(){function t(t){var o,a,u=n.apply(this,arguments),s=t.length,c=u.length,f=new Array(c);for(o=0;o<c;++o){for(var l,h=u[o],p=f[o]=new Array(s),d=0;d<s;++d)p[d]=l=[0,+i(t[d],h,d,t)],l.data=t[d];p.key=h}for(o=0,a=e(f);o<c;++o)f[a[o]].index=o;return r(f,a),f}var n=wb([]),e=Sw,r=Ew,i=rc;return t.keys=function(e){return arguments.length?(n="function"==typeof e?e:wb(Hb.call(e)),t):n},t.value=function(n){return arguments.length?(i="function"==typeof n?n:wb(+n),t):i},t.order=function(n){return arguments.length?(e=null==n?Sw:"function"==typeof n?n:wb(Hb.call(n)),t):e},t.offset=function(n){return arguments.length?(r=null==n?Ew:n,t):r},t},kw=function(t,n){if((r=t.length)>0){for(var e,r,i,o=0,a=t[0].length;o<a;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}Ew(t,n)}},Nw=function(t,n){if((u=t.length)>1)for(var e,r,i,o,a,u,s=0,c=t[n[0]].length;s<c;++s)for(o=a=0,e=0;e<u;++e)(i=(r=t[n[e]][s])[1]-r[0])>=0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=a,r[0]=a+=i):r[0]=o},Cw=function(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var a=0,u=0;a<e;++a)u+=t[a][r][1]||0;i[r][1]+=i[r][0]=-u/2}Ew(t,n)}},Rw=function(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,a=1;a<r;++a){for(var u=0,s=0,c=0;u<i;++u){for(var f=t[n[u]],l=f[a][1]||0,h=f[a-1][1]||0,p=(l-h)/2,d=0;d<u;++d){var g=t[n[d]];p+=(g[a][1]||0)-(g[a-1][1]||0)}s+=l,c+=p*l}e[a-1][1]+=e[a-1][0]=o,s&&(o-=c/s)}e[a-1][1]+=e[a-1][0]=o,Ew(t,n)}},Pw=function(t){var n=t.map(ic);return Sw(t).sort(function(t,e){return n[t]-n[e]})},Ow=function(t){return Pw(t).reverse()},Lw=function(t){var n,e,r=t.length,i=t.map(ic),o=Sw(t).sort(function(t,n){return i[n]-i[t]}),a=0,u=0,s=[],c=[];for(n=0;n<r;++n)e=o[n],a<u?(a+=i[e],s.push(e)):(u+=i[e],c.push(e));return c.reverse().concat(s)},Uw=function(t){return Sw(t).reverse()},Bw=function(t){return function(){return t}};uc.prototype={constructor:uc,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=lc(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)r=e.U,e===r.L?(i=r.R,i&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(cc(this,e),t=e,e=t.U),e.C=!1,r.C=!0,fc(this,r))):(i=r.L,i&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(fc(this,e),t=e,e=t.U),e.C=!1,r.C=!0,cc(this,r))),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,a=t.R;if(e=o?a?lc(a):o:a,i?i.L===t?i.L=e:i.R=e:this._=e,o&&a?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==a?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=a,a.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r){if(t&&t.C)return void(t.C=!1);do{if(t===this._)break;if(t===i.L){if(n=i.R,n.C&&(n.C=!1,i.C=!0,cc(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,fc(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,cc(this,i),t=this._;break}}else if(n=i.L,n.C&&(n.C=!1,i.C=!0,fc(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,cc(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,fc(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var zw,Dw,Iw,qw,Yw,jw=[],Fw=[],Hw=1e-6,Xw=1e-12;Bc.prototype={constructor:Bc,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return xc(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,r){if(o=(i=e.halfedges).length)for(var i,o,a,u=e.site,s=-1,c=n[i[o-1]],f=c.left===u?c.right:c.left;++s<o;)a=f,c=n[i[s]],f=c.left===u?c.right:c.left,a&&f&&r<a.index&&r<f.index&&Lc(u,a,f)<0&&t.push([u.data,a.data,f.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var r,i,o=this,a=o._found||0,u=o.cells.length;!(i=o.cells[a]);)if(++a>=u)return null;var s=t-i.site[0],c=n-i.site[1],f=s*s+c*c;do{i=o.cells[r=a],a=null,i.halfedges.forEach(function(e){var r=o.edges[e],u=r.left;if(u!==i.site&&u||(u=r.right)){var s=t-u[0],c=n-u[1],l=s*s+c*c;l<f&&(f=l,a=u.index)}})}while(null!==a);return o._found=r,null==e||f<=e*e?i.site:null}};var Ww=function(){function t(t){return new Bc(t.map(function(r,i){var o=[Math.round(n(r,i,t)/Hw)*Hw,Math.round(e(r,i,t)/Hw)*Hw];return o.index=i,o.data=r,o}),r)}var n=oc,e=ac,r=null;return t.polygons=function(n){return t(n).polygons()},t.links=function(n){return t(n).links()},t.triangles=function(n){return t(n).triangles()},t.x=function(e){return arguments.length?(n="function"==typeof e?e:Bw(+e),t):n},t.y=function(n){return arguments.length?(e="function"==typeof n?n:Bw(+n),t):e},t.extent=function(n){return arguments.length?(r=null==n?null:[[+n[0][0],+n[0][1]],[+n[1][0],+n[1][1]]],t):r&&[[r[0][0],r[0][1]],[r[1][0],r[1][1]]]},t.size=function(n){return arguments.length?(r=null==n?null:[[0,0],[+n[0],+n[1]]],t):r&&[r[1][0]-r[0][0],r[1][1]-r[0][1]]},t},Vw=function(t){return function(){return t}};Dc.prototype={constructor:Dc,scale:function(t){return 1===t?this:new Dc(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Dc(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var $w=new Dc(1,0,0);Ic.prototype=Dc.prototype;var Zw=function(){t.event.preventDefault(),t.event.stopImmediatePropagation()},Gw=function(){function n(t){t.on("wheel.zoom",c).on("mousedown.zoom",f).on("dblclick.zoom",l).on("touchstart.zoom",h).on("touchmove.zoom",p).on("touchend.zoom touchcancel.zoom",d).style("-webkit-tap-highlight-color","rgba(0,0,0,0)").property("__zoom",Fc)}function e(t,n){return n=Math.max(x,Math.min(b,n)),n===t.k?t:new Dc(n,t.x,t.y)}function r(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new Dc(t.k,r,i)}function i(t,n){var e=t.invertX(n[0][0])-w,r=t.invertX(n[1][0])-M,i=t.invertY(n[0][1])-A,o=t.invertY(n[1][1])-E;return t.translate(r>e?(e+r)/2:Math.min(0,e)||Math.max(0,r),o>i?(i+o)/2:Math.min(0,i)||Math.max(0,o))}function o(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function a(t,n,e){t.on("start.zoom",function(){u(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){u(this,arguments).end()}).tween("zoom",function(){var t=this,r=arguments,i=u(t,r),a=m.apply(t,r),s=e||o(a),c=Math.max(a[1][0]-a[0][0],a[1][1]-a[0][1]),f=t.__zoom,l="function"==typeof n?n.apply(t,r):n,h=T(f.invert(s).concat(c/f.k),l.invert(s).concat(c/l.k));return function(t){if(1===t)t=l;else{var n=h(t),e=c/n[2];t=new Dc(e,s[0]-n[0]*e,s[1]-n[1]*e)}i.zoom(null,t)}})}function u(t,n){for(var e,r=0,i=k.length;r<i;++r)if((e=k[r]).that===t)return e;return new s(t,n)}function s(t,n){this.that=t,this.args=n,this.index=-1,this.active=0,this.extent=m.apply(t,n)}function c(){function n(){o.wheel=null,o.end()}if(_.apply(this,arguments)){var o=u(this,arguments),a=this.__zoom,s=Math.max(x,Math.min(b,a.k*Math.pow(2,-t.event.deltaY*(t.event.deltaMode?120:1)/500))),c=Gf(this);if(o.wheel)o.mouse[0][0]===c[0]&&o.mouse[0][1]===c[1]||(o.mouse[1]=a.invert(o.mouse[0]=c)),clearTimeout(o.wheel);else{if(a.k===s)return;o.mouse=[c,a.invert(c)],_p(this),o.start()}Zw(),o.wheel=setTimeout(n,P),o.zoom("mouse",i(r(e(a,s),o.mouse[0],o.mouse[1]),o.extent))}}function f(){function n(){if(Zw(),!o.moved){var n=t.event.clientX-c,e=t.event.clientY-f;o.moved=n*n+e*e>O}o.zoom("mouse",i(r(o.that.__zoom,o.mouse[0]=Gf(o.that),o.mouse[1]),o.extent))}function e(){a.on("mousemove.zoom mouseup.zoom",null),mt(t.event.view,o.moved),Zw(),o.end()}if(!y&&_.apply(this,arguments)){var o=u(this,arguments),a=Pl(t.event.view).on("mousemove.zoom",n,!0).on("mouseup.zoom",e,!0),s=Gf(this),c=t.event.clientX,f=t.event.clientY;zl(t.event.view),qc(),o.mouse=[s,this.__zoom.invert(s)],_p(this),o.start()}}function l(){if(_.apply(this,arguments)){var o=this.__zoom,u=Gf(this),s=o.invert(u),c=o.k*(t.event.shiftKey?.5:2),f=i(r(e(o,c),u,s),m.apply(this,arguments));Zw(),S>0?Pl(this).transition().duration(S).call(a,f,u):Pl(this).call(n.transform,f)}}function h(){if(_.apply(this,arguments)){var n,e,r,i,o=u(this,arguments),a=t.event.changedTouches,s=a.length;for(qc(),e=0;e<s;++e)r=a[e],i=Ll(this,a,r.identifier),i=[i,this.__zoom.invert(i),r.identifier],o.touch0?o.touch1||(o.touch1=i):(o.touch0=i,n=!0);if(v&&(v=clearTimeout(v),!o.touch1))return o.end(),void((i=Pl(this).on("dblclick.zoom"))&&i.apply(this,arguments));n&&(v=setTimeout(function(){v=null},R),_p(this),o.start())}}function p(){var n,o,a,s,c=u(this,arguments),f=t.event.changedTouches,l=f.length;for(Zw(),v&&(v=clearTimeout(v)),n=0;n<l;++n)o=f[n],a=Ll(this,f,o.identifier),c.touch0&&c.touch0[2]===o.identifier?c.touch0[0]=a:c.touch1&&c.touch1[2]===o.identifier&&(c.touch1[0]=a);if(o=c.that.__zoom,c.touch1){var h=c.touch0[0],p=c.touch0[1],d=c.touch1[0],g=c.touch1[1],y=(y=d[0]-h[0])*y+(y=d[1]-h[1])*y,_=(_=g[0]-p[0])*_+(_=g[1]-p[1])*_;o=e(o,Math.sqrt(y/_)),a=[(h[0]+d[0])/2,(h[1]+d[1])/2],s=[(p[0]+g[0])/2,(p[1]+g[1])/2]}else{if(!c.touch0)return;a=c.touch0[0],s=c.touch0[1]}c.zoom("touch",i(r(o,a,s),c.extent))}function d(){var n,e,r=u(this,arguments),i=t.event.changedTouches,o=i.length;for(qc(),y&&clearTimeout(y),y=setTimeout(function(){y=null},R),n=0;n<o;++n)e=i[n],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}var v,y,_=Yc,m=jc,x=0,b=1/0,w=-b,M=b,A=w,E=M,S=250,T=Fh,k=[],C=g("start","zoom","end"),R=500,P=150,O=0;return n.transform=function(t,n){var e=t.selection?t.selection():t;e.property("__zoom",Fc),t!==e?a(t,n):e.interrupt().each(function(){u(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()})},n.scaleBy=function(t,e){n.scaleTo(t,function(){return this.__zoom.k*("function"==typeof e?e.apply(this,arguments):e)})},n.scaleTo=function(t,a){n.transform(t,function(){var t=m.apply(this,arguments),n=this.__zoom,u=o(t),s=n.invert(u);return i(r(e(n,"function"==typeof a?a.apply(this,arguments):a),u,s),t)})},n.translateBy=function(t,e,r){n.transform(t,function(){return i(this.__zoom.translate("function"==typeof e?e.apply(this,arguments):e,"function"==typeof r?r.apply(this,arguments):r),m.apply(this,arguments))})},s.prototype={start:function(){return 1==++this.active&&(this.index=k.push(this)-1,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(k.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){N(new zc(n,t,this.that.__zoom),C.apply,C,[t,this.that,this.args])}},n.filter=function(t){return arguments.length?(_="function"==typeof t?t:Vw(!!t),n):_},n.extent=function(t){return arguments.length?(m="function"==typeof t?t:Vw([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),n):m},n.scaleExtent=function(t){return arguments.length?(x=+t[0],b=+t[1],n):[x,b]},n.translateExtent=function(t){return arguments.length?(w=+t[0][0],M=+t[1][0],A=+t[0][1],E=+t[1][1],n):[[w,A],[M,E]]},n.duration=function(t){return arguments.length?(S=+t,n):S},n.interpolate=function(t){return arguments.length?(T=t,n):T},n.on=function(){var t=C.on.apply(C,arguments);return t===C?n:t},n.clickDistance=function(t){return arguments.length?(O=(t=+t)*t,n):Math.sqrt(O)},n};t.version="4.9.1",t.bisect=Vc,t.bisectRight=Vc,t.bisectLeft=$c,t.ascending=Hc,t.bisector=Xc,t.cross=Gc,t.descending=Jc,t.deviation=tf,t.extent=nf,t.histogram=df,t.thresholdFreedmanDiaconis=vf,t.thresholdScott=yf,t.thresholdSturges=pf,t.max=_f,t.mean=mf,t.median=xf,t.merge=bf,t.min=wf,t.pairs=Zc,t.permute=Mf,t.quantile=gf,t.range=sf,t.scan=Af,t.shuffle=Ef,t.sum=Sf,t.ticks=hf,t.tickIncrement=r,t.tickStep=i,t.transpose=Tf,t.variance=Qc,t.zip=kf,t.axisTop=l,t.axisRight=h,t.axisBottom=p,t.axisLeft=d,t.brush=kd,t.brushX=Re,t.brushY=Pe,t.brushSelection=Ce,t.chord=Ud,t.ribbon=Yd,t.nest=jd,t.set=Ze,t.map=Fe,t.keys=Hd,t.values=Xd,t.entries=Wd,t.color=St,t.rgb=Ct,t.hsl=Lt,t.lab=Dt,t.hcl=Xt,t.cubehelix=$t,t.dispatch=g,t.drag=Il,t.dragDisable=zl,t.dragEnable=mt,t.dsvFormat=Vd,t.csvParse=Zd,t.csvParseRows=Gd,t.csvFormat=Jd,t.csvFormatRows=Kd,t.tsvParse=tg,t.tsvParseRows=ng,t.tsvFormat=eg,t.tsvFormatRows=rg,t.easeLinear=ie,t.easeQuad=ue,t.easeQuadIn=oe,t.easeQuadOut=ae,t.easeQuadInOut=ue,t.easeCubic=fe,t.easeCubicIn=se,t.easeCubicOut=ce,t.easeCubicInOut=fe,t.easePoly=Fp,t.easePolyIn=Yp,t.easePolyOut=jp,t.easePolyInOut=Fp,t.easeSin=pe,t.easeSinIn=le,t.easeSinOut=he,t.easeSinInOut=pe,t.easeExp=ve,t.easeExpIn=de,t.easeExpOut=ge,t.easeExpInOut=ve,t.easeCircle=me,t.easeCircleIn=ye,t.easeCircleOut=_e,t.easeCircleInOut=me,t.easeBounce=be,t.easeBounceIn=xe,t.easeBounceOut=be,t.easeBounceInOut=we,t.easeBack=id,t.easeBackIn=ed,t.easeBackOut=rd,t.easeBackInOut=id,t.easeElastic=ud,t.easeElasticIn=ad,t.easeElasticOut=ud,t.easeElasticInOut=sd,t.forceCenter=ig,t.forceCollide=wg,t.forceLink=Mg,t.forceManyBody=Tg,t.forceSimulation=Sg,t.forceX=kg,t.forceY=Ng,t.formatDefaultLocale=gr,t.formatLocale=jg,t.formatSpecifier=pr,t.precisionFixed=Fg,t.precisionPrefix=Hg,t.precisionRound=Xg,t.geoArea=Gv,t.geoBounds=Qv,t.geoCentroid=ny,t.geoCircle=vy,t.geoClipExtent=My,t.geoContains=Ly,t.geoDistance=Ry,t.geoGraticule=Ai,t.geoGraticule10=Ei,t.geoInterpolate=Uy,t.geoLength=ky,t.geoPath=s_,t.geoAlbers=__,t.geoAlbersUsa=m_,t.geoAzimuthalEqualArea=b_,t.geoAzimuthalEqualAreaRaw=x_,t.geoAzimuthalEquidistant=M_,t.geoAzimuthalEquidistantRaw=w_,t.geoConicConformal=E_,t.geoConicConformalRaw=po,t.geoConicEqualArea=y_,t.geoConicEqualAreaRaw=ao,t.geoConicEquidistant=T_,t.geoConicEquidistantRaw=vo,t.geoEquirectangular=S_,t.geoEquirectangularRaw=go,t.geoGnomonic=k_,t.geoGnomonicRaw=yo,t.geoIdentity=N_,t.geoProjection=eo,t.geoProjectionMutator=ro,t.geoMercator=A_,t.geoMercatorRaw=fo,t.geoOrthographic=C_,t.geoOrthographicRaw=mo,t.geoStereographic=R_,t.geoStereographicRaw=xo,t.geoTransverseMercator=P_,t.geoTransverseMercatorRaw=bo,t.geoRotation=gy,t.geoStream=Wv,t.geoTransform=h_,t.cluster=O_,t.hierarchy=Ro,t.pack=Z_,t.packSiblings=V_,t.packEnclose=W_,t.partition=K_,t.stratify=em,t.tree=rm,t.treemap=um,t.treemapBinary=sm,t.treemapDice=J_,t.treemapSlice=im,t.treemapSliceDice=cm,t.treemapSquarify=am,t.treemapResquarify=fm,t.interpolate=Uh,t.interpolateArray=kh,t.interpolateBasis=wh,t.interpolateBasisClosed=Mh,t.interpolateDate=Nh,t.interpolateNumber=Ch,t.interpolateObject=Rh,t.interpolateRound=Bh,t.interpolateString=Lh,t.interpolateTransformCss=qh,t.interpolateTransformSvg=Yh,t.interpolateZoom=Fh,t.interpolateRgb=Eh,t.interpolateRgbBasis=Sh,t.interpolateRgbBasisClosed=Th,t.interpolateHsl=Hh,t.interpolateHslLong=Xh,t.interpolateLab=pn,t.interpolateHcl=Wh,t.interpolateHclLong=Vh,t.interpolateCubehelix=$h,t.interpolateCubehelixLong=Zh,t.quantize=Gh,t.path=Be,t.polygonArea=lm,t.polygonCentroid=hm;t.polygonHull=dm,t.polygonContains=gm,t.polygonLength=vm,t.quadtree=ir,t.queue=xa,t.randomUniform=xm,t.randomNormal=bm,t.randomLogNormal=wm,t.randomBates=Am,t.randomIrwinHall=Mm,t.randomExponential=Em,t.request=Sm,t.html=km,t.json=Nm,t.text=Cm,t.xml=Rm,t.csv=Om,t.tsv=Lm,t.scaleBand=Ea,t.scalePoint=Ta,t.scaleIdentity=za,t.scaleLinear=Ba,t.scaleLog=Ha,t.scaleOrdinal=Aa,t.scaleImplicit=Dm,t.scalePow=Wa,t.scaleSqrt=Va,t.scaleQuantile=$a,t.scaleQuantize=Za,t.scaleThreshold=Ga,t.scaleTime=ab,t.scaleUtc=ub,t.schemeCategory10=cb,t.schemeCategory20b=fb,t.schemeCategory20c=lb,t.schemeCategory20=hb,t.interpolateCubehelixDefault=pb,t.interpolateRainbow=yb,t.interpolateWarm=db,t.interpolateCool=gb,t.interpolateViridis=_b,t.interpolateMagma=mb,t.interpolateInferno=xb,t.interpolatePlasma=bb,t.scaleSequential=is,t.creator=qf,t.local=w,t.matcher=Xf,t.mouse=Gf,t.namespace=If,t.namespaces=Df,t.select=Pl,t.selectAll=Ol,t.selection=yt,t.selector=Jf,t.selectorAll=Qf,t.style=X,t.touch=Ll,t.touches=Ul,t.window=_l,t.customEvent=N,t.arc=Lb,t.area=zb,t.line=Bb,t.pie=qb,t.radialArea=Fb,t.radialLine=jb,t.linkHorizontal=Ss,t.linkVertical=Ts,t.linkRadial=ks,t.symbol=fw,t.symbols=cw,t.symbolCircle=Wb,t.symbolCross=Vb,t.symbolDiamond=Gb,t.symbolSquare=nw,t.symbolStar=tw,t.symbolTriangle=rw,t.symbolWye=sw,t.curveBasisClosed=pw,t.curveBasisOpen=dw,t.curveBasis=hw,t.curveBundle=gw,t.curveCardinalClosed=yw,t.curveCardinalOpen=_w,t.curveCardinal=vw,t.curveCatmullRomClosed=xw,t.curveCatmullRomOpen=bw,t.curveCatmullRom=mw,t.curveLinearClosed=ww,t.curveLinear=Ub,t.curveMonotoneX=Gs,t.curveMonotoneY=Js,t.curveNatural=Mw,t.curveStep=Aw,t.curveStepAfter=ec,t.curveStepBefore=nc,t.stack=Tw,t.stackOffsetExpand=kw,t.stackOffsetDiverging=Nw,t.stackOffsetNone=Ew,t.stackOffsetSilhouette=Cw,t.stackOffsetWiggle=Rw,t.stackOrderAscending=Pw,t.stackOrderDescending=Ow,t.stackOrderInsideOut=Lw,t.stackOrderNone=Sw,t.stackOrderReverse=Uw,t.timeInterval=Ja,t.timeMillisecond=Wm,t.timeMilliseconds=Vm,t.utcMillisecond=Wm,t.utcMilliseconds=Vm,t.timeSecond=Gm,t.timeSeconds=Jm,t.utcSecond=Gm,t.utcSeconds=Jm,t.timeMinute=Km,t.timeMinutes=Qm,t.timeHour=tx,t.timeHours=nx,t.timeDay=ex,t.timeDays=rx,t.timeWeek=ix,t.timeWeeks=lx,t.timeSunday=ix,t.timeSundays=lx,t.timeMonday=ox,t.timeMondays=hx,t.timeTuesday=ax,t.timeTuesdays=px,t.timeWednesday=ux,t.timeWednesdays=dx,t.timeThursday=sx,t.timeThursdays=gx,t.timeFriday=cx,t.timeFridays=vx,t.timeSaturday=fx,t.timeSaturdays=yx,t.timeMonth=_x,t.timeMonths=mx,t.timeYear=xx,t.timeYears=bx,t.utcMinute=wx,t.utcMinutes=Mx,t.utcHour=Ax,t.utcHours=Ex,t.utcDay=Sx,t.utcDays=Tx,t.utcWeek=kx,t.utcWeeks=Ux,t.utcSunday=kx,t.utcSundays=Ux,t.utcMonday=Nx,t.utcMondays=Bx,t.utcTuesday=Cx,t.utcTuesdays=zx,t.utcWednesday=Rx,t.utcWednesdays=Dx,t.utcThursday=Px,t.utcThursdays=Ix,t.utcFriday=Ox,t.utcFridays=qx,t.utcSaturday=Lx,t.utcSaturdays=Yx,t.utcMonth=jx,t.utcMonths=Fx,t.utcYear=Hx,t.utcYears=Wx,t.timeFormatDefaultLocale=Ju,t.timeFormatLocale=ru,t.isoFormat=Jx,t.isoParse=Kx,t.now=vn,t.timer=mn,t.timerFlush=xn,t.timeout=ap,t.interval=up,t.transition=ee,t.active=hd,t.interrupt=_p,t.voronoi=Ww,t.zoom=Gw,t.zoomTransform=Ic,t.zoomIdentity=$w,Object.defineProperty(t,"__esModule",{value:!0})})},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){};n.default=r},function(t,n,e){"use strict";(function(n){function r(t,n){!i.isUndefined(t)&&i.isUndefined(t["Content-Type"])&&(t["Content-Type"]=n)}var i=e(0),o=e(31),a={"Content-Type":"application/x-www-form-urlencoded"},u={adapter:function(){var t;return"undefined"!=typeof XMLHttpRequest?t=e(5):void 0!==n&&(t=e(5)),t}(),transformRequest:[function(t,n){return o(n,"Content-Type"),i.isFormData(t)||i.isArrayBuffer(t)||i.isBuffer(t)||i.isStream(t)||i.isFile(t)||i.isBlob(t)?t:i.isArrayBufferView(t)?t.buffer:i.isURLSearchParams(t)?(r(n,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):i.isObject(t)?(r(n,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},i.forEach(["delete","get","head"],function(t){u.headers[t]={}}),i.forEach(["post","put","patch"],function(t){u.headers[t]=i.merge(a)}),t.exports=u}).call(n,e(45))},function(t,n,e){"use strict";var r=e(0),i=e(23),o=e(26),a=e(32),u=e(30),s=e(8),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||e(25);t.exports=function(t){return new Promise(function(n,f){var l=t.data,h=t.headers;r.isFormData(l)&&delete h["Content-Type"];var p=new XMLHttpRequest,d="onreadystatechange",g=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||u(t.url)||(p=new window.XDomainRequest,d="onload",g=!0,p.onprogress=function(){},p.ontimeout=function(){}),t.auth){var v=t.auth.username||"",y=t.auth.password||"";h.Authorization="Basic "+c(v+":"+y)}if(p.open(t.method.toUpperCase(),o(t.url,t.params,t.paramsSerializer),!0),p.timeout=t.timeout,p[d]=function(){if(p&&(4===p.readyState||g)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var e="getAllResponseHeaders"in p?a(p.getAllResponseHeaders()):null,r=t.responseType&&"text"!==t.responseType?p.response:p.responseText,o={data:r,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:e,config:t,request:p};i(n,f,o),p=null}},p.onerror=function(){f(s("Network Error",t)),p=null},p.ontimeout=function(){f(s("timeout of "+t.timeout+"ms exceeded",t,"ECONNABORTED")),p=null},r.isStandardBrowserEnv()){var _=e(28),m=(t.withCredentials||u(t.url))&&t.xsrfCookieName?_.read(t.xsrfCookieName):void 0;m&&(h[t.xsrfHeaderName]=m)}if("setRequestHeader"in p&&r.forEach(h,function(t,n){void 0===l&&"content-type"===n.toLowerCase()?delete h[n]:p.setRequestHeader(n,t)}),t.withCredentials&&(p.withCredentials=!0),t.responseType)try{p.responseType=t.responseType}catch(n){if("json"!==t.responseType)throw n}"function"==typeof t.onDownloadProgress&&p.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then(function(t){p&&(p.abort(),f(t),p=null)}),void 0===l&&(l=null),p.send(l)})}},function(t,n,e){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},function(t,n,e){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,n,e){"use strict";var r=e(22);t.exports=function(t,n,e,i){var o=new Error(t);return r(o,n,e,i)}},function(t,n,e){"use strict";t.exports=function(t,n){return function(){for(var e=new Array(arguments.length),r=0;r<e.length;r++)e[r]=arguments[r];return t.apply(n,e)}}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(35),i=function(){(0,r.chart)()};n.default=i},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(36),i=function(){(0,r.chart)()};n.default=i},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(37),i=function(){(0,r.chart)()};n.default=i},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(38),i=function(){(0,r.chart)()};n.default=i},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(39),i=function(){(0,r.chart)()};n.default=i},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(43),i=void 0;i={"/d3-practice/dist/":e(3).default,"/d3-practice/dist/index.html":e(3).default,"/d3-practice/dist/pie.html":e(14).default,"/d3-practice/dist/donut.html":e(12).default,"/d3-practice/dist/line.html":e(13).default,"/d3-practice/dist/bar.html":e(10).default,"/d3-practice/dist/barp.html":e(11).default},n.default=new r.Router(i)},function(t,n){},function(t,n,e){"use strict";function r(t){var n=new a(t),e=o(a.prototype.request,n);return i.extend(e,a.prototype,n),i.extend(e,n),e}var i=e(0),o=e(9),a=e(19),u=e(4),s=r(u);s.Axios=a,s.create=function(t){return r(i.merge(u,t))},s.Cancel=e(6),s.CancelToken=e(18),s.isCancel=e(7),s.all=function(t){return Promise.all(t)},s.spread=e(33),t.exports=s,t.exports.default=s},function(t,n,e){"use strict";function r(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var n;this.promise=new Promise(function(t){n=t});var e=this;t(function(t){e.reason||(e.reason=new i(t),n(e.reason))})}var i=e(6);r.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},r.source=function(){var t;return{token:new r(function(n){t=n}),cancel:t}},t.exports=r},function(t,n,e){"use strict";function r(t){this.defaults=t,this.interceptors={request:new a,response:new a}}var i=e(4),o=e(0),a=e(20),u=e(21),s=e(29),c=e(27);r.prototype.request=function(t){"string"==typeof t&&(t=o.merge({url:arguments[0]},arguments[1])),t=o.merge(i,this.defaults,{method:"get"},t),t.baseURL&&!s(t.url)&&(t.url=c(t.baseURL,t.url));var n=[u,void 0],e=Promise.resolve(t);for(this.interceptors.request.forEach(function(t){n.unshift(t.fulfilled,t.rejected)}),this.interceptors.response.forEach(function(t){n.push(t.fulfilled,t.rejected)});n.length;)e=e.then(n.shift(),n.shift());return e},o.forEach(["delete","get","head","options"],function(t){r.prototype[t]=function(n,e){return this.request(o.merge(e||{},{method:t,url:n}))}}),o.forEach(["post","put","patch"],function(t){r.prototype[t]=function(n,e,r){return this.request(o.merge(r||{},{method:t,url:n,data:e}))}}),t.exports=r},function(t,n,e){"use strict";function r(){this.handlers=[]}var i=e(0);r.prototype.use=function(t,n){return this.handlers.push({fulfilled:t,rejected:n}),this.handlers.length-1},r.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},r.prototype.forEach=function(t){i.forEach(this.handlers,function(n){null!==n&&t(n)})},t.exports=r},function(t,n,e){"use strict";function r(t){t.cancelToken&&t.cancelToken.throwIfRequested()}var i=e(0),o=e(24),a=e(7),u=e(4);t.exports=function(t){return r(t),t.headers=t.headers||{},t.data=o(t.data,t.headers,t.transformRequest),t.headers=i.merge(t.headers.common||{},t.headers[t.method]||{},t.headers||{}),i.forEach(["delete","get","head","post","put","patch","common"],function(n){delete t.headers[n]}),(t.adapter||u.adapter)(t).then(function(n){return r(t),n.data=o(n.data,n.headers,t.transformResponse),n},function(n){return a(n)||(r(t),n&&n.response&&(n.response.data=o(n.response.data,n.response.headers,t.transformResponse))),Promise.reject(n)})}},function(t,n,e){"use strict";t.exports=function(t,n,e,r){return t.config=n,e&&(t.code=e),t.response=r,t}},function(t,n,e){"use strict";var r=e(8);t.exports=function(t,n,e){var i=e.config.validateStatus;e.status&&i&&!i(e.status)?n(r("Request failed with status code "+e.status,e.config,null,e)):t(e)}},function(t,n,e){"use strict";var r=e(0);t.exports=function(t,n,e){return r.forEach(e,function(e){t=e(t,n)}),t}},function(t,n,e){"use strict";function r(){this.message="String contains an invalid character"}function i(t){for(var n,e,i=String(t),a="",u=0,s=o;i.charAt(0|u)||(s="=",u%1);a+=s.charAt(63&n>>8-u%1*8)){if((e=i.charCodeAt(u+=.75))>255)throw new r;n=n<<8|e}return a}var o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.prototype=new Error,r.prototype.code=5,r.prototype.name="InvalidCharacterError",t.exports=i},function(t,n,e){"use strict";function r(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var i=e(0);t.exports=function(t,n,e){if(!n)return t;var o;if(e)o=e(n);else if(i.isURLSearchParams(n))o=n.toString();else{var a=[];i.forEach(n,function(t,n){null!==t&&void 0!==t&&(i.isArray(t)&&(n+="[]"),i.isArray(t)||(t=[t]),i.forEach(t,function(t){i.isDate(t)?t=t.toISOString():i.isObject(t)&&(t=JSON.stringify(t)),a.push(r(n)+"="+r(t))}))}),o=a.join("&")}return o&&(t+=(-1===t.indexOf("?")?"?":"&")+o),t}},function(t,n,e){"use strict";t.exports=function(t,n){return n?t.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):t}},function(t,n,e){"use strict";var r=e(0);t.exports=r.isStandardBrowserEnv()?function(){return{write:function(t,n,e,i,o,a){var u=[];u.push(t+"="+encodeURIComponent(n)),r.isNumber(e)&&u.push("expires="+new Date(e).toGMTString()),r.isString(i)&&u.push("path="+i),r.isString(o)&&u.push("domain="+o),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(t){var n=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}()},function(t,n,e){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,n,e){"use strict";var r=e(0);t.exports=r.isStandardBrowserEnv()?function(){function t(t){var n=t;return e&&(i.setAttribute("href",n),n=i.href),i.setAttribute("href",n),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:"/"===i.pathname.charAt(0)?i.pathname:"/"+i.pathname}}var n,e=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a");return n=t(window.location.href),function(e){var i=r.isString(e)?t(e):e;return i.protocol===n.protocol&&i.host===n.host}}():function(){return function(){return!0}}()},function(t,n,e){"use strict";var r=e(0);t.exports=function(t,n){r.forEach(t,function(e,r){r!==n&&r.toUpperCase()===n.toUpperCase()&&(t[n]=e,delete t[r])})}},function(t,n,e){"use strict";var r=e(0);t.exports=function(t){var n,e,i,o={};return t?(r.forEach(t.split("\n"),function(t){i=t.indexOf(":"),n=r.trim(t.substr(0,i)).toLowerCase(),e=r.trim(t.substr(i+1)),n&&(o[n]=o[n]?o[n]+", "+e:e)}),o):o}},function(t,n,e){"use strict";t.exports=function(t){return function(n){return t.apply(null,n)}}},function(t,n,e){"use strict";var r=e(15),i=function(t){return t&&t.__esModule?t:{default:t}}(r);e(16),window.axios=e(1);var o={html5history:!0};i.default.configure(o).init()},function(t,n,e){"use strict";function r(t){var n=[];return t.forEach(function(t){n.push(t.number)}),n}function i(){axios.get("//teststset.getsandbox.com/d3data3").then(function(t){u.sample=t.data.result,u.init()}).catch(function(t){console.log("ERROR: "+t)})}Object.defineProperty(n,"__esModule",{value:!0}),n.chart=i;var o=e(2),a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}(o);window.axios=e(1);var u={sample:{},svg:{},xScale:{},yScale:{},bars:{},texts:{},labels:{},config:{svgW:500,svgH:500,top:30,right:30,bottom:100,left:60,barW:50},init:function(){this.svg=a.select(".chart").append("svg").attr("class","svg").attr("viewBox","0 0 "+(this.config.svgW+this.config.left+this.config.right)+" "+(this.config.svgH+this.config.top+this.config.bottom)).append("g").attr("transform","translate("+this.config.left+","+this.config.top+")"),this.bind(),this.rendor()},bind:function(){var t=this.sample,n=0,e=0,i=[""];t.narray=r(t.value),e=a.max(t.narray),n=e>n?e:n,t.value.forEach(function(t){i.push(t.month)}),this.xScale=a.scaleLinear().domain([0,t.value.length+1]).range([0,this.config.svgW]),this.yScale=a.scaleLinear().domain([0,n]).range([this.config.svgH,0]);var o=a.axisBottom(this.xScale).ticks(5).tickFormat(function(t,n){return i[n]}),u=a.axisLeft(this.yScale).tickSizeInner(-this.config.svgH);this.svg.append("g").attr("transform","translate(0, "+this.config.svgH+")").attr("class","x axis").call(o),this.svg.append("g").attr("transform","translate(0, 0)").attr("class","y axis").call(u),this.svg.append("text").attr("transform","rotate(-90)").attr("y",0-this.config.left).attr("x",0-this.config.svgH/2).attr("dy","1em").style("text-anchor","middle").text("件數"),this.bars=this.svg.append("g").attr("class","bars").selectAll("rect.bar").data(t.value).enter().append("rect").attr("class","bar"),this.texts=this.svg.append("g").attr("class","texts").selectAll("text.text").data(t.value).enter().append("text").attr("class","text"),this.labels=this.svg.append("g").attr("class","label")},rendor:function(){var t=this,n=this.sample,e=a.scaleOrdinal(a.schemeCategory10),r=this.config.barW;this.bars.attr("fill",e(0)).attr("x",function(n,e){return t.xScale(e+1)-r/2}).attr("y",function(n){return t.yScale(n.number)}).attr("width",r).attr("height",function(n){return t.config.svgH-t.yScale(n.number)}),this.texts.attr("fill","white").attr("text-anchor","middle").attr("x",function(n,e){return t.xScale(e+1)}).attr("y",function(n){return t.yScale(n.number)+20}).text(function(t){return t.number}),this.labels.append("rect").attr("class","labelrect").attr("fill",e(0)).attr("x",0).attr("y",this.config.svgH+40).attr("width","10").attr("height","10"),this.labels.append("text").attr("class","labeltext").attr("fill",e(0)).attr("x",15).attr("y",this.config.svgH+50).text(n.name),this.svg.selectAll(".bar").on("mouseover",function(t,n){var e=a.mouse(this),r=e[0]+70,i=e[1];a.select(".tooltip").classed("hidden",!1).style("left",r+"px").style("top",i+"px"),a.select(".tooltip .name").html("鼓山區 / "+t.month),a.select(".tooltip .value").html(t.number+" 件")}).on("mouseout",function(t){a.select(".tooltip").classed("hidden",!0)})}}},function(t,n,e){"use strict";function r(t){var n=[];return t.forEach(function(t){n.push(t.number)}),n}function i(){axios.get("//teststset.getsandbox.com/d3data3").then(function(t){u.sample=t.data.result,u.init()}).catch(function(t){console.log("ERROR: "+t)})}Object.defineProperty(n,"__esModule",{value:!0}),n.chart=i;var o=e(2),a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}(o);window.axios=e(1);var u={sample:{},svg:{},xScale:{},yScale:{},bars:{},texts:{},labels:{},config:{svgW:500,svgH:500,top:30,right:30,bottom:100,left:60,barW:50},init:function(){this.svg=a.select(".chart").append("svg").attr("class","svg").attr("viewBox","0 0 "+(this.config.svgW+this.config.left+this.config.right)+" "+(this.config.svgH+this.config.top+this.config.bottom)).append("g").attr("transform","translate("+this.config.left+","+this.config.top+")"),this.bind(),this.rendor()},bind:function(){var t=this.sample,n=0,e=0,i=[""];t.narray=r(t.value),e=a.max(t.narray),n=e>n?e:n,t.value.forEach(function(t){i.push(t.month)}),this.xScale=a.scaleLinear().domain([0,n]).range([0,this.config.svgH]),this.yScale=a.scaleLinear().domain([0,t.value.length+1]).range([this.config.svgW,0]);var o=a.axisBottom(this.xScale).tickSizeInner(-this.config.svgW),u=a.axisLeft(this.yScale).ticks(5).tickFormat(function(t,n){return i[n]});this.svg.append("g").attr("transform","translate(0, "+this.config.svgH+")").attr("class","x axis").call(o),this.svg.append("g").attr("transform","translate(0, 0)").attr("class","y axis").call(u),this.svg.append("text").attr("y",this.config.svgH+30).attr("x",this.config.svgW/2).attr("dy","1em").style("text-anchor","middle").text("件數"),this.bars=this.svg.append("g").attr("class","bars").selectAll("rect.bar").data(t.value).enter().append("rect").attr("class","bar"),this.texts=this.svg.append("g").attr("class","texts").selectAll("text.text").data(t.value).enter().append("text").attr("class","text"),this.labels=this.svg.append("g").attr("class","label")},rendor:function(){var t=this,n=this.sample,e=a.scaleOrdinal(a.schemeCategory10),r=this.config.barW;this.bars.attr("fill",e(0)).attr("x",0).attr("y",function(n,e){return t.yScale(e+1)-r/2}).attr("width",function(n){return t.xScale(n.number)}).attr("height",r),this.texts.attr("fill","white").attr("text-anchor","middle").attr("y",function(n,e){return t.yScale(e+1)+5}).attr("x",function(n){return t.xScale(n.number)-20}).text(function(t){return t.number}),this.labels.append("rect").attr("class","labelrect").attr("fill",e(0)).attr("x",0).attr("y",10-this.config.top).attr("width","10").attr("height","10"),this.labels.append("text").attr("class","labeltext").attr("fill",e(0)).attr("x",15).attr("y",10-this.config.top+10).text(n.name),this.svg.selectAll(".bar").on("mouseover",function(t,n){var e=a.mouse(this),r=e[0]+70,i=e[1];a.select(".tooltip").classed("hidden",!1).style("left",r+"px").style("top",i+"px"),a.select(".tooltip .name").html("鼓山區 / "+t.month),a.select(".tooltip .value").html(t.number+" 件")}).on("mouseout",function(t){a.select(".tooltip").classed("hidden",!0)})}}},function(t,n,e){"use strict";function r(){axios.get("//teststset.getsandbox.com/d3data").then(function(t){var n=t.data.result,e=[];n.forEach(function(t){t.value>100&&t.value<500&&e.push(t)}),a.sample=e,a.init()}).catch(function(t){console.log("ERROR: "+t)})}Object.defineProperty(n,"__esModule",{value:!0}),n.chart=r;var i=e(2),o=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}(i);window.axios=e(1);var a={sample:{},svg:{},arcs:{},labels:{},labeltexts:{},config:{svgW:600,svgH:600,innerRadius:100,outerRadius:200,labelX:450},percentage:function(){var t=this.sample,n=o.sum(t,function(t){return t.value}),e=o.format(".0p");this.sample.forEach(function(t){t.percentage=e(t.value/n)})},init:function(){this.percentage(),this.svg=o.select(".chart").append("svg").attr("class","svg").attr("viewBox","0 0 "+this.config.svgW+" "+this.config.svgH),this.bind(),this.rendor()},bind:function(){var t=this.sample,n=o.pie().sort(null).value(function(t){return t.value})(t);this.arcs=this.svg.selectAll("g.arc").data(n).enter().append("g").attr("class","arc").attr("transform","translate("+this.config.outerRadius+","+this.config.outerRadius+")"),this.labels=this.svg.selectAll("g.label").data(t).enter().append("g").attr("class","label"),this.labeltexts=this.labels.append("text").attr("class","tGroup").attr("x",this.config.labelX+15).attr("y",function(t,n){return 30*(n+1)})},rendor:function(){var t=o.arc().innerRadius(this.config.innerRadius).outerRadius(this.config.outerRadius),n=o.scaleOrdinal(o.schemeCategory20c),e=this.config.outerRadius;this.arcs.append("path").attr("fill",function(t,e){return n(e)}).attr("d",t),this.arcs.append("text").attr("transform",function(n){return"translate("+t.centroid(n)+")"}).attr("text-anchor","middle").text(function(t){return t.data.percentage}).attr("fill","white"),this.labels.append("rect").attr("x",this.config.labelX).attr("y",function(t,n){return 30*(n+1)-11}).attr("width",10).attr("height",10).attr("fill",function(t,e){return n(e)}),this.labeltexts.append("tspan").text(function(t){return t.name}),this.labeltexts.append("tspan").text(function(t){return" "+t.percentage}).attr("fill","#ccc"),this.svg.selectAll(".arc").on("mouseover",function(t){var n=o.mouse(this),r=n[0]+e,i=n[1]+e;o.select(".tooltip").classed("hidden",!1).style("left",r+"px").style("top",i+"px"),o.select(".tooltip .name").html(t.data.name+" / "+t.data.percentage),o.select(".tooltip .value").html(t.data.value+" 件")}).on("mouseout",function(t){o.select(".tooltip").classed("hidden",!0)})}}},function(t,n,e){"use strict";function r(t){var n=[];return t.forEach(function(t){n.push(t.number)}),n}function i(){axios.get("//teststset.getsandbox.com/d3data2").then(function(t){u.sample=t.data.result,u.init()}).catch(function(t){console.log("ERROR: "+t)})}Object.defineProperty(n,"__esModule",{value:!0}),n.chart=i;var o=e(2),a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}(o);window.axios=e(1);var u={sample:{},svg:{},xScale:{},yScale:{},dots:{},path:{},labels:{},config:{svgW:500,svgH:500,top:30,right:30,bottom:100,left:60},init:function(){this.svg=a.select(".chart").append("svg").attr("class","svg").attr("viewBox","0 0 "+(this.config.svgW+this.config.left+this.config.right)+" "+(this.config.svgH+this.config.top+this.config.bottom)).append("g").attr("transform","translate("+this.config.left+","+this.config.top+")"),this.bind(),this.rendor()},bind:function(){var t=this.sample,n=0,e=[""];t.forEach(function(t,e){t.narray=r(t.value);var i=a.max(t.narray);n=i>n?i:n}),t[0].value.forEach(function(t){e.push(t.month)}),this.xScale=a.scaleLinear().domain([0,t[0].value.length]).range([0,this.config.svgW]),this.yScale=a.scaleLinear().domain([0,n]).range([this.config.svgH,0]);var i=a.axisBottom(this.xScale).ticks(5).tickFormat(function(t,n){return e[n]}),o=a.axisLeft(this.yScale).tickSizeInner(-this.config.svgH);this.svg.append("g").attr("transform","translate(0, "+this.config.svgH+")").attr("class","x axis").call(i),this.svg.append("g").attr("transform","translate(0, 0)").attr("class","y axis").call(o),this.svg.append("text").attr("transform","rotate(-90)").attr("y",0-this.config.left).attr("x",0-this.config.svgH/2).attr("dy","1em").style("text-anchor","middle").text("件數"),this.path=this.svg.selectAll("g.line").data(t).enter().append("g").attr("class","line"),this.dots=this.svg.selectAll("g.dot").data(t).enter().append("g").attr("class","dot").selectAll("circle.circle").data(function(t){return t.value}).enter().append("circle").attr("class","circle"),this.labels=this.svg.selectAll("g.label").data(t).enter().append("g").attr("class","label")},rendor:function(){var t=this,n=this.sample,e=a.scaleOrdinal(a.schemeCategory10),r=0,i=this.config.svgH,o=a.line().x(function(n,e){return t.xScale(e+1)}).y(function(n){return t.yScale(n)});this.path.append("path").attr("fill","none").attr("stroke",function(t,n){return e(n)}).attr("d",function(t){return o(t.narray)}),this.dots.attr("cx",function(n,e){return t.xScale(e+1)}).attr("cy",function(n){return t.yScale(n.number)}).attr("r","5").attr("fill",function(){return r++,e(Math.floor((r-1)/5))}).attr("stroke","white"),this.labels.append("circle").attr("cx",function(t,n){return 100*n}).attr("cy",i+75).attr("r",5).attr("fill",function(t,n){return e(n)}),this.labels.append("text").attr("x",function(t,n){return 100*n+10}).attr("y",i+80).text(function(t){return t.name}),this.svg.selectAll(".circle").on("mouseover",function(t,e){var r=a.mouse(this),i=r[0]+80,o=r[1];a.select(".tooltip").classed("hidden",!1).style("left",i+"px").style("top",o+"px"),a.select(".tooltip .name").html(n[Math.floor(e/5)].name+" / "+t.month),a.select(".tooltip .value").html(t.number+" 件")}).on("mouseout",function(t){a.select(".tooltip").classed("hidden",!0)})}}},function(t,n,e){"use strict";function r(){axios.get("//teststset.getsandbox.com/d3data").then(function(t){var n=t.data.result,e=[];n.forEach(function(t){t.value>100&&t.value<500&&e.push(t)}),a.sample=e,a.init()}).catch(function(t){console.log("ERROR: "+t)})}Object.defineProperty(n,"__esModule",{value:!0}),n.chart=r;var i=e(2),o=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}(i);window.axios=e(1);var a={sample:{},svg:{},arcs:{},labels:{},labeltexts:{},config:{svgW:600,svgH:600,innerRadius:0,outerRadius:200,labelX:450},percentage:function(){var t=this.sample,n=o.sum(t,function(t){return t.value}),e=o.format(".0p");this.sample.forEach(function(t){t.percentage=e(t.value/n)})},init:function(){this.percentage(),this.svg=o.select(".chart").append("svg").attr("class","svg").attr("viewBox","0 0 "+this.config.svgW+" "+this.config.svgH),this.bind(),this.rendor()},bind:function(){var t=this.sample,n=o.pie().sort(null).value(function(t){return t.value})(t);this.arcs=this.svg.selectAll("g.arc").data(n).enter().append("g").attr("class","arc").attr("transform","translate("+this.config.outerRadius+","+this.config.outerRadius+")"),this.labels=this.svg.selectAll("g.label").data(t).enter().append("g").attr("class","label"),this.labeltexts=this.labels.append("text").attr("class","tGroup").attr("x",this.config.labelX+15).attr("y",function(t,n){return 30*(n+1)})},rendor:function(){var t=o.arc().innerRadius(this.config.innerRadius).outerRadius(this.config.outerRadius),n=o.scaleOrdinal(o.schemeCategory20c),e=this.config.outerRadius;this.arcs.append("path").attr("fill",function(t,e){return n(e)}).attr("d",t),this.arcs.append("text").attr("transform",function(n){return"translate("+t.centroid(n)+")"}).attr("text-anchor","middle").text(function(t){return t.data.percentage}).attr("fill","white"),this.labels.append("circle").attr("cx",this.config.labelX).attr("cy",function(t,n){return 30*(n+1)-5}).attr("r",5).attr("fill",function(t,e){return n(e)}),this.labeltexts.append("tspan").text(function(t){return t.name}),this.labeltexts.append("tspan").text(function(t){return" "+t.percentage}).attr("fill","#ccc"),this.svg.selectAll(".arc").on("mouseover",function(t){var n=o.mouse(this),r=n[0]+e,i=n[1]+e;o.select(".tooltip").classed("hidden",!1).style("left",r+"px").style("top",i+"px"),o.select(".tooltip .name").html(t.data.name+" / "+t.data.percentage),o.select(".tooltip .value").html(t.data.value+" 件")}).on("mouseout",function(t){o.select(".tooltip").classed("hidden",!0)})}}},function(t,n,e){"use strict";function r(t){var n=t.length;if(n%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===t[n-2]?2:"="===t[n-1]?1:0}function i(t){return 3*t.length/4-r(t)}function o(t){var n,e,i,o,a,u,s=t.length;a=r(t),u=new l(3*s/4-a),i=a>0?s-4:s;var c=0;for(n=0,e=0;n<i;n+=4,e+=3)o=f[t.charCodeAt(n)]<<18|f[t.charCodeAt(n+1)]<<12|f[t.charCodeAt(n+2)]<<6|f[t.charCodeAt(n+3)],u[c++]=o>>16&255,u[c++]=o>>8&255,u[c++]=255&o;return 2===a?(o=f[t.charCodeAt(n)]<<2|f[t.charCodeAt(n+1)]>>4,u[c++]=255&o):1===a&&(o=f[t.charCodeAt(n)]<<10|f[t.charCodeAt(n+1)]<<4|f[t.charCodeAt(n+2)]>>2,u[c++]=o>>8&255,u[c++]=255&o),u}function a(t){return c[t>>18&63]+c[t>>12&63]+c[t>>6&63]+c[63&t]}function u(t,n,e){for(var r,i=[],o=n;o<e;o+=3)r=(t[o]<<16)+(t[o+1]<<8)+t[o+2],i.push(a(r));return i.join("")}function s(t){for(var n,e=t.length,r=e%3,i="",o=[],a=0,s=e-r;a<s;a+=16383)o.push(u(t,a,a+16383>s?s:a+16383));return 1===r?(n=t[e-1],i+=c[n>>2],i+=c[n<<4&63],i+="=="):2===r&&(n=(t[e-2]<<8)+t[e-1],i+=c[n>>10],i+=c[n>>4&63],i+=c[n<<2&63],i+="="),o.push(i),o.join("")}n.byteLength=i,n.toByteArray=o,n.fromByteArray=s;for(var c=[],f=[],l="undefined"!=typeof Uint8Array?Uint8Array:Array,h="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",p=0,d=h.length;p<d;++p)c[p]=h[p],f[h.charCodeAt(p)]=p;f["-".charCodeAt(0)]=62,f["_".charCodeAt(0)]=63},function(t,n,e){"use strict";(function(t){function r(){return o.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function i(t,n){if(r()<n)throw new RangeError("Invalid typed array length");return o.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(n),t.__proto__=o.prototype):(null===t&&(t=new o(n)),t.length=n),t}function o(t,n,e){if(!(o.TYPED_ARRAY_SUPPORT||this instanceof o))return new o(t,n,e);if("number"==typeof t){if("string"==typeof n)throw new Error("If encoding is specified then the first argument must be a string");return c(this,t)}return a(this,t,n,e)}function a(t,n,e,r){if("number"==typeof n)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&n instanceof ArrayBuffer?h(t,n,e,r):"string"==typeof n?f(t,n,e):p(t,n)}function u(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function s(t,n,e,r){return u(n),n<=0?i(t,n):void 0!==e?"string"==typeof r?i(t,n).fill(e,r):i(t,n).fill(e):i(t,n)}function c(t,n){if(u(n),t=i(t,n<0?0:0|d(n)),!o.TYPED_ARRAY_SUPPORT)for(var e=0;e<n;++e)t[e]=0;return t}function f(t,n,e){if("string"==typeof e&&""!==e||(e="utf8"),!o.isEncoding(e))throw new TypeError('"encoding" must be a valid string encoding');var r=0|v(n,e);t=i(t,r);var a=t.write(n,e);return a!==r&&(t=t.slice(0,a)),t}function l(t,n){var e=n.length<0?0:0|d(n.length);t=i(t,e);for(var r=0;r<e;r+=1)t[r]=255&n[r];return t}function h(t,n,e,r){if(n.byteLength,e<0||n.byteLength<e)throw new RangeError("'offset' is out of bounds");if(n.byteLength<e+(r||0))throw new RangeError("'length' is out of bounds");return n=void 0===e&&void 0===r?new Uint8Array(n):void 0===r?new Uint8Array(n,e):new Uint8Array(n,e,r),o.TYPED_ARRAY_SUPPORT?(t=n,t.__proto__=o.prototype):t=l(t,n),t}function p(t,n){if(o.isBuffer(n)){var e=0|d(n.length);return t=i(t,e),0===t.length?t:(n.copy(t,0,0,e),t)}if(n){if("undefined"!=typeof ArrayBuffer&&n.buffer instanceof ArrayBuffer||"length"in n)return"number"!=typeof n.length||Z(n.length)?i(t,0):l(t,n);if("Buffer"===n.type&&K(n.data))return l(t,n.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function d(t){if(t>=r())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+r().toString(16)+" bytes");return 0|t}function g(t){return+t!=t&&(t=0),o.alloc(+t)}function v(t,n){if(o.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var e=t.length;if(0===e)return 0;for(var r=!1;;)switch(n){case"ascii":case"latin1":case"binary":return e;case"utf8":case"utf-8":case void 0:return H(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*e;case"hex":return e>>>1;case"base64":return V(t).length;default:if(r)return H(t).length;n=(""+n).toLowerCase(),r=!0}}function y(t,n,e){var r=!1;if((void 0===n||n<0)&&(n=0),n>this.length)return"";if((void 0===e||e>this.length)&&(e=this.length),e<=0)return"";if(e>>>=0,n>>>=0,e<=n)return"";for(t||(t="utf8");;)switch(t){case"hex":return P(this,n,e);case"utf8":case"utf-8":return k(this,n,e);case"ascii":return C(this,n,e);case"latin1":case"binary":return R(this,n,e);case"base64":return T(this,n,e);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,n,e);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function _(t,n,e){var r=t[n];t[n]=t[e],t[e]=r}function m(t,n,e,r,i){if(0===t.length)return-1;if("string"==typeof e?(r=e,e=0):e>2147483647?e=2147483647:e<-2147483648&&(e=-2147483648),e=+e,isNaN(e)&&(e=i?0:t.length-1),e<0&&(e=t.length+e),e>=t.length){if(i)return-1;e=t.length-1}else if(e<0){if(!i)return-1;e=0}if("string"==typeof n&&(n=o.from(n,r)),o.isBuffer(n))return 0===n.length?-1:x(t,n,e,r,i);if("number"==typeof n)return n&=255,o.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,n,e):Uint8Array.prototype.lastIndexOf.call(t,n,e):x(t,[n],e,r,i);throw new TypeError("val must be string, number or Buffer")}function x(t,n,e,r,i){function o(t,n){return 1===a?t[n]:t.readUInt16BE(n*a)}var a=1,u=t.length,s=n.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||n.length<2)return-1;a=2,u/=2,s/=2,e/=2}var c;if(i){var f=-1;for(c=e;c<u;c++)if(o(t,c)===o(n,-1===f?0:c-f)){if(-1===f&&(f=c),c-f+1===s)return f*a}else-1!==f&&(c-=c-f),f=-1}else for(e+s>u&&(e=u-s),c=e;c>=0;c--){for(var l=!0,h=0;h<s;h++)if(o(t,c+h)!==o(n,h)){l=!1;break}if(l)return c}return-1}function b(t,n,e,r){e=Number(e)||0;var i=t.length-e;r?(r=Number(r))>i&&(r=i):r=i;var o=n.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var a=0;a<r;++a){var u=parseInt(n.substr(2*a,2),16);if(isNaN(u))return a;t[e+a]=u}return a}function w(t,n,e,r){return $(H(n,t.length-e),t,e,r)}function M(t,n,e,r){return $(X(n),t,e,r)}function A(t,n,e,r){return M(t,n,e,r)}function E(t,n,e,r){return $(V(n),t,e,r)}function S(t,n,e,r){return $(W(n,t.length-e),t,e,r)}function T(t,n,e){return 0===n&&e===t.length?G.fromByteArray(t):G.fromByteArray(t.slice(n,e))}function k(t,n,e){e=Math.min(t.length,e);for(var r=[],i=n;i<e;){var o=t[i],a=null,u=o>239?4:o>223?3:o>191?2:1;if(i+u<=e){var s,c,f,l;switch(u){case 1:o<128&&(a=o);break;case 2:s=t[i+1],128==(192&s)&&(l=(31&o)<<6|63&s)>127&&(a=l);break;case 3:s=t[i+1],c=t[i+2],128==(192&s)&&128==(192&c)&&(l=(15&o)<<12|(63&s)<<6|63&c)>2047&&(l<55296||l>57343)&&(a=l);break;case 4:s=t[i+1],c=t[i+2],f=t[i+3],128==(192&s)&&128==(192&c)&&128==(192&f)&&(l=(15&o)<<18|(63&s)<<12|(63&c)<<6|63&f)>65535&&l<1114112&&(a=l)}}null===a?(a=65533,u=1):a>65535&&(a-=65536,r.push(a>>>10&1023|55296),a=56320|1023&a),r.push(a),i+=u}return N(r)}function N(t){var n=t.length;if(n<=Q)return String.fromCharCode.apply(String,t);for(var e="",r=0;r<n;)e+=String.fromCharCode.apply(String,t.slice(r,r+=Q));return e}function C(t,n,e){var r="";e=Math.min(t.length,e);for(var i=n;i<e;++i)r+=String.fromCharCode(127&t[i]);return r}function R(t,n,e){var r="";e=Math.min(t.length,e);for(var i=n;i<e;++i)r+=String.fromCharCode(t[i]);return r}function P(t,n,e){var r=t.length;(!n||n<0)&&(n=0),(!e||e<0||e>r)&&(e=r);for(var i="",o=n;o<e;++o)i+=F(t[o]);return i}function O(t,n,e){for(var r=t.slice(n,e),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function L(t,n,e){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+n>e)throw new RangeError("Trying to access beyond buffer length")}function U(t,n,e,r,i,a){if(!o.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(n>i||n<a)throw new RangeError('"value" argument is out of bounds');if(e+r>t.length)throw new RangeError("Index out of range")}function B(t,n,e,r){n<0&&(n=65535+n+1);for(var i=0,o=Math.min(t.length-e,2);i<o;++i)t[e+i]=(n&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function z(t,n,e,r){n<0&&(n=4294967295+n+1);for(var i=0,o=Math.min(t.length-e,4);i<o;++i)t[e+i]=n>>>8*(r?i:3-i)&255}function D(t,n,e,r,i,o){if(e+r>t.length)throw new RangeError("Index out of range");if(e<0)throw new RangeError("Index out of range")}function I(t,n,e,r,i){return i||D(t,n,e,4,3.4028234663852886e38,-3.4028234663852886e38),J.write(t,n,e,r,23,4),e+4}function q(t,n,e,r,i){return i||D(t,n,e,8,1.7976931348623157e308,-1.7976931348623157e308),J.write(t,n,e,r,52,8),e+8}function Y(t){if(t=j(t).replace(tt,""),t.length<2)return"";for(;t.length%4!=0;)t+="=";return t}function j(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}function F(t){return t<16?"0"+t.toString(16):t.toString(16)}function H(t,n){n=n||1/0;for(var e,r=t.length,i=null,o=[],a=0;a<r;++a){if((e=t.charCodeAt(a))>55295&&e<57344){if(!i){if(e>56319){(n-=3)>-1&&o.push(239,191,189);continue}if(a+1===r){(n-=3)>-1&&o.push(239,191,189);continue}i=e;continue}if(e<56320){(n-=3)>-1&&o.push(239,191,189),i=e;continue}e=65536+(i-55296<<10|e-56320)}else i&&(n-=3)>-1&&o.push(239,191,189);if(i=null,e<128){if((n-=1)<0)break;o.push(e)}else if(e<2048){if((n-=2)<0)break;o.push(e>>6|192,63&e|128)}else if(e<65536){if((n-=3)<0)break;o.push(e>>12|224,e>>6&63|128,63&e|128)}else{if(!(e<1114112))throw new Error("Invalid code point");if((n-=4)<0)break;o.push(e>>18|240,e>>12&63|128,e>>6&63|128,63&e|128)}}return o}function X(t){for(var n=[],e=0;e<t.length;++e)n.push(255&t.charCodeAt(e));return n}function W(t,n){for(var e,r,i,o=[],a=0;a<t.length&&!((n-=2)<0);++a)e=t.charCodeAt(a),r=e>>8,i=e%256,o.push(i),o.push(r);return o}function V(t){return G.toByteArray(Y(t))}function $(t,n,e,r){for(var i=0;i<r&&!(i+e>=n.length||i>=t.length);++i)n[i+e]=t[i];return i}function Z(t){return t!==t}/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var G=e(40),J=e(44),K=e(42);n.Buffer=o,n.SlowBuffer=g,n.INSPECT_MAX_BYTES=50,o.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),n.kMaxLength=r(),o.poolSize=8192,o._augment=function(t){return t.__proto__=o.prototype,t},o.from=function(t,n,e){return a(null,t,n,e)},o.TYPED_ARRAY_SUPPORT&&(o.prototype.__proto__=Uint8Array.prototype,o.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&o[Symbol.species]===o&&Object.defineProperty(o,Symbol.species,{value:null,configurable:!0})),o.alloc=function(t,n,e){return s(null,t,n,e)},o.allocUnsafe=function(t){return c(null,t)},o.allocUnsafeSlow=function(t){return c(null,t)},o.isBuffer=function(t){return!(null==t||!t._isBuffer)},o.compare=function(t,n){if(!o.isBuffer(t)||!o.isBuffer(n))throw new TypeError("Arguments must be Buffers");if(t===n)return 0;for(var e=t.length,r=n.length,i=0,a=Math.min(e,r);i<a;++i)if(t[i]!==n[i]){e=t[i],r=n[i];break}return e<r?-1:r<e?1:0},o.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},o.concat=function(t,n){if(!K(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return o.alloc(0);var e;if(void 0===n)for(n=0,e=0;e<t.length;++e)n+=t[e].length;var r=o.allocUnsafe(n),i=0;for(e=0;e<t.length;++e){var a=t[e];if(!o.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,i),i+=a.length}return r},o.byteLength=v,o.prototype._isBuffer=!0,o.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var n=0;n<t;n+=2)_(this,n,n+1);return this},o.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var n=0;n<t;n+=4)_(this,n,n+3),_(this,n+1,n+2);return this},o.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var n=0;n<t;n+=8)_(this,n,n+7),_(this,n+1,n+6),_(this,n+2,n+5),_(this,n+3,n+4);return this},o.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?k(this,0,t):y.apply(this,arguments)},o.prototype.equals=function(t){if(!o.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===o.compare(this,t)},o.prototype.inspect=function(){var t="",e=n.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,e).match(/.{2}/g).join(" "),this.length>e&&(t+=" ... ")),"<Buffer "+t+">"},o.prototype.compare=function(t,n,e,r,i){if(!o.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===n&&(n=0),void 0===e&&(e=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),n<0||e>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&n>=e)return 0;if(r>=i)return-1;if(n>=e)return 1;if(n>>>=0,e>>>=0,r>>>=0,i>>>=0,this===t)return 0;for(var a=i-r,u=e-n,s=Math.min(a,u),c=this.slice(r,i),f=t.slice(n,e),l=0;l<s;++l)if(c[l]!==f[l]){a=c[l],u=f[l];break}return a<u?-1:u<a?1:0},o.prototype.includes=function(t,n,e){return-1!==this.indexOf(t,n,e)},o.prototype.indexOf=function(t,n,e){return m(this,t,n,e,!0)},o.prototype.lastIndexOf=function(t,n,e){return m(this,t,n,e,!1)},o.prototype.write=function(t,n,e,r){if(void 0===n)r="utf8",e=this.length,n=0;else if(void 0===e&&"string"==typeof n)r=n,e=this.length,n=0;else{if(!isFinite(n))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");n|=0,isFinite(e)?(e|=0,void 0===r&&(r="utf8")):(r=e,e=void 0)}var i=this.length-n;if((void 0===e||e>i)&&(e=i),t.length>0&&(e<0||n<0)||n>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return b(this,t,n,e);case"utf8":case"utf-8":return w(this,t,n,e);case"ascii":return M(this,t,n,e);case"latin1":case"binary":return A(this,t,n,e);case"base64":return E(this,t,n,e);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,t,n,e);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},o.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var Q=4096;o.prototype.slice=function(t,n){var e=this.length;t=~~t,n=void 0===n?e:~~n,t<0?(t+=e)<0&&(t=0):t>e&&(t=e),n<0?(n+=e)<0&&(n=0):n>e&&(n=e),n<t&&(n=t);var r;if(o.TYPED_ARRAY_SUPPORT)r=this.subarray(t,n),r.__proto__=o.prototype;else{var i=n-t;r=new o(i,void 0);for(var a=0;a<i;++a)r[a]=this[a+t]}return r},o.prototype.readUIntLE=function(t,n,e){t|=0,n|=0,e||L(t,n,this.length);for(var r=this[t],i=1,o=0;++o<n&&(i*=256);)r+=this[t+o]*i;return r},o.prototype.readUIntBE=function(t,n,e){t|=0,n|=0,e||L(t,n,this.length);for(var r=this[t+--n],i=1;n>0&&(i*=256);)r+=this[t+--n]*i;return r},o.prototype.readUInt8=function(t,n){return n||L(t,1,this.length),this[t]},o.prototype.readUInt16LE=function(t,n){return n||L(t,2,this.length),this[t]|this[t+1]<<8},o.prototype.readUInt16BE=function(t,n){return n||L(t,2,this.length),this[t]<<8|this[t+1]},o.prototype.readUInt32LE=function(t,n){return n||L(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},o.prototype.readUInt32BE=function(t,n){return n||L(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},o.prototype.readIntLE=function(t,n,e){t|=0,n|=0,e||L(t,n,this.length);for(var r=this[t],i=1,o=0;++o<n&&(i*=256);)r+=this[t+o]*i;return i*=128,r>=i&&(r-=Math.pow(2,8*n)),r},o.prototype.readIntBE=function(t,n,e){t|=0,n|=0,e||L(t,n,this.length);for(var r=n,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*n)),o},o.prototype.readInt8=function(t,n){return n||L(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},o.prototype.readInt16LE=function(t,n){n||L(t,2,this.length);var e=this[t]|this[t+1]<<8;return 32768&e?4294901760|e:e},o.prototype.readInt16BE=function(t,n){n||L(t,2,this.length);var e=this[t+1]|this[t]<<8;return 32768&e?4294901760|e:e},o.prototype.readInt32LE=function(t,n){return n||L(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},o.prototype.readInt32BE=function(t,n){return n||L(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},o.prototype.readFloatLE=function(t,n){return n||L(t,4,this.length),J.read(this,t,!0,23,4)},o.prototype.readFloatBE=function(t,n){return n||L(t,4,this.length),J.read(this,t,!1,23,4)},o.prototype.readDoubleLE=function(t,n){return n||L(t,8,this.length),J.read(this,t,!0,52,8)},o.prototype.readDoubleBE=function(t,n){return n||L(t,8,this.length),J.read(this,t,!1,52,8)},o.prototype.writeUIntLE=function(t,n,e,r){if(t=+t,n|=0,e|=0,!r){U(this,t,n,e,Math.pow(2,8*e)-1,0)}var i=1,o=0;for(this[n]=255&t;++o<e&&(i*=256);)this[n+o]=t/i&255;return n+e},o.prototype.writeUIntBE=function(t,n,e,r){if(t=+t,n|=0,e|=0,!r){U(this,t,n,e,Math.pow(2,8*e)-1,0)}var i=e-1,o=1;for(this[n+i]=255&t;--i>=0&&(o*=256);)this[n+i]=t/o&255;return n+e},o.prototype.writeUInt8=function(t,n,e){return t=+t,n|=0,e||U(this,t,n,1,255,0),o.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[n]=255&t,n+1},o.prototype.writeUInt16LE=function(t,n,e){return t=+t,n|=0,e||U(this,t,n,2,65535,0),o.TYPED_ARRAY_SUPPORT?(this[n]=255&t,this[n+1]=t>>>8):B(this,t,n,!0),n+2},o.prototype.writeUInt16BE=function(t,n,e){return t=+t,n|=0,e||U(this,t,n,2,65535,0),o.TYPED_ARRAY_SUPPORT?(this[n]=t>>>8,this[n+1]=255&t):B(this,t,n,!1),n+2},o.prototype.writeUInt32LE=function(t,n,e){return t=+t,n|=0,e||U(this,t,n,4,4294967295,0),o.TYPED_ARRAY_SUPPORT?(this[n+3]=t>>>24,this[n+2]=t>>>16,this[n+1]=t>>>8,this[n]=255&t):z(this,t,n,!0),n+4},o.prototype.writeUInt32BE=function(t,n,e){return t=+t,n|=0,e||U(this,t,n,4,4294967295,0),o.TYPED_ARRAY_SUPPORT?(this[n]=t>>>24,this[n+1]=t>>>16,this[n+2]=t>>>8,this[n+3]=255&t):z(this,t,n,!1),n+4},o.prototype.writeIntLE=function(t,n,e,r){if(t=+t,n|=0,!r){var i=Math.pow(2,8*e-1);U(this,t,n,e,i-1,-i)}var o=0,a=1,u=0;for(this[n]=255&t;++o<e&&(a*=256);)t<0&&0===u&&0!==this[n+o-1]&&(u=1),this[n+o]=(t/a>>0)-u&255;return n+e},o.prototype.writeIntBE=function(t,n,e,r){if(t=+t,n|=0,!r){var i=Math.pow(2,8*e-1);U(this,t,n,e,i-1,-i)}var o=e-1,a=1,u=0;for(this[n+o]=255&t;--o>=0&&(a*=256);)t<0&&0===u&&0!==this[n+o+1]&&(u=1),this[n+o]=(t/a>>0)-u&255;return n+e},o.prototype.writeInt8=function(t,n,e){return t=+t,n|=0,e||U(this,t,n,1,127,-128),o.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[n]=255&t,n+1},o.prototype.writeInt16LE=function(t,n,e){return t=+t,n|=0,e||U(this,t,n,2,32767,-32768),o.TYPED_ARRAY_SUPPORT?(this[n]=255&t,this[n+1]=t>>>8):B(this,t,n,!0),n+2},o.prototype.writeInt16BE=function(t,n,e){return t=+t,n|=0,e||U(this,t,n,2,32767,-32768),o.TYPED_ARRAY_SUPPORT?(this[n]=t>>>8,this[n+1]=255&t):B(this,t,n,!1),n+2},o.prototype.writeInt32LE=function(t,n,e){return t=+t,n|=0,e||U(this,t,n,4,2147483647,-2147483648),o.TYPED_ARRAY_SUPPORT?(this[n]=255&t,this[n+1]=t>>>8,this[n+2]=t>>>16,this[n+3]=t>>>24):z(this,t,n,!0),n+4},o.prototype.writeInt32BE=function(t,n,e){return t=+t,n|=0,e||U(this,t,n,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),o.TYPED_ARRAY_SUPPORT?(this[n]=t>>>24,this[n+1]=t>>>16,this[n+2]=t>>>8,this[n+3]=255&t):z(this,t,n,!1),n+4},o.prototype.writeFloatLE=function(t,n,e){return I(this,t,n,!0,e)},o.prototype.writeFloatBE=function(t,n,e){return I(this,t,n,!1,e)},o.prototype.writeDoubleLE=function(t,n,e){return q(this,t,n,!0,e)},o.prototype.writeDoubleBE=function(t,n,e){return q(this,t,n,!1,e)},o.prototype.copy=function(t,n,e,r){if(e||(e=0),r||0===r||(r=this.length),n>=t.length&&(n=t.length),n||(n=0),r>0&&r<e&&(r=e),r===e)return 0;if(0===t.length||0===this.length)return 0;if(n<0)throw new RangeError("targetStart out of bounds");if(e<0||e>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-n<r-e&&(r=t.length-n+e);var i,a=r-e;if(this===t&&e<n&&n<r)for(i=a-1;i>=0;--i)t[i+n]=this[i+e];else if(a<1e3||!o.TYPED_ARRAY_SUPPORT)for(i=0;i<a;++i)t[i+n]=this[i+e];else Uint8Array.prototype.set.call(t,this.subarray(e,e+a),n);return a},o.prototype.fill=function(t,n,e,r){if("string"==typeof t){if("string"==typeof n?(r=n,n=0,e=this.length):"string"==typeof e&&(r=e,e=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!o.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(n<0||this.length<n||this.length<e)throw new RangeError("Out of range index");if(e<=n)return this;n>>>=0,e=void 0===e?this.length:e>>>0,t||(t=0);var a;if("number"==typeof t)for(a=n;a<e;++a)this[a]=t;else{var u=o.isBuffer(t)?t:H(new o(t,r).toString()),s=u.length;for(a=0;a<e-n;++a)this[a+n]=u[a%s]}return this};var tt=/[^+\/0-9A-Za-z-_]/g}).call(n,e(46))},function(t,n){var e={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==e.call(t)}},function(t,n,e){!function(t){function n(){return""===c.hash||"#"===c.hash}function e(t,n){for(var e=0;e<t.length;e+=1)if(!1===n(t[e],e,t))return}function r(t){for(var n=[],e=0,r=t.length;e<r;e++)n=n.concat(t[e]);return n}function i(t,n,e){if(!t.length)return e();var r=0;!function i(){n(t[r],function(n){n||!1===n?(e(n),e=function(){}):(r+=1,r===t.length?e():i())})}()}function o(t,n,e){e=t;for(var r in n)if(n.hasOwnProperty(r)&&(e=n[r](t))!==t)break;return e===t?"([._a-zA-Z0-9-%()]+)":e}function a(t,n){for(var e,r=0,i="";e=t.substr(r).match(/[^\w\d\- %@&]*\*[^\w\d\- %@&]*/);)r=e.index+e[0].length,e[0]=e[0].replace(/^\*/,"([_.()!\\ %@&a-zA-Z0-9-]+)"),i+=t.substr(0,e.index)+e[0];t=i+=t.substr(r);var a,u,s=t.match(/:([^\/]+)/gi);if(s){u=s.length;for(var c=0;c<u;c++)a=s[c],t="::"===a.slice(0,2)?a.slice(1):t.replace(a,o(a,n))}return t}function u(t,n,e,r){var i,o=0,a=0,u=0,e=(e||"(").toString(),r=(r||")").toString();for(i=0;i<t.length;i++){var s=t[i];if(s.indexOf(e,o)>s.indexOf(r,o)||~s.indexOf(e,o)&&!~s.indexOf(r,o)||!~s.indexOf(e,o)&&~s.indexOf(r,o)){if(a=s.indexOf(e,o),u=s.indexOf(r,o),~a&&!~u||!~a&&~u){t=[t.slice(0,(i||1)+1).join(n)].concat(t.slice((i||1)+1))}o=(u>a?u:a)+1,i=0}else o=0}return t}var c=document.location,f={mode:"modern",hash:c.hash,history:!1,check:function(){var t=c.hash;t!=this.hash&&(this.hash=t,this.onHashChanged())},fire:function(){"modern"===this.mode?!0===this.history?window.onpopstate():window.onhashchange():this.onHashChanged()},init:function(t,n){function e(t){for(var n=0,e=l.listeners.length;n<e;n++)l.listeners[n](t)}var r=this;if(this.history=n,l.listeners||(l.listeners=[]),"onhashchange"in window&&(void 0===document.documentMode||document.documentMode>7))!0===this.history?setTimeout(function(){window.onpopstate=e},500):window.onhashchange=e,this.mode="modern";else{var i=document.createElement("iframe");i.id="state-frame",i.style.display="none",document.body.appendChild(i),this.writeFrame(""),"onpropertychange"in document&&"attachEvent"in document&&document.attachEvent("onpropertychange",function(){"location"===event.propertyName&&r.check()}),window.setInterval(function(){r.check()},50),this.onHashChanged=e,this.mode="legacy"}return l.listeners.push(t),this.mode},destroy:function(t){if(l&&l.listeners)for(var n=l.listeners,e=n.length-1;e>=0;e--)n[e]===t&&n.splice(e,1)},setHash:function(t){return"legacy"===this.mode&&this.writeFrame(t),!0===this.history?(window.history.pushState({},document.title,t),this.fire()):c.hash="/"===t[0]?t:"/"+t,this},writeFrame:function(t){var n=document.getElementById("state-frame"),e=n.contentDocument||n.contentWindow.document;e.open(),e.write("<script>_hash = '"+t+"'; onload = parent.listener.syncHash;<script>"),e.close()},syncHash:function(){var t=this._hash;return t!=c.hash&&(c.hash=t),this},onHashChanged:function(){}},l=t.Router=function(t){if(!(this instanceof l))return new l(t);this.params={},this.routes={},this.methods=["on","once","after","before"],this.scope=[],this._methods={},this._insert=this.insert,this.insert=this.insertEx,this.historySupport=null!=(null!=window.history?window.history.pushState:null),this.configure(),this.mount(t||{})};l.prototype.init=function(t){var e,r=this;return this.handler=function(t){var n=t&&t.newURL||window.location.hash,e=!0===r.history?r.getPath():n.replace(/.*#/,"");r.dispatch("on","/"===e.charAt(0)?e:"/"+e)},f.init(this.handler,this.history),!1===this.history?n()&&t?c.hash=t:n()||r.dispatch("on","/"+c.hash.replace(/^(#\/|#|\/)/,"")):(this.convert_hash_in_init?(e=n()&&t?t:n()?null:c.hash.replace(/^#/,""))&&window.history.replaceState({},document.title,e):e=this.getPath(),(e||!0===this.run_in_init)&&this.handler()),this},l.prototype.explode=function(){var t=!0===this.history?this.getPath():c.hash;return"/"===t.charAt(1)&&(t=t.slice(1)),t.slice(1,t.length).split("/")},l.prototype.setRoute=function(t,n,e){var r=this.explode();return"number"==typeof t&&"string"==typeof n?r[t]=n:"string"==typeof e?r.splice(t,n,s):r=[t],f.setHash(r.join("/")),r},l.prototype.insertEx=function(t,n,e,r){return"once"===t&&(t="on",e=function(t){var n=!1;return function(){if(!n)return n=!0,t.apply(this,arguments)}}(e)),this._insert(t,n,e,r)},l.prototype.getRoute=function(t){var n=t;if("number"==typeof t)n=this.explode()[t];else if("string"==typeof t){var e=this.explode();n=e.indexOf(t)}else n=this.explode();return n},l.prototype.destroy=function(){return f.destroy(this.handler),this},l.prototype.getPath=function(){var t=window.location.pathname;return"/"!==t.substr(0,1)&&(t="/"+t),t};var h=/\?.*/;l.prototype.configure=function(t){t=t||{};for(var n=0;n<this.methods.length;n++)this._methods[this.methods[n]]=!0;return this.recurse=t.recurse||this.recurse||!1,this.async=t.async||!1,this.delimiter=t.delimiter||"/",this.strict=void 0===t.strict||t.strict,this.notfound=t.notfound,this.resource=t.resource,this.history=t.html5history&&this.historySupport||!1,this.run_in_init=!0===this.history&&!1!==t.run_handler_in_init,this.convert_hash_in_init=!0===this.history&&!1!==t.convert_hash_in_init,this.every={after:t.after||null,before:t.before||null,on:t.on||null},this},l.prototype.param=function(t,n){":"!==t[0]&&(t=":"+t);var e=new RegExp(t,"g");return this.params[t]=function(t){return t.replace(e,n.source||n)},this},l.prototype.on=l.prototype.route=function(t,n,e){var r=this;return e||"function"!=typeof n||(e=n,n=t,t="on"),Array.isArray(n)?n.forEach(function(n){r.on(t,n,e)}):(n.source&&(n=n.source.replace(/\\\//gi,"/")),Array.isArray(t)?t.forEach(function(t){r.on(t.toLowerCase(),n,e)}):(n=n.split(new RegExp(this.delimiter)),n=u(n,this.delimiter),void this.insert(t,this.scope.concat(n),e)))},l.prototype.path=function(t,n){var e=this.scope.length;t.source&&(t=t.source.replace(/\\\//gi,"/")),t=t.split(new RegExp(this.delimiter)),t=u(t,this.delimiter),this.scope=this.scope.concat(t),n.call(this,this),this.scope.splice(e,t.length)},l.prototype.dispatch=function(t,n,e){function r(){o.last=a.after,o.invoke(o.runlist(a),o,e)}var i,o=this,a=this.traverse(t,n.replace(h,""),this.routes,""),u=this._invoked;return this._invoked=!0,a&&0!==a.length?("forward"===this.recurse&&(a=a.reverse()),(i=this.every&&this.every.after?[this.every.after].concat(this.last):[this.last])&&i.length>0&&u?(this.async?this.invoke(i,this,r):(this.invoke(i,this),r()),!0):(r(),!0)):(this.last=[],"function"==typeof this.notfound&&this.invoke([this.notfound],{method:t,path:n},e),!1)},l.prototype.invoke=function(t,n,r){var o,a=this;this.async?(o=function(e,r){if(Array.isArray(e))return i(e,o,r);"function"==typeof e&&e.apply(n,(t.captures||[]).concat(r))},i(t,o,function(){r&&r.apply(n,arguments)})):(o=function(r){return Array.isArray(r)?e(r,o):"function"==typeof r?r.apply(n,t.captures||[]):void("string"==typeof r&&a.resource&&a.resource[r].apply(n,t.captures||[]))},e(t,o))},l.prototype.traverse=function(t,n,e,r,i){function o(t){function n(t){for(var e=[],r=0;r<t.length;r++)e[r]=Array.isArray(t[r])?n(t[r]):t[r];return e}function e(t){for(var n=t.length-1;n>=0;n--)Array.isArray(t[n])?(e(t[n]),0===t[n].length&&t.splice(n,1)):i(t[n])||t.splice(n,1)}if(!i)return t;var r=n(t);return r.matched=t.matched,r.captures=t.captures,r.after=t.after.filter(i),e(r),r}var a,u,s,c,f=[];if(n===this.delimiter&&e[t])return c=[[e.before,e[t]].filter(Boolean)],c.after=[e.after].filter(Boolean),c.matched=!0,c.captures=[],o(c);for(var l in e)if(e.hasOwnProperty(l)&&(!this._methods[l]||this._methods[l]&&"object"==typeof e[l]&&!Array.isArray(e[l]))){if(a=u=r+this.delimiter+l,this.strict||(u+="["+this.delimiter+"]?"),!(s=n.match(new RegExp("^"+u))))continue;if(s[0]&&s[0]==n&&e[l][t])return c=[[e[l].before,e[l][t]].filter(Boolean)],c.after=[e[l].after].filter(Boolean),c.matched=!0,c.captures=s.slice(1),this.recurse&&e===this.routes&&(c.push([e.before,e.on].filter(Boolean)),c.after=c.after.concat([e.after].filter(Boolean))),o(c);if(c=this.traverse(t,n,e[l],a),c.matched)return c.length>0&&(f=f.concat(c)),this.recurse&&(f.push([e[l].before,e[l].on].filter(Boolean)),c.after=c.after.concat([e[l].after].filter(Boolean)),e===this.routes&&(f.push([e.before,e.on].filter(Boolean)),c.after=c.after.concat([e.after].filter(Boolean)))),f.matched=!0,f.captures=c.captures,f.after=c.after,o(f)}return!1},l.prototype.insert=function(t,n,e,r){var i,o,u,s;if(n=n.filter(function(t){return t&&t.length>0}),r=r||this.routes,s=n.shift(),/\:|\*/.test(s)&&!/\\d|\\w/.test(s)&&(s=a(s,this.params)),n.length>0)return r[s]=r[s]||{},this.insert(t,n,e,r[s]);if(s||n.length||r!==this.routes){if(i=typeof r[s],o=Array.isArray(r[s]),r[s]&&!o&&"object"==i)switch(typeof r[s][t]){case"function":return void(r[s][t]=[r[s][t],e]);case"object":return void r[s][t].push(e);case"undefined":return void(r[s][t]=e)}else if("undefined"==i)return u={},u[t]=e,void(r[s]=u);throw new Error("Invalid route context: "+i)}switch(typeof r[t]){case"function":return void(r[t]=[r[t],e]);case"object":return void r[t].push(e);case"undefined":return void(r[t]=e)}},l.prototype.extend=function(t){var n,e=this,r=t.length;for(n=0;n<r;n++)!function(t){e._methods[t]=!0,e[t]=function(){var n=1===arguments.length?[t,""]:[t];e.on.apply(e,n.concat(Array.prototype.slice.call(arguments)))}}(t[n])},l.prototype.runlist=function(t){var n=this.every&&this.every.before?[this.every.before].concat(r(t)):r(t);return this.every&&this.every.on&&n.push(this.every.on),n.captures=t.captures,n.source=t.source,n},l.prototype.mount=function(t,n){if(t&&"object"==typeof t&&!Array.isArray(t)){var e=this;n=n||[],Array.isArray(n)||(n=n.split(e.delimiter));for(var r in t)t.hasOwnProperty(r)&&function(n,r){var i=n,o=n.split(e.delimiter),a=typeof t[n],s=""===o[0]||!e._methods[o[0]],c=s?"on":i;if(s&&(i=i.slice((i.match(new RegExp("^"+e.delimiter))||[""])[0].length),o.shift()),s&&"object"===a&&!Array.isArray(t[n]))return r=r.concat(o),void e.mount(t[n],r);s&&(r=r.concat(i.split(e.delimiter)),r=u(r,e.delimiter)),e.insert(c,r,t[n])}(r,n.slice(0))}}}(n)},function(t,n){n.read=function(t,n,e,r,i){var o,a,u=8*i-r-1,s=(1<<u)-1,c=s>>1,f=-7,l=e?i-1:0,h=e?-1:1,p=t[n+l];for(l+=h,o=p&(1<<-f)-1,p>>=-f,f+=u;f>0;o=256*o+t[n+l],l+=h,f-=8);for(a=o&(1<<-f)-1,o>>=-f,f+=r;f>0;a=256*a+t[n+l],l+=h,f-=8);if(0===o)o=1-c;else{if(o===s)return a?NaN:1/0*(p?-1:1);a+=Math.pow(2,r),o-=c}return(p?-1:1)*a*Math.pow(2,o-r)},n.write=function(t,n,e,r,i,o){var a,u,s,c=8*o-i-1,f=(1<<c)-1,l=f>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:o-1,d=r?1:-1,g=n<0||0===n&&1/n<0?1:0;for(n=Math.abs(n),isNaN(n)||n===1/0?(u=isNaN(n)?1:0,a=f):(a=Math.floor(Math.log(n)/Math.LN2),n*(s=Math.pow(2,-a))<1&&(a--,s*=2),n+=a+l>=1?h/s:h*Math.pow(2,1-l),n*s>=2&&(a++,s/=2),a+l>=f?(u=0,a=f):a+l>=1?(u=(n*s-1)*Math.pow(2,i),a+=l):(u=n*Math.pow(2,l-1)*Math.pow(2,i),a=0));i>=8;t[e+p]=255&u,p+=d,u/=256,i-=8);for(a=a<<i|u,c+=i;c>0;t[e+p]=255&a,p+=d,a/=256,c-=8);t[e+p-d]|=128*g}},function(t,n){function e(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function i(t){if(f===setTimeout)return setTimeout(t,0);if((f===e||!f)&&setTimeout)return f=setTimeout,setTimeout(t,0);try{return f(t,0)}catch(n){try{return f.call(null,t,0)}catch(n){return f.call(this,t,0)}}}function o(t){if(l===clearTimeout)return clearTimeout(t);if((l===r||!l)&&clearTimeout)return l=clearTimeout,clearTimeout(t);try{return l(t)}catch(n){try{return l.call(null,t)}catch(n){return l.call(this,t)}}}function a(){g&&p&&(g=!1,p.length?d=p.concat(d):v=-1,d.length&&u())}function u(){if(!g){var t=i(a);g=!0;for(var n=d.length;n;){for(p=d,d=[];++v<n;)p&&p[v].run();v=-1,n=d.length}p=null,g=!1,o(t)}}function s(t,n){this.fun=t,this.array=n}function c(){}var f,l,h=t.exports={};!function(){try{f="function"==typeof setTimeout?setTimeout:e}catch(t){f=e}try{l="function"==typeof clearTimeout?clearTimeout:r}catch(t){l=r}}();var p,d=[],g=!1,v=-1;h.nextTick=function(t){var n=new Array(arguments.length-1);if(arguments.length>1)for(var e=1;e<arguments.length;e++)n[e-1]=arguments[e];d.push(new s(t,n)),1!==d.length||g||i(u)},s.prototype.run=function(){this.fun.apply(null,this.array)},h.title="browser",h.browser=!0,h.env={},h.argv=[],h.version="",h.versions={},h.on=c,h.addListener=c,h.once=c,h.off=c,h.removeListener=c,h.removeAllListeners=c,h.emit=c,h.prependListener=c,h.prependOnceListener=c,h.listeners=function(t){return[]},h.binding=function(t){throw new Error("process.binding is not supported")},h.cwd=function(){return"/"},h.chdir=function(t){throw new Error("process.chdir is not supported")},h.umask=function(){return 0}},function(t,n){var e;e=function(){return this}();try{e=e||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(e=window)}t.exports=e}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,